{
  "address": "0xFC667c88bC4a114b10235C9085601869d0820AcE",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "DripRewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldGrowToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGrowToken",
          "type": "address"
        }
      ],
      "name": "GrowTokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardDuration",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "existingRewardTokens",
          "type": "address[]"
        }
      ],
      "name": "RewardTokenAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newRewardToken",
          "type": "address"
        }
      ],
      "name": "addRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_claimableAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "growToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isRewardToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardDuration",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardDurations",
          "type": "uint256[]"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardForDuration",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardForDuration",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardPerTokenRate",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGrowToken",
          "type": "address"
        }
      ],
      "name": "updateGrowToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x04a2b1ee160e23c434732d4ea8c1e8bf8febfece1848aa853bd07cf1f9cba9d2",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0xFC667c88bC4a114b10235C9085601869d0820AcE",
    "transactionIndex": 0,
    "gasUsed": "2691779",
    "logsBloom": "0x
    "blockHash": "0x70b6d949ec298fe7a1da3ebf18dc065f386b6a74b6b0966ce04195dba9a9c463",
    "transactionHash": "0x04a2b1ee160e23c434732d4ea8c1e8bf8febfece1848aa853bd07cf1f9cba9d2",
    "logs": [],
    "blockNumber": 14837490,
    "cumulativeGasUsed": "2691779",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c91ec8da7445f08f528614adf27c911d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"DripRewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldGrowToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGrowToken\",\"type\":\"address\"}],\"name\":\"GrowTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardDuration\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"existingRewardTokens\",\"type\":\"address[]\"}],\"name\":\"RewardTokenAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRewardToken\",\"type\":\"address\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimableAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"growToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardDuration\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardDurations\",\"type\":\"uint256[]\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardForDuration\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardForDuration\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardPerTokenRate\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGrowToken\",\"type\":\"address\"}],\"name\":\"updateGrowToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimReward(address)\":{\"details\":\"This function will claim rewards for all tokens being rewarded\"},\"claimable(address)\":{\"details\":\"In case of growToken it will return the actual underlying value\",\"returns\":{\"_claimableAmounts\":\"Array of claimable for token on same index in rewardTokens\",\"_rewardTokens\":\"Array of tokens being rewarded\"}},\"initialize(address,address[])\":{\"details\":\"Called by proxy to initialize this contract\",\"params\":{\"_pool\":\"Vesper pool address\",\"_rewardTokens\":\"Array of reward token addresses\"}},\"notifyRewardAmount(address,uint256,uint256)\":{\"details\":\"Notify that reward is added. Also updates reward rate and reward earning period.\"},\"notifyRewardAmount(address[],uint256[],uint256[])\":{\"details\":\"Also updates reward rate and reward earning period.\",\"params\":{\"_rewardAmounts\":\"Rewards amount for token on same index in rewardTokens array\",\"_rewardDurations\":\"Duration for which reward will be distributed\",\"_rewardTokens\":\"Tokens being rewarded\"}},\"rewardPerToken()\":{\"returns\":{\"_rewardPerTokenRate\":\"Array of Rewards rate for token on same index in rewardTokens\",\"_rewardTokens\":\"Array of tokens being rewarded\"}},\"updateGrowToken(address)\":{\"details\":\"growToken is used to check whether to call withdraw from Grow Pool or not\"}},\"version\":1},\"userdoc\":{\"events\":{\"RewardAdded(address,uint256,uint256)\":{\"notice\":\"Emitted after reward added\"},\"RewardPaid(address,address,uint256)\":{\"notice\":\"Emitted whenever any user claim rewards\"},\"RewardTokenAdded(address,address[])\":{\"notice\":\"Emitted after adding new rewards token into rewardTokens array\"}},\"kind\":\"user\",\"methods\":{\"addRewardToken(address)\":{\"notice\":\"Add new reward token in existing rewardsToken array\"},\"claimReward(address)\":{\"notice\":\"Claim earned rewards.\"},\"claimable(address)\":{\"notice\":\"Returns claimable reward amount.\"},\"getRewardTokens()\":{\"notice\":\"Provides easy access to all rewardTokens\"},\"isRewardToken(address)\":{\"notice\":\"Reward token to valid/invalid flag mapping\"},\"lastTimeRewardApplicable(address)\":{\"notice\":\"Returns timestamp of last reward update\"},\"lastUpdateTime(address)\":{\"notice\":\"Reward token to Last reward drip update time stamp mapping\"},\"notifyRewardAmount(address[],uint256[],uint256[])\":{\"notice\":\"Notify that reward is added. Only authorized caller can call\"},\"periodFinish(address)\":{\"notice\":\"Reward token to period ending of current reward\"},\"pool()\":{\"notice\":\"Vesper pool address\"},\"rewardDuration(address)\":{\"notice\":\"Reward token to Duration of current reward distribution\"},\"rewardPerToken()\":{\"notice\":\"Rewards rate per pool token\"},\"rewardPerTokenStored(address)\":{\"notice\":\"Reward token to Reward per token mapping. Calculated and stored at last drip update\"},\"rewardRates(address)\":{\"notice\":\"Reward token to current reward rate mapping\"},\"rewardTokens(uint256)\":{\"notice\":\"Array of reward token addresses\"},\"rewards(address,address)\":{\"notice\":\"RewardToken => User => Rewards earned till last reward update\"},\"updateGrowToken(address)\":{\"notice\":\"Defines which rewardToken is a growToken\"},\"updateReward(address)\":{\"notice\":\"Updated reward for given account.\"},\"userRewardPerTokenPaid(address,address)\":{\"notice\":\"Reward token => User => Reward per token stored at last reward update\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pool/earn/VesperEarnDrip.sol\":\"VesperEarnDrip\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"contracts/interfaces/token/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface TokenLike is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x003b4063990378d64f20d02f3da97c58338d85c0ca65955ed4a21065e2bb559a\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Pausable interface\\n */\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function shutdown() external;\\n\\n    function open() external;\\n}\\n\",\"keccak256\":\"0x22ea4d5c268f55d0839ec0140fef79a8849508c33106c63e57e967e301bf4f68\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IPoolRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPoolRewards {\\n    /// Emitted after reward added\\n    event RewardAdded(address indexed rewardToken, uint256 reward, uint256 rewardDuration);\\n    /// Emitted whenever any user claim rewards\\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\\n    /// Emitted after adding new rewards token into rewardTokens array\\n    event RewardTokenAdded(address indexed rewardToken, address[] existingRewardTokens);\\n\\n    function claimReward(address) external;\\n\\n    function notifyRewardAmount(\\n        address _rewardToken,\\n        uint256 _rewardAmount,\\n        uint256 _rewardDuration\\n    ) external;\\n\\n    function notifyRewardAmount(\\n        address[] memory _rewardTokens,\\n        uint256[] memory _rewardAmounts,\\n        uint256[] memory _rewardDurations\\n    ) external;\\n\\n    function updateReward(address) external;\\n\\n    function claimable(address _account)\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts);\\n\\n    function lastTimeRewardApplicable(address _rewardToken) external view returns (uint256);\\n\\n    function rewardForDuration()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration);\\n\\n    function rewardPerToken()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate);\\n}\\n\",\"keccak256\":\"0x44ded14cb0ced3f4f72286454c8f950480731f2b46d275b49172fc17ad9ad3c4\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\n\\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\\n    function calculateUniversalFee(uint256 _profit) external view returns (uint256 _fee);\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function poolRewards() external view returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address _address) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address _address) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa0912bb18aaa205e2ea7e59247f3b4cd863ccd33c25ed9459bdcc1635d15b833\",\"license\":\"MIT\"},\"contracts/pool/PoolRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/vesper/IPoolRewards.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\n\\ncontract PoolRewardsStorage {\\n    /// Vesper pool address\\n    address public pool;\\n\\n    /// Array of reward token addresses\\n    address[] public rewardTokens;\\n\\n    /// Reward token to valid/invalid flag mapping\\n    mapping(address => bool) public isRewardToken;\\n\\n    /// Reward token to period ending of current reward\\n    mapping(address => uint256) public periodFinish;\\n\\n    /// Reward token to current reward rate mapping\\n    mapping(address => uint256) public rewardRates;\\n\\n    /// Reward token to Duration of current reward distribution\\n    mapping(address => uint256) public rewardDuration;\\n\\n    /// Reward token to Last reward drip update time stamp mapping\\n    mapping(address => uint256) public lastUpdateTime;\\n\\n    /// Reward token to Reward per token mapping. Calculated and stored at last drip update\\n    mapping(address => uint256) public rewardPerTokenStored;\\n\\n    /// Reward token => User => Reward per token stored at last reward update\\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\\n\\n    /// RewardToken => User => Rewards earned till last reward update\\n    mapping(address => mapping(address => uint256)) public rewards;\\n}\\n\\n/// @title Distribute rewards based on vesper pool balance and supply\\ncontract PoolRewards is Initializable, IPoolRewards, ReentrancyGuard, PoolRewardsStorage {\\n    string public constant VERSION = \\\"4.0.0\\\";\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Called by proxy to initialize this contract\\n     * @param _pool Vesper pool address\\n     * @param _rewardTokens Array of reward token addresses\\n     */\\n    function initialize(address _pool, address[] memory _rewardTokens) public initializer {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_rewardTokens.length != 0, \\\"invalid-reward-tokens\\\");\\n        pool = _pool;\\n        rewardTokens = _rewardTokens;\\n        for (uint256 i = 0; i < _rewardTokens.length; i++) {\\n            isRewardToken[_rewardTokens[i]] = true;\\n        }\\n    }\\n\\n    modifier onlyAuthorized() {\\n        require(msg.sender == IVesperPool(pool).governor(), \\\"not-authorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Notify that reward is added. Only authorized caller can call\\n     * @dev Also updates reward rate and reward earning period.\\n     * @param _rewardTokens Tokens being rewarded\\n     * @param _rewardAmounts Rewards amount for token on same index in rewardTokens array\\n     * @param _rewardDurations Duration for which reward will be distributed\\n     */\\n    function notifyRewardAmount(\\n        address[] memory _rewardTokens,\\n        uint256[] memory _rewardAmounts,\\n        uint256[] memory _rewardDurations\\n    ) external virtual override onlyAuthorized {\\n        _notifyRewardAmount(_rewardTokens, _rewardAmounts, _rewardDurations, IERC20(pool).totalSupply());\\n    }\\n\\n    function notifyRewardAmount(\\n        address _rewardToken,\\n        uint256 _rewardAmount,\\n        uint256 _rewardDuration\\n    ) external virtual override onlyAuthorized {\\n        _notifyRewardAmount(_rewardToken, _rewardAmount, _rewardDuration, IERC20(pool).totalSupply());\\n    }\\n\\n    /// @notice Add new reward token in existing rewardsToken array\\n    function addRewardToken(address _newRewardToken) external onlyAuthorized {\\n        require(_newRewardToken != address(0), \\\"reward-token-address-zero\\\");\\n        require(!isRewardToken[_newRewardToken], \\\"reward-token-already-exist\\\");\\n        emit RewardTokenAdded(_newRewardToken, rewardTokens);\\n        rewardTokens.push(_newRewardToken);\\n        isRewardToken[_newRewardToken] = true;\\n    }\\n\\n    /**\\n     * @notice Claim earned rewards.\\n     * @dev This function will claim rewards for all tokens being rewarded\\n     */\\n    function claimReward(address _account) external virtual override nonReentrant {\\n        uint256 _totalSupply = IERC20(pool).totalSupply();\\n        uint256 _balance = IERC20(pool).balanceOf(_account);\\n        uint256 _len = rewardTokens.length;\\n        for (uint256 i = 0; i < _len; i++) {\\n            address _rewardToken = rewardTokens[i];\\n            _updateReward(_rewardToken, _account, _totalSupply, _balance);\\n\\n            // Claim rewards\\n            uint256 _reward = rewards[_rewardToken][_account];\\n            if (_reward != 0 && _reward <= IERC20(_rewardToken).balanceOf(address(this))) {\\n                _claimReward(_rewardToken, _account, _reward);\\n                emit RewardPaid(_account, _rewardToken, _reward);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Updated reward for given account.\\n     */\\n    function updateReward(address _account) external override {\\n        uint256 _totalSupply = IERC20(pool).totalSupply();\\n        uint256 _balance = IERC20(pool).balanceOf(_account);\\n        uint256 _len = rewardTokens.length;\\n        for (uint256 i = 0; i < _len; i++) {\\n            _updateReward(rewardTokens[i], _account, _totalSupply, _balance);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns claimable reward amount.\\n     * @return _rewardTokens Array of tokens being rewarded\\n     * @return _claimableAmounts Array of claimable for token on same index in rewardTokens\\n     */\\n    function claimable(address _account)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts)\\n    {\\n        uint256 _totalSupply = IERC20(pool).totalSupply();\\n        uint256 _balance = IERC20(pool).balanceOf(_account);\\n        uint256 _len = rewardTokens.length;\\n        _claimableAmounts = new uint256[](_len);\\n        for (uint256 i = 0; i < _len; i++) {\\n            _claimableAmounts[i] = _claimable(rewardTokens[i], _account, _totalSupply, _balance);\\n        }\\n        _rewardTokens = rewardTokens;\\n    }\\n\\n    /// @notice Provides easy access to all rewardTokens\\n    function getRewardTokens() external view returns (address[] memory) {\\n        return rewardTokens;\\n    }\\n\\n    /// @notice Returns timestamp of last reward update\\n    function lastTimeRewardApplicable(address _rewardToken) public view override returns (uint256) {\\n        return block.timestamp < periodFinish[_rewardToken] ? block.timestamp : periodFinish[_rewardToken];\\n    }\\n\\n    function rewardForDuration()\\n        external\\n        view\\n        override\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration)\\n    {\\n        uint256 _len = rewardTokens.length;\\n        _rewardForDuration = new uint256[](_len);\\n        for (uint256 i = 0; i < _len; i++) {\\n            _rewardForDuration[i] = rewardRates[rewardTokens[i]] * rewardDuration[rewardTokens[i]];\\n        }\\n        _rewardTokens = rewardTokens;\\n    }\\n\\n    /**\\n     * @notice Rewards rate per pool token\\n     * @return _rewardTokens Array of tokens being rewarded\\n     * @return _rewardPerTokenRate Array of Rewards rate for token on same index in rewardTokens\\n     */\\n    function rewardPerToken()\\n        external\\n        view\\n        override\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate)\\n    {\\n        uint256 _totalSupply = IERC20(pool).totalSupply();\\n        uint256 _len = rewardTokens.length;\\n        _rewardPerTokenRate = new uint256[](_len);\\n        for (uint256 i = 0; i < _len; i++) {\\n            _rewardPerTokenRate[i] = _rewardPerToken(rewardTokens[i], _totalSupply);\\n        }\\n        _rewardTokens = rewardTokens;\\n    }\\n\\n    function _claimable(\\n        address _rewardToken,\\n        address _account,\\n        uint256 _totalSupply,\\n        uint256 _balance\\n    ) internal view returns (uint256) {\\n        uint256 _rewardPerTokenAvailable =\\n            _rewardPerToken(_rewardToken, _totalSupply) - userRewardPerTokenPaid[_rewardToken][_account];\\n        uint256 _rewardsEarnedSinceLastUpdate = (_balance * _rewardPerTokenAvailable) / 1e18;\\n        return rewards[_rewardToken][_account] + _rewardsEarnedSinceLastUpdate;\\n    }\\n\\n    function _claimReward(\\n        address _rewardToken,\\n        address _account,\\n        uint256 _reward\\n    ) internal virtual {\\n        // Mark reward as claimed\\n        rewards[_rewardToken][_account] = 0;\\n        // Transfer reward\\n        IERC20(_rewardToken).safeTransfer(_account, _reward);\\n    }\\n\\n    // There are scenarios when extending contract will override external methods and\\n    // end up calling internal function. Hence providing internal functions\\n    function _notifyRewardAmount(\\n        address[] memory _rewardTokens,\\n        uint256[] memory _rewardAmounts,\\n        uint256[] memory _rewardDurations,\\n        uint256 _totalSupply\\n    ) internal {\\n        uint256 _len = _rewardTokens.length;\\n        uint256 _amountsLen = _rewardAmounts.length;\\n        uint256 _durationsLen = _rewardDurations.length;\\n        require(_len != 0, \\\"invalid-reward-tokens\\\");\\n        require(_amountsLen != 0, \\\"invalid-reward-amounts\\\");\\n        require(_durationsLen != 0, \\\"invalid-reward-durations\\\");\\n        require(_len == _amountsLen && _len == _durationsLen, \\\"array-length-mismatch\\\");\\n        for (uint256 i = 0; i < _len; i++) {\\n            _notifyRewardAmount(_rewardTokens[i], _rewardAmounts[i], _rewardDurations[i], _totalSupply);\\n        }\\n    }\\n\\n    function _notifyRewardAmount(\\n        address _rewardToken,\\n        uint256 _rewardAmount,\\n        uint256 _rewardDuration,\\n        uint256 _totalSupply\\n    ) internal {\\n        require(_rewardToken != address(0), \\\"incorrect-reward-token\\\");\\n        require(_rewardAmount != 0, \\\"incorrect-reward-amount\\\");\\n        require(_rewardDuration != 0, \\\"incorrect-reward-duration\\\");\\n        require(isRewardToken[_rewardToken], \\\"invalid-reward-token\\\");\\n\\n        // Update rewards earned so far\\n        rewardPerTokenStored[_rewardToken] = _rewardPerToken(_rewardToken, _totalSupply);\\n        if (block.timestamp >= periodFinish[_rewardToken]) {\\n            rewardRates[_rewardToken] = _rewardAmount / _rewardDuration;\\n        } else {\\n            uint256 remainingPeriod = periodFinish[_rewardToken] - block.timestamp;\\n\\n            uint256 leftover = remainingPeriod * rewardRates[_rewardToken];\\n            rewardRates[_rewardToken] = (_rewardAmount + leftover) / _rewardDuration;\\n        }\\n        // Safety check\\n        uint256 balance = IERC20(_rewardToken).balanceOf(address(this));\\n        require(rewardRates[_rewardToken] <= (balance / _rewardDuration), \\\"rewards-too-high\\\");\\n        // Start new drip time\\n        rewardDuration[_rewardToken] = _rewardDuration;\\n        lastUpdateTime[_rewardToken] = block.timestamp;\\n        periodFinish[_rewardToken] = block.timestamp + _rewardDuration;\\n        emit RewardAdded(_rewardToken, _rewardAmount, _rewardDuration);\\n    }\\n\\n    function _rewardPerToken(address _rewardToken, uint256 _totalSupply) internal view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored[_rewardToken];\\n        }\\n\\n        uint256 _timeSinceLastUpdate = lastTimeRewardApplicable(_rewardToken) - lastUpdateTime[_rewardToken];\\n        uint256 _rewardsSinceLastUpdate = _timeSinceLastUpdate * rewardRates[_rewardToken];\\n        uint256 _rewardsPerTokenSinceLastUpdate = (_rewardsSinceLastUpdate * 1e18) / _totalSupply;\\n        return rewardPerTokenStored[_rewardToken] + _rewardsPerTokenSinceLastUpdate;\\n    }\\n\\n    function _updateReward(\\n        address _rewardToken,\\n        address _account,\\n        uint256 _totalSupply,\\n        uint256 _balance\\n    ) internal {\\n        uint256 _rewardPerTokenStored = _rewardPerToken(_rewardToken, _totalSupply);\\n        rewardPerTokenStored[_rewardToken] = _rewardPerTokenStored;\\n        lastUpdateTime[_rewardToken] = lastTimeRewardApplicable(_rewardToken);\\n        if (_account != address(0)) {\\n            rewards[_rewardToken][_account] = _claimable(_rewardToken, _account, _totalSupply, _balance);\\n            userRewardPerTokenPaid[_rewardToken][_account] = _rewardPerTokenStored;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3afcdb8797a78f1d6e11b7c66a7634739a178a4896681e0369335488e50b184\",\"license\":\"MIT\"},\"contracts/pool/earn/VesperEarnDrip.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../PoolRewards.sol\\\";\\nimport \\\"../../interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"../../interfaces/token/IToken.sol\\\";\\n\\ninterface IVesperPoolV2 {\\n    function getPricePerShare() external view returns (uint256);\\n}\\n\\ncontract VesperEarnDrip is PoolRewards {\\n    TokenLike internal constant WETH = TokenLike(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    using SafeERC20 for IERC20;\\n\\n    event DripRewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\\n    event GrowTokenUpdated(address indexed oldGrowToken, address indexed newGrowToken);\\n\\n    address public growToken;\\n\\n    receive() external payable {\\n        require(msg.sender == address(WETH), \\\"deposits-not-allowed\\\");\\n    }\\n\\n    /**\\n     * @notice Returns claimable reward amount.\\n     * @dev In case of growToken it will return the actual underlying value\\n     * @return _rewardTokens Array of tokens being rewarded\\n     * @return _claimableAmounts Array of claimable for token on same index in rewardTokens\\n     */\\n    function claimable(address _account)\\n        external\\n        view\\n        override\\n        returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts)\\n    {\\n        uint256 _totalSupply = IERC20(pool).totalSupply();\\n        uint256 _balance = IERC20(pool).balanceOf(_account);\\n        uint256 _len = rewardTokens.length;\\n        _claimableAmounts = new uint256[](_len);\\n        for (uint256 i = 0; i < _len; i++) {\\n            uint256 _claimableAmount = _claimable(rewardTokens[i], _account, _totalSupply, _balance);\\n            if (rewardTokens[i] == growToken) {\\n                _claimableAmount = _calculateRewardInDripToken(growToken, _claimableAmount);\\n            }\\n            _claimableAmounts[i] = _claimableAmount;\\n        }\\n        _rewardTokens = rewardTokens;\\n    }\\n\\n    /**\\n     * @dev Notify that reward is added.\\n     * Also updates reward rate and reward earning period.\\n     */\\n    function notifyRewardAmount(\\n        address _rewardToken,\\n        uint256 _rewardAmount,\\n        uint256 _rewardDuration\\n    ) external override {\\n        (bool isStrategy, , , , , , , , ) = IVesperPool(pool).strategy(msg.sender);\\n        require(\\n            msg.sender == IVesperPool(pool).governor() || (isRewardToken[_rewardToken] && isStrategy),\\n            \\\"not-authorized\\\"\\n        );\\n        super._notifyRewardAmount(_rewardToken, _rewardAmount, _rewardDuration, IVesperPool(pool).totalSupply());\\n    }\\n\\n    /**\\n     * @notice Defines which rewardToken is a growToken\\n     * @dev growToken is used to check whether to call withdraw\\n     * from Grow Pool or not\\n     */\\n    function updateGrowToken(address _newGrowToken) external onlyAuthorized {\\n        require(_newGrowToken != address(0), \\\"grow-token-address-zero\\\");\\n        require(isRewardToken[_newGrowToken], \\\"grow-token-not-reward-token\\\");\\n        emit GrowTokenUpdated(growToken, _newGrowToken);\\n        growToken = _newGrowToken;\\n    }\\n\\n    /**\\n     * @notice Claim earned rewards in dripToken.\\n     * @dev Withdraws from the Grow Pool and transfers the amount to _account\\n     * @dev Claim rewards only if reward in dripToken is non zero\\n     */\\n    function _claimReward(\\n        address _rewardToken,\\n        address _account,\\n        uint256 _reward\\n    ) internal override {\\n        if (_rewardToken == growToken) {\\n            // Calculate reward in drip token\\n            uint256 _rewardInDripToken = _calculateRewardInDripToken(_rewardToken, _reward);\\n            // If reward in drip token is non zero\\n            if (_rewardInDripToken != 0) {\\n                // Mark reward as claimed\\n                rewards[_rewardToken][_account] = 0;\\n\\n                // Automatically unwraps the Grow Pool token AKA _rewardToken into the dripToken\\n                IERC20 _dripToken = IVesperPool(_rewardToken).token();\\n                uint256 _dripBalanceBefore = _dripToken.balanceOf(address(this));\\n                IVesperPool(_rewardToken).withdraw(_reward);\\n                uint256 _dripTokenAmount = _dripToken.balanceOf(address(this)) - _dripBalanceBefore;\\n                if (address(_dripToken) == address(WETH)) {\\n                    WETH.withdraw(_dripTokenAmount);\\n                    Address.sendValue(payable(_account), _dripTokenAmount);\\n                } else {\\n                    _dripToken.safeTransfer(_account, _dripTokenAmount);\\n                }\\n                emit DripRewardPaid(_account, address(_dripToken), _dripTokenAmount);\\n            }\\n        } else {\\n            // Behave as normal PoolRewards, no unwrap needed\\n            super._claimReward(_rewardToken, _account, _reward);\\n        }\\n    }\\n\\n    /// @dev Here _rewardToken AKA growToken is Vesper Grow Pool which can be V2 or V3 pool.\\n    /// V2 and V3 pool has different signature to read price per share\\n    function _calculateRewardInDripToken(address _rewardToken, uint256 _reward) private view returns (uint256) {\\n        uint256 _pricePerShare;\\n        // Try reading price per share using V3 pool signature, if this fails catch block will execute\\n        try IVesperPool(_rewardToken).pricePerShare() returns (uint256 _pricePerShareV3) {\\n            _pricePerShare = _pricePerShareV3;\\n        } catch {\\n            // If try fails, read price per share using V2 pool signature\\n            _pricePerShare = IVesperPoolV2(_rewardToken).getPricePerShare();\\n        }\\n        // Calculate reward in dripToken, as _reward is share of Grow Pool AKA growToken AKA _rewardToken\\n        return (_pricePerShare * _reward) / 1e18;\\n    }\\n}\\n\",\"keccak256\":\"0xb1fcdbc8a88a2ea26027653bd83f6080d52a4a69b94426b88de6825b59b12576\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060018055612f56806100246000396000f3fe60806040526004361061014f5760003560e01c80639ce43f90116100b6578063d279c1911161006f578063d279c19114610477578063da09d19d14610497578063e49e463b146104c4578063e70b9e27146104e4578063e9c544881461051c578063ffa1ad741461054957600080fd5b80639ce43f9014610393578063a3cd8ac4146103c0578063b5fd73f8146103e0578063bcd68eb614610420578063c4f59f9b14610440578063cd3daf9d1461046257600080fd5b8063638634ee11610108578063638634ee146102c65780636946a235146102e65780637035ab98146102fb57806377915823146103335780637bb7bed114610353578063946d92041461037357600080fd5b806316f0115b146101ba5780631c03e6cc146101f05780632ce9aead146102105780633d3b26031461024b578063402914f514610278578063632447c9146102a657600080fd5b366101b5573373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2146101b35760405162461bcd60e51b815260206004820152601460248201527319195c1bdcda5d1ccb5b9bdd0b585b1b1bddd95960621b60448201526064015b60405180910390fd5b005b600080fd5b3480156101c657600080fd5b506002546101da906001600160a01b031681565b6040516101e791906128e5565b60405180910390f35b3480156101fc57600080fd5b506101b361020b366004612911565b610587565b34801561021c57600080fd5b5061023d61022b366004612911565b60086020526000908152604090205481565b6040519081526020016101e7565b34801561025757600080fd5b5061023d610266366004612911565b60066020526000908152604090205481565b34801561028457600080fd5b50610298610293366004612911565b6107a1565b6040516101e7929190612972565b3480156102b257600080fd5b506101b36102c1366004612911565b610a2d565b3480156102d257600080fd5b5061023d6102e1366004612911565b610b8d565b3480156102f257600080fd5b50610298610bd2565b34801561030757600080fd5b5061023d6103163660046129c9565b600a60209081526000928352604080842090915290825290205481565b34801561033f57600080fd5b506101b361034e366004612911565b610d57565b34801561035f57600080fd5b506101da61036e366004612a02565b610f21565b34801561037f57600080fd5b506101b361038e366004612af8565b610f4b565b34801561039f57600080fd5b5061023d6103ae366004612911565b60096020526000908152604090205481565b3480156103cc57600080fd5b506101b36103db366004612b47565b611103565b3480156103ec57600080fd5b506104106103fb366004612911565b60046020526000908152604090205460ff1681565b60405190151581526020016101e7565b34801561042c57600080fd5b506101b361043b366004612bd7565b611307565b34801561044c57600080fd5b5061045561144e565b6040516101e79190612c5e565b34801561046e57600080fd5b506102986114b0565b34801561048357600080fd5b506101b3610492366004612911565b611654565b3480156104a357600080fd5b5061023d6104b2366004612911565b60056020526000908152604090205481565b3480156104d057600080fd5b50600c546101da906001600160a01b031681565b3480156104f057600080fd5b5061023d6104ff3660046129c9565b600b60209081526000928352604080842090915290825290205481565b34801561052857600080fd5b5061023d610537366004612911565b60076020526000908152604090205481565b34801561055557600080fd5b5061057a604051806040016040528060058152602001640342e302e360dc1b81525081565b6040516101e79190612c9d565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156105d557600080fd5b505afa1580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060d9190612cd0565b6001600160a01b0316336001600160a01b03161461063d5760405162461bcd60e51b81526004016101aa90612ced565b6001600160a01b03811661068f5760405162461bcd60e51b81526020600482015260196024820152787265776172642d746f6b656e2d616464726573732d7a65726f60381b60448201526064016101aa565b6001600160a01b03811660009081526004602052604090205460ff16156106f85760405162461bcd60e51b815260206004820152601a60248201527f7265776172642d746f6b656e2d616c72656164792d657869737400000000000060448201526064016101aa565b806001600160a01b03167f438dc3ee1ea07ec168befb145c10eb363aad7cbec063f8a006b032031582ac2b60036040516107329190612d15565b60405180910390a26003805460018181019092557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b039093166001600160a01b031990931683179055600091825260046020526040909120805460ff19169091179055565b6060806000600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107f457600080fd5b505afa158015610808573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082c9190612d65565b6002546040516370a0823160e01b81529192506000916001600160a01b03909116906370a08231906108629088906004016128e5565b60206040518083038186803b15801561087a57600080fd5b505afa15801561088e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b29190612d65565b600354909150806001600160401b038111156108d0576108d0612a1b565b6040519080825280602002602001820160405280156108f9578160200160208202803683370190505b50935060005b818110156109c757600061093c6003838154811061091f5761091f612d7e565b6000918252602090912001546001600160a01b0316898787611926565b600c54600380549293506001600160a01b03909116918490811061096257610962612d7e565b6000918252602090912001546001600160a01b0316141561099657600c54610993906001600160a01b0316826119c4565b90505b808683815181106109a9576109a9612d7e565b602090810291909101015250806109bf81612daa565b9150506108ff565b506003805480602002602001604051908101604052809291908181526020018280548015610a1e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a00575b50505050509450505050915091565b600254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015610a7257600080fd5b505afa158015610a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaa9190612d65565b6002546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190610ae09086906004016128e5565b60206040518083038186803b158015610af857600080fd5b505afa158015610b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b309190612d65565b60035490915060005b81811015610b8657610b7460038281548110610b5757610b57612d7e565b6000918252602090912001546001600160a01b0316868686611ad4565b80610b7e81612daa565b915050610b39565b5050505050565b6001600160a01b0381166000908152600560205260408120544210610bca576001600160a01b038216600090815260056020526040902054610bcc565b425b92915050565b6003546060908190806001600160401b03811115610bf257610bf2612a1b565b604051908082528060200260200182016040528015610c1b578160200160208202803683370190505b50915060005b81811015610cf4576007600060038381548110610c4057610c40612d7e565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001908152602001600020546006600060038481548110610c9657610c96612d7e565b60009182526020808320909101546001600160a01b03168352820192909252604001902054610cc59190612dc5565b838281518110610cd757610cd7612d7e565b602090810291909101015280610cec81612daa565b915050610c21565b506003805480602002602001604051908101604052809291908181526020018280548015610d4b57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d2d575b50505050509250509091565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610da557600080fd5b505afa158015610db9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddd9190612cd0565b6001600160a01b0316336001600160a01b031614610e0d5760405162461bcd60e51b81526004016101aa90612ced565b6001600160a01b038116610e5d5760405162461bcd60e51b815260206004820152601760248201527667726f772d746f6b656e2d616464726573732d7a65726f60481b60448201526064016101aa565b6001600160a01b03811660009081526004602052604090205460ff16610ec55760405162461bcd60e51b815260206004820152601b60248201527f67726f772d746f6b656e2d6e6f742d7265776172642d746f6b656e000000000060448201526064016101aa565b600c546040516001600160a01b038084169216907fc6c586c49766db4941d0aabc5f53c29482efc6b62e9b1cc1a036f34b371da37290600090a3600c80546001600160a01b0319166001600160a01b0392909216919091179055565b60038181548110610f3157600080fd5b6000918252602090912001546001600160a01b0316905081565b600054610100900460ff1680610f64575060005460ff16155b610fc75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016101aa565b600054610100900460ff16158015610fe9576000805461ffff19166101011790555b6001600160a01b0383166110365760405162461bcd60e51b8152602060048201526014602482015273706f6f6c2d616464726573732d69732d7a65726f60601b60448201526064016101aa565b81516110545760405162461bcd60e51b81526004016101aa90612de4565b600280546001600160a01b0319166001600160a01b038516179055815161108290600390602085019061286b565b5060005b82518110156110eb576001600460008584815181106110a7576110a7612d7e565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806110e381612daa565b915050611086565b5080156110fe576000805461ff00191690555b505050565b60025460405163228bfd9f60e01b81526000916001600160a01b03169063228bfd9f906111349033906004016128e5565b6101206040518083038186803b15801561114d57600080fd5b505afa158015611161573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111859190612e28565b50505050505050509050600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156111dd57600080fd5b505afa1580156111f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112159190612cd0565b6001600160a01b0316336001600160a01b0316148061125457506001600160a01b03841660009081526004602052604090205460ff1680156112545750805b6112705760405162461bcd60e51b81526004016101aa90612ced565b611301848484600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112c457600080fd5b505afa1580156112d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fc9190612d65565b611b7d565b50505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561135557600080fd5b505afa158015611369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138d9190612cd0565b6001600160a01b0316336001600160a01b0316146113bd5760405162461bcd60e51b81526004016101aa90612ced565b6110fe838383600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561141157600080fd5b505afa158015611425573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114499190612d65565b611f0f565b606060038054806020026020016040519081016040528092919081815260200182805480156114a657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611488575b5050505050905090565b6060806000600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561150357600080fd5b505afa158015611517573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153b9190612d65565b600354909150806001600160401b0381111561155957611559612a1b565b604051908082528060200260200182016040528015611582578160200160208202803683370190505b50925060005b818110156115f0576115c1600382815481106115a6576115a6612d7e565b6000918252602090912001546001600160a01b031684612090565b8482815181106115d3576115d3612d7e565b6020908102919091010152806115e881612daa565b915050611588565b50600380548060200260200160405190810160405280929190818152602001828054801561164757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611629575b5050505050935050509091565b600260015414156116a75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016101aa565b6002600181905554604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156116f157600080fd5b505afa158015611705573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117299190612d65565b6002546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061175f9086906004016128e5565b60206040518083038186803b15801561177757600080fd5b505afa15801561178b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117af9190612d65565b60035490915060005b8181101561191b576000600382815481106117d5576117d5612d7e565b6000918252602090912001546001600160a01b031690506117f881878787611ad4565b6001600160a01b038082166000908152600b60209081526040808320938a168352929052205480158015906118a857506040516370a0823160e01b81526001600160a01b038316906370a08231906118549030906004016128e5565b60206040518083038186803b15801561186c57600080fd5b505afa158015611880573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a49190612d65565b8111155b15611906576118b882888361215b565b816001600160a01b0316876001600160a01b03167f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e836040516118fd91815260200190565b60405180910390a35b5050808061191390612daa565b9150506117b8565b505060018055505050565b6001600160a01b038085166000908152600a60209081526040808320938716835292905290812054819061195a8786612090565b6119649190612e98565b90506000670de0b6b3a764000061197b8386612dc5565b6119859190612eaf565b6001600160a01b038089166000908152600b60209081526040808320938b16835292905220549091506119b9908290612ed1565b979650505050505050565b600080836001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0057600080fd5b505afa925050508015611a30575060408051601f3d908101601f19168201909252611a2d91810190612d65565b60015b611aac57836001600160a01b0316633d68175c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a6d57600080fd5b505afa158015611a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa59190612d65565b9050611aaf565b90505b670de0b6b3a7640000611ac28483612dc5565b611acc9190612eaf565b949350505050565b6000611ae08584612090565b6001600160a01b03861660009081526009602052604090208190559050611b0685610b8d565b6001600160a01b03808716600090815260086020526040902091909155841615610b8657611b3685858585611926565b6001600160a01b038087166000818152600b60209081526040808320948a1680845294825280832095909555918152600a8252838120928152919052208190555050505050565b6001600160a01b038416611bcc5760405162461bcd60e51b815260206004820152601660248201527534b731b7b93932b1ba16b932bbb0b93216ba37b5b2b760511b60448201526064016101aa565b82611c135760405162461bcd60e51b81526020600482015260176024820152761a5b98dbdc9c9958dd0b5c995dd85c990b585b5bdd5b9d604a1b60448201526064016101aa565b81611c5c5760405162461bcd60e51b815260206004820152601960248201527834b731b7b93932b1ba16b932bbb0b93216b23ab930ba34b7b760391b60448201526064016101aa565b6001600160a01b03841660009081526004602052604090205460ff16611cbb5760405162461bcd60e51b815260206004820152601460248201527334b73b30b634b216b932bbb0b93216ba37b5b2b760611b60448201526064016101aa565b611cc58482612090565b6001600160a01b0385166000908152600960209081526040808320939093556005905220544210611d1857611cfa8284612eaf565b6001600160a01b038516600090815260066020526040902055611d96565b6001600160a01b038416600090815260056020526040812054611d3c904290612e98565b6001600160a01b03861660009081526006602052604081205491925090611d639083612dc5565b905083611d708287612ed1565b611d7a9190612eaf565b6001600160a01b03871660009081526006602052604090205550505b6040516370a0823160e01b81526000906001600160a01b038616906370a0823190611dc59030906004016128e5565b60206040518083038186803b158015611ddd57600080fd5b505afa158015611df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e159190612d65565b9050611e218382612eaf565b6001600160a01b0386166000908152600660205260409020541115611e7b5760405162461bcd60e51b815260206004820152601060248201526f0e4caeec2e4c8e65ae8dede5ad0d2ced60831b60448201526064016101aa565b6001600160a01b0385166000908152600760209081526040808320869055600890915290204290819055611eb0908490612ed1565b6001600160a01b03861660008181526005602090815260409182902093909355805187815292830186905290917f6a6f77044107a33658235d41bedbbaf2fe9ccdceb313143c947a5e76e1ec8474910160405180910390a25050505050565b83518351835182611f325760405162461bcd60e51b81526004016101aa90612de4565b81611f785760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d7265776172642d616d6f756e747360501b60448201526064016101aa565b80611fc05760405162461bcd60e51b8152602060048201526018602482015277696e76616c69642d7265776172642d6475726174696f6e7360401b60448201526064016101aa565b8183148015611fce57508083145b6120125760405162461bcd60e51b81526020600482015260156024820152740c2e4e4c2f25ad8cadccee8d05adad2e6dac2e8c6d605b1b60448201526064016101aa565b60005b838110156120865761207488828151811061203257612032612d7e565b602002602001015188838151811061204c5761204c612d7e565b602002602001015188848151811061206657612066612d7e565b602002602001015188611b7d565b8061207e81612daa565b915050612015565b5050505050505050565b6000816120b657506001600160a01b038216600090815260096020526040902054610bcc565b6001600160a01b0383166000908152600860205260408120546120d885610b8d565b6120e29190612e98565b6001600160a01b038516600090815260066020526040812054919250906121099083612dc5565b905060008461212083670de0b6b3a7640000612dc5565b61212a9190612eaf565b6001600160a01b038716600090815260096020526040902054909150612151908290612ed1565b9695505050505050565b600c546001600160a01b038481169116141561248357600061217d84836119c4565b90508015611301576001600160a01b038085166000818152600b6020908152604080832094881683529381528382208290558351637e062a3560e11b81529351919363fc0c546a9260048083019392829003018186803b1580156121e057600080fd5b505afa1580156121f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122189190612cd0565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161224891906128e5565b60206040518083038186803b15801561226057600080fd5b505afa158015612274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122989190612d65565b604051632e1a7d4d60e01b8152600481018690529091506001600160a01b03871690632e1a7d4d90602401600060405180830381600087803b1580156122dd57600080fd5b505af11580156122f1573d6000803e3d6000fd5b50505050600081836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161232491906128e5565b60206040518083038186803b15801561233c57600080fd5b505afa158015612350573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123749190612d65565b61237e9190612e98565b90506001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2141561241957604051632e1a7d4d60e01b81526004810182905273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290632e1a7d4d90602401600060405180830381600087803b1580156123f257600080fd5b505af1158015612406573d6000803e3d6000fd5b50505050612414868261248e565b61242d565b61242d6001600160a01b03841687836125a7565b826001600160a01b0316866001600160a01b03167ff9d22c8b8042556a691815c80c733b36d6636b695259c99ca391be302bcb6ef78360405161247291815260200190565b60405180910390a350505050505050565b6110fe8383836125f9565b804710156124de5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016101aa565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461252b576040519150601f19603f3d011682016040523d82523d6000602084013e612530565b606091505b50509050806110fe5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016101aa565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526110fe90849061262f565b6001600160a01b038084166000818152600b602090815260408083209487168352939052918220919091556110fe9083836125a7565b6000612684826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127019092919063ffffffff16565b8051909150156110fe57808060200190518101906126a29190612ee9565b6110fe5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101aa565b6060612710848460008561271a565b90505b9392505050565b60608247101561277b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101aa565b843b6127c95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101aa565b600080866001600160a01b031685876040516127e59190612f04565b60006040518083038185875af1925050503d8060008114612822576040519150601f19603f3d011682016040523d82523d6000602084013e612827565b606091505b50915091506119b982828660608315612841575081612713565b8251156128515782518084602001fd5b8160405162461bcd60e51b81526004016101aa9190612c9d565b8280548282559060005260206000209081019282156128c0579160200282015b828111156128c057825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061288b565b506128cc9291506128d0565b5090565b5b808211156128cc57600081556001016128d1565b6001600160a01b0391909116815260200190565b6001600160a01b038116811461290e57600080fd5b50565b60006020828403121561292357600080fd5b8135612713816128f9565b600081518084526020808501945080840160005b838110156129675781516001600160a01b031687529582019590820190600101612942565b509495945050505050565b604081526000612985604083018561292e565b82810360208481019190915284518083528582019282019060005b818110156129bc578451835293830193918301916001016129a0565b5090979650505050505050565b600080604083850312156129dc57600080fd5b82356129e7816128f9565b915060208301356129f7816128f9565b809150509250929050565b600060208284031215612a1457600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612a5957612a59612a1b565b604052919050565b60006001600160401b03821115612a7a57612a7a612a1b565b5060051b60200190565b600082601f830112612a9557600080fd5b81356020612aaa612aa583612a61565b612a31565b82815260059290921b84018101918181019086841115612ac957600080fd5b8286015b84811015612aed578035612ae0816128f9565b8352918301918301612acd565b509695505050505050565b60008060408385031215612b0b57600080fd5b8235612b16816128f9565b915060208301356001600160401b03811115612b3157600080fd5b612b3d85828601612a84565b9150509250929050565b600080600060608486031215612b5c57600080fd5b8335612b67816128f9565b95602085013595506040909401359392505050565b600082601f830112612b8d57600080fd5b81356020612b9d612aa583612a61565b82815260059290921b84018101918181019086841115612bbc57600080fd5b8286015b84811015612aed5780358352918301918301612bc0565b600080600060608486031215612bec57600080fd5b83356001600160401b0380821115612c0357600080fd5b612c0f87838801612a84565b94506020860135915080821115612c2557600080fd5b612c3187838801612b7c565b93506040860135915080821115612c4757600080fd5b50612c5486828701612b7c565b9150509250925092565b602081526000612713602083018461292e565b60005b83811015612c8c578181015183820152602001612c74565b838111156113015750506000910152565b6020815260008251806020840152612cbc816040850160208701612c71565b601f01601f19169190910160400192915050565b600060208284031215612ce257600080fd5b8151612713816128f9565b6020808252600e908201526d1b9bdd0b585d5d1a1bdc9a5e995960921b604082015260600190565b6020808252825482820181905260008481528281209092916040850190845b81811015612d595783546001600160a01b031683526001938401939285019201612d34565b50909695505050505050565b600060208284031215612d7757600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612dbe57612dbe612d94565b5060010190565b6000816000190483118215151615612ddf57612ddf612d94565b500290565b602080825260159082015274696e76616c69642d7265776172642d746f6b656e7360581b604082015260600190565b80518015158114612e2357600080fd5b919050565b60008060008060008060008060006101208a8c031215612e4757600080fd5b612e508a612e13565b985060208a0151975060408a0151965060608a0151955060808a0151945060a08a0151935060c08a0151925060e08a015191506101008a015190509295985092959850929598565b600082821015612eaa57612eaa612d94565b500390565b600082612ecc57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115612ee457612ee4612d94565b500190565b600060208284031215612efb57600080fd5b61271382612e13565b60008251612f16818460208701612c71565b919091019291505056fea26469706673582212200d0daecdc7c59a6d66f08ab13b490f5a64311c29c6c3887092691225139782e764736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061014f5760003560e01c80639ce43f90116100b6578063d279c1911161006f578063d279c19114610477578063da09d19d14610497578063e49e463b146104c4578063e70b9e27146104e4578063e9c544881461051c578063ffa1ad741461054957600080fd5b80639ce43f9014610393578063a3cd8ac4146103c0578063b5fd73f8146103e0578063bcd68eb614610420578063c4f59f9b14610440578063cd3daf9d1461046257600080fd5b8063638634ee11610108578063638634ee146102c65780636946a235146102e65780637035ab98146102fb57806377915823146103335780637bb7bed114610353578063946d92041461037357600080fd5b806316f0115b146101ba5780631c03e6cc146101f05780632ce9aead146102105780633d3b26031461024b578063402914f514610278578063632447c9146102a657600080fd5b366101b5573373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2146101b35760405162461bcd60e51b815260206004820152601460248201527319195c1bdcda5d1ccb5b9bdd0b585b1b1bddd95960621b60448201526064015b60405180910390fd5b005b600080fd5b3480156101c657600080fd5b506002546101da906001600160a01b031681565b6040516101e791906128e5565b60405180910390f35b3480156101fc57600080fd5b506101b361020b366004612911565b610587565b34801561021c57600080fd5b5061023d61022b366004612911565b60086020526000908152604090205481565b6040519081526020016101e7565b34801561025757600080fd5b5061023d610266366004612911565b60066020526000908152604090205481565b34801561028457600080fd5b50610298610293366004612911565b6107a1565b6040516101e7929190612972565b3480156102b257600080fd5b506101b36102c1366004612911565b610a2d565b3480156102d257600080fd5b5061023d6102e1366004612911565b610b8d565b3480156102f257600080fd5b50610298610bd2565b34801561030757600080fd5b5061023d6103163660046129c9565b600a60209081526000928352604080842090915290825290205481565b34801561033f57600080fd5b506101b361034e366004612911565b610d57565b34801561035f57600080fd5b506101da61036e366004612a02565b610f21565b34801561037f57600080fd5b506101b361038e366004612af8565b610f4b565b34801561039f57600080fd5b5061023d6103ae366004612911565b60096020526000908152604090205481565b3480156103cc57600080fd5b506101b36103db366004612b47565b611103565b3480156103ec57600080fd5b506104106103fb366004612911565b60046020526000908152604090205460ff1681565b60405190151581526020016101e7565b34801561042c57600080fd5b506101b361043b366004612bd7565b611307565b34801561044c57600080fd5b5061045561144e565b6040516101e79190612c5e565b34801561046e57600080fd5b506102986114b0565b34801561048357600080fd5b506101b3610492366004612911565b611654565b3480156104a357600080fd5b5061023d6104b2366004612911565b60056020526000908152604090205481565b3480156104d057600080fd5b50600c546101da906001600160a01b031681565b3480156104f057600080fd5b5061023d6104ff3660046129c9565b600b60209081526000928352604080842090915290825290205481565b34801561052857600080fd5b5061023d610537366004612911565b60076020526000908152604090205481565b34801561055557600080fd5b5061057a604051806040016040528060058152602001640342e302e360dc1b81525081565b6040516101e79190612c9d565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156105d557600080fd5b505afa1580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060d9190612cd0565b6001600160a01b0316336001600160a01b03161461063d5760405162461bcd60e51b81526004016101aa90612ced565b6001600160a01b03811661068f5760405162461bcd60e51b81526020600482015260196024820152787265776172642d746f6b656e2d616464726573732d7a65726f60381b60448201526064016101aa565b6001600160a01b03811660009081526004602052604090205460ff16156106f85760405162461bcd60e51b815260206004820152601a60248201527f7265776172642d746f6b656e2d616c72656164792d657869737400000000000060448201526064016101aa565b806001600160a01b03167f438dc3ee1ea07ec168befb145c10eb363aad7cbec063f8a006b032031582ac2b60036040516107329190612d15565b60405180910390a26003805460018181019092557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b039093166001600160a01b031990931683179055600091825260046020526040909120805460ff19169091179055565b6060806000600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107f457600080fd5b505afa158015610808573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082c9190612d65565b6002546040516370a0823160e01b81529192506000916001600160a01b03909116906370a08231906108629088906004016128e5565b60206040518083038186803b15801561087a57600080fd5b505afa15801561088e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b29190612d65565b600354909150806001600160401b038111156108d0576108d0612a1b565b6040519080825280602002602001820160405280156108f9578160200160208202803683370190505b50935060005b818110156109c757600061093c6003838154811061091f5761091f612d7e565b6000918252602090912001546001600160a01b0316898787611926565b600c54600380549293506001600160a01b03909116918490811061096257610962612d7e565b6000918252602090912001546001600160a01b0316141561099657600c54610993906001600160a01b0316826119c4565b90505b808683815181106109a9576109a9612d7e565b602090810291909101015250806109bf81612daa565b9150506108ff565b506003805480602002602001604051908101604052809291908181526020018280548015610a1e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a00575b50505050509450505050915091565b600254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015610a7257600080fd5b505afa158015610a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaa9190612d65565b6002546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190610ae09086906004016128e5565b60206040518083038186803b158015610af857600080fd5b505afa158015610b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b309190612d65565b60035490915060005b81811015610b8657610b7460038281548110610b5757610b57612d7e565b6000918252602090912001546001600160a01b0316868686611ad4565b80610b7e81612daa565b915050610b39565b5050505050565b6001600160a01b0381166000908152600560205260408120544210610bca576001600160a01b038216600090815260056020526040902054610bcc565b425b92915050565b6003546060908190806001600160401b03811115610bf257610bf2612a1b565b604051908082528060200260200182016040528015610c1b578160200160208202803683370190505b50915060005b81811015610cf4576007600060038381548110610c4057610c40612d7e565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001908152602001600020546006600060038481548110610c9657610c96612d7e565b60009182526020808320909101546001600160a01b03168352820192909252604001902054610cc59190612dc5565b838281518110610cd757610cd7612d7e565b602090810291909101015280610cec81612daa565b915050610c21565b506003805480602002602001604051908101604052809291908181526020018280548015610d4b57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d2d575b50505050509250509091565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610da557600080fd5b505afa158015610db9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddd9190612cd0565b6001600160a01b0316336001600160a01b031614610e0d5760405162461bcd60e51b81526004016101aa90612ced565b6001600160a01b038116610e5d5760405162461bcd60e51b815260206004820152601760248201527667726f772d746f6b656e2d616464726573732d7a65726f60481b60448201526064016101aa565b6001600160a01b03811660009081526004602052604090205460ff16610ec55760405162461bcd60e51b815260206004820152601b60248201527f67726f772d746f6b656e2d6e6f742d7265776172642d746f6b656e000000000060448201526064016101aa565b600c546040516001600160a01b038084169216907fc6c586c49766db4941d0aabc5f53c29482efc6b62e9b1cc1a036f34b371da37290600090a3600c80546001600160a01b0319166001600160a01b0392909216919091179055565b60038181548110610f3157600080fd5b6000918252602090912001546001600160a01b0316905081565b600054610100900460ff1680610f64575060005460ff16155b610fc75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016101aa565b600054610100900460ff16158015610fe9576000805461ffff19166101011790555b6001600160a01b0383166110365760405162461bcd60e51b8152602060048201526014602482015273706f6f6c2d616464726573732d69732d7a65726f60601b60448201526064016101aa565b81516110545760405162461bcd60e51b81526004016101aa90612de4565b600280546001600160a01b0319166001600160a01b038516179055815161108290600390602085019061286b565b5060005b82518110156110eb576001600460008584815181106110a7576110a7612d7e565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806110e381612daa565b915050611086565b5080156110fe576000805461ff00191690555b505050565b60025460405163228bfd9f60e01b81526000916001600160a01b03169063228bfd9f906111349033906004016128e5565b6101206040518083038186803b15801561114d57600080fd5b505afa158015611161573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111859190612e28565b50505050505050509050600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156111dd57600080fd5b505afa1580156111f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112159190612cd0565b6001600160a01b0316336001600160a01b0316148061125457506001600160a01b03841660009081526004602052604090205460ff1680156112545750805b6112705760405162461bcd60e51b81526004016101aa90612ced565b611301848484600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112c457600080fd5b505afa1580156112d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fc9190612d65565b611b7d565b50505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561135557600080fd5b505afa158015611369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138d9190612cd0565b6001600160a01b0316336001600160a01b0316146113bd5760405162461bcd60e51b81526004016101aa90612ced565b6110fe838383600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561141157600080fd5b505afa158015611425573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114499190612d65565b611f0f565b606060038054806020026020016040519081016040528092919081815260200182805480156114a657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611488575b5050505050905090565b6060806000600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561150357600080fd5b505afa158015611517573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153b9190612d65565b600354909150806001600160401b0381111561155957611559612a1b565b604051908082528060200260200182016040528015611582578160200160208202803683370190505b50925060005b818110156115f0576115c1600382815481106115a6576115a6612d7e565b6000918252602090912001546001600160a01b031684612090565b8482815181106115d3576115d3612d7e565b6020908102919091010152806115e881612daa565b915050611588565b50600380548060200260200160405190810160405280929190818152602001828054801561164757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611629575b5050505050935050509091565b600260015414156116a75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016101aa565b6002600181905554604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156116f157600080fd5b505afa158015611705573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117299190612d65565b6002546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061175f9086906004016128e5565b60206040518083038186803b15801561177757600080fd5b505afa15801561178b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117af9190612d65565b60035490915060005b8181101561191b576000600382815481106117d5576117d5612d7e565b6000918252602090912001546001600160a01b031690506117f881878787611ad4565b6001600160a01b038082166000908152600b60209081526040808320938a168352929052205480158015906118a857506040516370a0823160e01b81526001600160a01b038316906370a08231906118549030906004016128e5565b60206040518083038186803b15801561186c57600080fd5b505afa158015611880573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a49190612d65565b8111155b15611906576118b882888361215b565b816001600160a01b0316876001600160a01b03167f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e836040516118fd91815260200190565b60405180910390a35b5050808061191390612daa565b9150506117b8565b505060018055505050565b6001600160a01b038085166000908152600a60209081526040808320938716835292905290812054819061195a8786612090565b6119649190612e98565b90506000670de0b6b3a764000061197b8386612dc5565b6119859190612eaf565b6001600160a01b038089166000908152600b60209081526040808320938b16835292905220549091506119b9908290612ed1565b979650505050505050565b600080836001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0057600080fd5b505afa925050508015611a30575060408051601f3d908101601f19168201909252611a2d91810190612d65565b60015b611aac57836001600160a01b0316633d68175c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a6d57600080fd5b505afa158015611a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa59190612d65565b9050611aaf565b90505b670de0b6b3a7640000611ac28483612dc5565b611acc9190612eaf565b949350505050565b6000611ae08584612090565b6001600160a01b03861660009081526009602052604090208190559050611b0685610b8d565b6001600160a01b03808716600090815260086020526040902091909155841615610b8657611b3685858585611926565b6001600160a01b038087166000818152600b60209081526040808320948a1680845294825280832095909555918152600a8252838120928152919052208190555050505050565b6001600160a01b038416611bcc5760405162461bcd60e51b815260206004820152601660248201527534b731b7b93932b1ba16b932bbb0b93216ba37b5b2b760511b60448201526064016101aa565b82611c135760405162461bcd60e51b81526020600482015260176024820152761a5b98dbdc9c9958dd0b5c995dd85c990b585b5bdd5b9d604a1b60448201526064016101aa565b81611c5c5760405162461bcd60e51b815260206004820152601960248201527834b731b7b93932b1ba16b932bbb0b93216b23ab930ba34b7b760391b60448201526064016101aa565b6001600160a01b03841660009081526004602052604090205460ff16611cbb5760405162461bcd60e51b815260206004820152601460248201527334b73b30b634b216b932bbb0b93216ba37b5b2b760611b60448201526064016101aa565b611cc58482612090565b6001600160a01b0385166000908152600960209081526040808320939093556005905220544210611d1857611cfa8284612eaf565b6001600160a01b038516600090815260066020526040902055611d96565b6001600160a01b038416600090815260056020526040812054611d3c904290612e98565b6001600160a01b03861660009081526006602052604081205491925090611d639083612dc5565b905083611d708287612ed1565b611d7a9190612eaf565b6001600160a01b03871660009081526006602052604090205550505b6040516370a0823160e01b81526000906001600160a01b038616906370a0823190611dc59030906004016128e5565b60206040518083038186803b158015611ddd57600080fd5b505afa158015611df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e159190612d65565b9050611e218382612eaf565b6001600160a01b0386166000908152600660205260409020541115611e7b5760405162461bcd60e51b815260206004820152601060248201526f0e4caeec2e4c8e65ae8dede5ad0d2ced60831b60448201526064016101aa565b6001600160a01b0385166000908152600760209081526040808320869055600890915290204290819055611eb0908490612ed1565b6001600160a01b03861660008181526005602090815260409182902093909355805187815292830186905290917f6a6f77044107a33658235d41bedbbaf2fe9ccdceb313143c947a5e76e1ec8474910160405180910390a25050505050565b83518351835182611f325760405162461bcd60e51b81526004016101aa90612de4565b81611f785760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d7265776172642d616d6f756e747360501b60448201526064016101aa565b80611fc05760405162461bcd60e51b8152602060048201526018602482015277696e76616c69642d7265776172642d6475726174696f6e7360401b60448201526064016101aa565b8183148015611fce57508083145b6120125760405162461bcd60e51b81526020600482015260156024820152740c2e4e4c2f25ad8cadccee8d05adad2e6dac2e8c6d605b1b60448201526064016101aa565b60005b838110156120865761207488828151811061203257612032612d7e565b602002602001015188838151811061204c5761204c612d7e565b602002602001015188848151811061206657612066612d7e565b602002602001015188611b7d565b8061207e81612daa565b915050612015565b5050505050505050565b6000816120b657506001600160a01b038216600090815260096020526040902054610bcc565b6001600160a01b0383166000908152600860205260408120546120d885610b8d565b6120e29190612e98565b6001600160a01b038516600090815260066020526040812054919250906121099083612dc5565b905060008461212083670de0b6b3a7640000612dc5565b61212a9190612eaf565b6001600160a01b038716600090815260096020526040902054909150612151908290612ed1565b9695505050505050565b600c546001600160a01b038481169116141561248357600061217d84836119c4565b90508015611301576001600160a01b038085166000818152600b6020908152604080832094881683529381528382208290558351637e062a3560e11b81529351919363fc0c546a9260048083019392829003018186803b1580156121e057600080fd5b505afa1580156121f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122189190612cd0565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161224891906128e5565b60206040518083038186803b15801561226057600080fd5b505afa158015612274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122989190612d65565b604051632e1a7d4d60e01b8152600481018690529091506001600160a01b03871690632e1a7d4d90602401600060405180830381600087803b1580156122dd57600080fd5b505af11580156122f1573d6000803e3d6000fd5b50505050600081836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161232491906128e5565b60206040518083038186803b15801561233c57600080fd5b505afa158015612350573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123749190612d65565b61237e9190612e98565b90506001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2141561241957604051632e1a7d4d60e01b81526004810182905273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290632e1a7d4d90602401600060405180830381600087803b1580156123f257600080fd5b505af1158015612406573d6000803e3d6000fd5b50505050612414868261248e565b61242d565b61242d6001600160a01b03841687836125a7565b826001600160a01b0316866001600160a01b03167ff9d22c8b8042556a691815c80c733b36d6636b695259c99ca391be302bcb6ef78360405161247291815260200190565b60405180910390a350505050505050565b6110fe8383836125f9565b804710156124de5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016101aa565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461252b576040519150601f19603f3d011682016040523d82523d6000602084013e612530565b606091505b50509050806110fe5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016101aa565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526110fe90849061262f565b6001600160a01b038084166000818152600b602090815260408083209487168352939052918220919091556110fe9083836125a7565b6000612684826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127019092919063ffffffff16565b8051909150156110fe57808060200190518101906126a29190612ee9565b6110fe5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101aa565b6060612710848460008561271a565b90505b9392505050565b60608247101561277b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101aa565b843b6127c95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101aa565b600080866001600160a01b031685876040516127e59190612f04565b60006040518083038185875af1925050503d8060008114612822576040519150601f19603f3d011682016040523d82523d6000602084013e612827565b606091505b50915091506119b982828660608315612841575081612713565b8251156128515782518084602001fd5b8160405162461bcd60e51b81526004016101aa9190612c9d565b8280548282559060005260206000209081019282156128c0579160200282015b828111156128c057825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061288b565b506128cc9291506128d0565b5090565b5b808211156128cc57600081556001016128d1565b6001600160a01b0391909116815260200190565b6001600160a01b038116811461290e57600080fd5b50565b60006020828403121561292357600080fd5b8135612713816128f9565b600081518084526020808501945080840160005b838110156129675781516001600160a01b031687529582019590820190600101612942565b509495945050505050565b604081526000612985604083018561292e565b82810360208481019190915284518083528582019282019060005b818110156129bc578451835293830193918301916001016129a0565b5090979650505050505050565b600080604083850312156129dc57600080fd5b82356129e7816128f9565b915060208301356129f7816128f9565b809150509250929050565b600060208284031215612a1457600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612a5957612a59612a1b565b604052919050565b60006001600160401b03821115612a7a57612a7a612a1b565b5060051b60200190565b600082601f830112612a9557600080fd5b81356020612aaa612aa583612a61565b612a31565b82815260059290921b84018101918181019086841115612ac957600080fd5b8286015b84811015612aed578035612ae0816128f9565b8352918301918301612acd565b509695505050505050565b60008060408385031215612b0b57600080fd5b8235612b16816128f9565b915060208301356001600160401b03811115612b3157600080fd5b612b3d85828601612a84565b9150509250929050565b600080600060608486031215612b5c57600080fd5b8335612b67816128f9565b95602085013595506040909401359392505050565b600082601f830112612b8d57600080fd5b81356020612b9d612aa583612a61565b82815260059290921b84018101918181019086841115612bbc57600080fd5b8286015b84811015612aed5780358352918301918301612bc0565b600080600060608486031215612bec57600080fd5b83356001600160401b0380821115612c0357600080fd5b612c0f87838801612a84565b94506020860135915080821115612c2557600080fd5b612c3187838801612b7c565b93506040860135915080821115612c4757600080fd5b50612c5486828701612b7c565b9150509250925092565b602081526000612713602083018461292e565b60005b83811015612c8c578181015183820152602001612c74565b838111156113015750506000910152565b6020815260008251806020840152612cbc816040850160208701612c71565b601f01601f19169190910160400192915050565b600060208284031215612ce257600080fd5b8151612713816128f9565b6020808252600e908201526d1b9bdd0b585d5d1a1bdc9a5e995960921b604082015260600190565b6020808252825482820181905260008481528281209092916040850190845b81811015612d595783546001600160a01b031683526001938401939285019201612d34565b50909695505050505050565b600060208284031215612d7757600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612dbe57612dbe612d94565b5060010190565b6000816000190483118215151615612ddf57612ddf612d94565b500290565b602080825260159082015274696e76616c69642d7265776172642d746f6b656e7360581b604082015260600190565b80518015158114612e2357600080fd5b919050565b60008060008060008060008060006101208a8c031215612e4757600080fd5b612e508a612e13565b985060208a0151975060408a0151965060608a0151955060808a0151945060a08a0151935060c08a0151925060e08a015191506101008a015190509295985092959850929598565b600082821015612eaa57612eaa612d94565b500390565b600082612ecc57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115612ee457612ee4612d94565b500190565b600060208284031215612efb57600080fd5b61271382612e13565b60008251612f16818460208701612c71565b919091019291505056fea26469706673582212200d0daecdc7c59a6d66f08ab13b490f5a64311c29c6c3887092691225139782e764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimReward(address)": {
        "details": "This function will claim rewards for all tokens being rewarded"
      },
      "claimable(address)": {
        "details": "In case of growToken it will return the actual underlying value",
        "returns": {
          "_claimableAmounts": "Array of claimable for token on same index in rewardTokens",
          "_rewardTokens": "Array of tokens being rewarded"
        }
      },
      "initialize(address,address[])": {
        "details": "Called by proxy to initialize this contract",
        "params": {
          "_pool": "Vesper pool address",
          "_rewardTokens": "Array of reward token addresses"
        }
      },
      "notifyRewardAmount(address,uint256,uint256)": {
        "details": "Notify that reward is added. Also updates reward rate and reward earning period."
      },
      "notifyRewardAmount(address[],uint256[],uint256[])": {
        "details": "Also updates reward rate and reward earning period.",
        "params": {
          "_rewardAmounts": "Rewards amount for token on same index in rewardTokens array",
          "_rewardDurations": "Duration for which reward will be distributed",
          "_rewardTokens": "Tokens being rewarded"
        }
      },
      "rewardPerToken()": {
        "returns": {
          "_rewardPerTokenRate": "Array of Rewards rate for token on same index in rewardTokens",
          "_rewardTokens": "Array of tokens being rewarded"
        }
      },
      "updateGrowToken(address)": {
        "details": "growToken is used to check whether to call withdraw from Grow Pool or not"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "RewardAdded(address,uint256,uint256)": {
        "notice": "Emitted after reward added"
      },
      "RewardPaid(address,address,uint256)": {
        "notice": "Emitted whenever any user claim rewards"
      },
      "RewardTokenAdded(address,address[])": {
        "notice": "Emitted after adding new rewards token into rewardTokens array"
      }
    },
    "kind": "user",
    "methods": {
      "addRewardToken(address)": {
        "notice": "Add new reward token in existing rewardsToken array"
      },
      "claimReward(address)": {
        "notice": "Claim earned rewards."
      },
      "claimable(address)": {
        "notice": "Returns claimable reward amount."
      },
      "getRewardTokens()": {
        "notice": "Provides easy access to all rewardTokens"
      },
      "isRewardToken(address)": {
        "notice": "Reward token to valid/invalid flag mapping"
      },
      "lastTimeRewardApplicable(address)": {
        "notice": "Returns timestamp of last reward update"
      },
      "lastUpdateTime(address)": {
        "notice": "Reward token to Last reward drip update time stamp mapping"
      },
      "notifyRewardAmount(address[],uint256[],uint256[])": {
        "notice": "Notify that reward is added. Only authorized caller can call"
      },
      "periodFinish(address)": {
        "notice": "Reward token to period ending of current reward"
      },
      "pool()": {
        "notice": "Vesper pool address"
      },
      "rewardDuration(address)": {
        "notice": "Reward token to Duration of current reward distribution"
      },
      "rewardPerToken()": {
        "notice": "Rewards rate per pool token"
      },
      "rewardPerTokenStored(address)": {
        "notice": "Reward token to Reward per token mapping. Calculated and stored at last drip update"
      },
      "rewardRates(address)": {
        "notice": "Reward token to current reward rate mapping"
      },
      "rewardTokens(uint256)": {
        "notice": "Array of reward token addresses"
      },
      "rewards(address,address)": {
        "notice": "RewardToken => User => Rewards earned till last reward update"
      },
      "updateGrowToken(address)": {
        "notice": "Defines which rewardToken is a growToken"
      },
      "updateReward(address)": {
        "notice": "Updated reward for given account."
      },
      "userRewardPerTokenPaid(address,address)": {
        "notice": "Reward token => User => Reward per token stored at last reward update"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2095,
        "contract": "contracts/pool/earn/VesperEarnDrip.sol:VesperEarnDrip",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2098,
        "contract": "contracts/pool/earn/VesperEarnDrip.sol:VesperEarnDrip",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2146,
        "contract": "contracts/pool/earn/VesperEarnDrip.sol:VesperEarnDrip",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10127,
        "contract": "contracts/pool/earn/VesperEarnDrip.sol:VesperEarnDrip",
        "label": "pool",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10131,
        "contract": "contracts/pool/earn/VesperEarnDrip.sol:VesperEarnDrip",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 10136,
        "contract": "contracts/pool/earn/VesperEarnDrip.sol:VesperEarnDrip",
        "label": "isRewardToken",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10141,
        "contract": "contracts/pool/earn/VesperEarnDrip.sol:VesperEarnDrip",
        "label": "periodFinish",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10146,
        "contract": "contracts/pool/earn/VesperEarnDrip.sol:VesperEarnDrip",
        "label": "rewardRates",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10151,
        "contract": "contracts/pool/earn/VesperEarnDrip.sol:VesperEarnDrip",
        "label": "rewardDuration",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10156,
        "contract": "contracts/pool/earn/VesperEarnDrip.sol:VesperEarnDrip",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10161,
        "contract": "contracts/pool/earn/VesperEarnDrip.sol:VesperEarnDrip",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10168,
        "contract": "contracts/pool/earn/VesperEarnDrip.sol:VesperEarnDrip",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 10175,
        "contract": "contracts/pool/earn/VesperEarnDrip.sol:VesperEarnDrip",
        "label": "rewards",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 13199,
        "contract": "contracts/pool/earn/VesperEarnDrip.sol:VesperEarnDrip",
        "label": "growToken",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}