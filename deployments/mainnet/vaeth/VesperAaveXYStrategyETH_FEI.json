{
  "address": "0xA14D4c41b989DC4Ae20150AA2Ec7A6C6B5622406",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiptToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrowToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vspAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMinBorrowLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinBorrowLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMaxBorrowLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxBorrowLimit",
          "type": "uint256"
        }
      ],
      "name": "UpdatedBorrowLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRouterIdx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "UpdatedOracleConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousSwapManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSwapManager",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSwapSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "UpdatedSwapSlippage",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AAVE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveIncentivesController",
      "outputs": [
        {
          "internalType": "contract AaveIncentivesController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveLendingPool",
      "outputs": [
        {
          "internalType": "contract AaveLendingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveProtocolDataProvider",
      "outputs": [
        {
          "internalType": "contract AaveProtocolDataProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canStartCooldown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canUnstake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cooldownData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_cooldownStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cooldownEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unstakeEnd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLossMaking",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oraclePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleRouterIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setupOracles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stkAAVE",
      "outputs": [
        {
          "internalType": "contract StakedAave",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapManager",
      "outputs": [
        {
          "internalType": "contract ISwapManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValueCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minBorrowLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBorrowLimit",
          "type": "uint256"
        }
      ],
      "name": "updateBorrowLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "updateOracleConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "name": "updateSwapManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "updateSwapSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vdToken",
      "outputs": [
        {
          "internalType": "contract AToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vsp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x66fa2a5ea3a88b68d7b38cc52efe7d70f530908a39e327d6a48189d44fdca899",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0xA14D4c41b989DC4Ae20150AA2Ec7A6C6B5622406",
    "transactionIndex": 25,
    "gasUsed": "5549731",
    "logsBloom": "0x
    "blockHash": "0xf039a8ec015576e70ea2af82090dc2eac8d221ff498ee63e30de5653b8a74305",
    "transactionHash": "0x66fa2a5ea3a88b68d7b38cc52efe7d70f530908a39e327d6a48189d44fdca899",
    "logs": [],
    "blockNumber": 14883165,
    "cumulativeGasUsed": "8406174",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd1C117319B3595fbc39b471AB1fd485629eb05F2",
    "0xe382d9f2394A359B01006faa8A1864b8a60d2710",
    "0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9",
    "0x030bA81f1c18d280636F32af80b9AAd02Cf0854e",
    "0x956F47F50A910163D8BF957Cf5846D573E7f87CA",
    "0x2B6c40Ef15Db0D78D08A7D1b4E12d57E88a3e324",
    "0x1b40183EFB4Dd766f11bDa7A7c3AD8982e998421",
    "VesperAaveXYStrategyETH_FEI"
  ],
  "numDeployments": 1,
  "solcInputHash": "0c127abe11d6bc13fb99083a5f2331b8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiptToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vspAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMinBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMaxBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBorrowLimit\",\"type\":\"uint256\"}],\"name\":\"UpdatedBorrowLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRouterIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"UpdatedOracleConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"UpdatedSwapManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdatedSwapSlippage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AAVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveIncentivesController\",\"outputs\":[{\"internalType\":\"contract AaveIncentivesController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveLendingPool\",\"outputs\":[{\"internalType\":\"contract AaveLendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveProtocolDataProvider\",\"outputs\":[{\"internalType\":\"contract AaveProtocolDataProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canStartCooldown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canUnstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_cooldownStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cooldownEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unstakeEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLossMaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRouterIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stkAAVE\",\"outputs\":[{\"internalType\":\"contract StakedAave\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBorrowLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBorrowLimit\",\"type\":\"uint256\"}],\"name\":\"updateBorrowLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"updateOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"updateSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vdToken\",\"outputs\":[{\"internalType\":\"contract AToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vsp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken()\":{\"details\":\"Approve all required tokens\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"details\":\"Rebalance profit, loss and investment of this strategy\"},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"sweepERC20(address)\":{\"details\":\"sweep given token to feeCollector of strategy\",\"params\":{\"_fromToken\":\"token address to sweep\"}},\"totalValueCurrent()\":{\"details\":\"Report total value in collateral token\"},\"updateBorrowLimit(uint256,uint256)\":{\"details\":\"It is possible to set _maxBorrowLimit and _minBorrowLimit as 0 to not borrow anything\",\"params\":{\"_maxBorrowLimit\":\"It is % of actual collateral factor of protocol\",\"_minBorrowLimit\":\"It is % of actual collateral factor of protocol\"}},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapManager(address)\":{\"params\":{\"_swapManager\":\"swap manager address\"}},\"withdraw(uint256)\":{\"details\":\"Withdraw collateral token from lending pool.\",\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"title\":\"Deposit Collateral in Aave and earn interest by depositing borrowed token in a Vesper Pool.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"canStartCooldown()\":{\"notice\":\"Returns true if we should start cooldown\"},\"canUnstake()\":{\"notice\":\"Returns true if Aave can be unstaked\"},\"cooldownData()\":{\"notice\":\"Return cooldown related timestamps\"},\"isLossMaking()\":{\"notice\":\"Calculate current position using claimed rewardToken and current borrow.\"},\"isReservedToken(address)\":{\"notice\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"token()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"totalValue()\":{\"notice\":\"Calculate total value using rewardToken accrued, supply and borrow position\"},\"totalValueCurrent()\":{\"notice\":\"Calculate total value of asset under management (in real-time)\"},\"updateBorrowLimit(uint256,uint256)\":{\"notice\":\"Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapManager(address)\":{\"notice\":\"Update swap manager address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/aave/VesperAaveXYStrategy.sol\":\"VesperAaveXYStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/// @title Errors library\\nlibrary Errors {\\n    string public constant INVALID_COLLATERAL_AMOUNT = \\\"1\\\"; // Collateral must be greater than 0 or > defined limit\\n    string public constant INVALID_SHARE_AMOUNT = \\\"2\\\"; // Share must be greater than 0\\n    string public constant INVALID_INPUT_LENGTH = \\\"3\\\"; // Input array length must be greater than 0\\n    string public constant INPUT_LENGTH_MISMATCH = \\\"4\\\"; // Input array length mismatch with another array length\\n    string public constant NOT_WHITELISTED_ADDRESS = \\\"5\\\"; // Caller is not whitelisted to withdraw without fee\\n    string public constant MULTI_TRANSFER_FAILED = \\\"6\\\"; // Multi transfer of tokens has failed\\n    string public constant FEE_COLLECTOR_NOT_SET = \\\"7\\\"; // Fee Collector is not set\\n    string public constant NOT_ALLOWED_TO_SWEEP = \\\"8\\\"; // Token is not allowed to sweep\\n    string public constant INSUFFICIENT_BALANCE = \\\"9\\\"; // Insufficient balance to performs operations to follow\\n    string public constant INPUT_ADDRESS_IS_ZERO = \\\"10\\\"; // Input address is zero\\n    string public constant FEE_LIMIT_REACHED = \\\"11\\\"; // Fee must be less than MAX_BPS\\n    string public constant ALREADY_INITIALIZED = \\\"12\\\"; // Data structure, contract, or logic already initialized and can not be called again\\n    string public constant ADD_IN_LIST_FAILED = \\\"13\\\"; // Cannot add address in address list\\n    string public constant REMOVE_FROM_LIST_FAILED = \\\"14\\\"; // Cannot remove address from address list\\n    string public constant STRATEGY_IS_ACTIVE = \\\"15\\\"; // Strategy is already active, an inactive strategy is required\\n    string public constant STRATEGY_IS_NOT_ACTIVE = \\\"16\\\"; // Strategy is not active, an active strategy is required\\n    string public constant INVALID_STRATEGY = \\\"17\\\"; // Given strategy is not a strategy of this pool\\n    string public constant DEBT_RATIO_LIMIT_REACHED = \\\"18\\\"; // Debt ratio limit reached. It must be less than MAX_BPS\\n    string public constant TOTAL_DEBT_IS_NOT_ZERO = \\\"19\\\"; // Strategy total debt must be 0\\n    string public constant LOSS_TOO_HIGH = \\\"20\\\"; // Strategy reported loss must be less than current debt\\n    string public constant INVALID_MAX_BORROW_LIMIT = \\\"21\\\"; // Max borrow limit is beyond range.\\n    string public constant MAX_LIMIT_LESS_THAN_MIN = \\\"22\\\"; // Max limit should be greater than min limit.\\n    string public constant INVALID_SLIPPAGE = \\\"23\\\"; // Slippage should be less than MAX_BPS\\n    string public constant WRONG_RECEIPT_TOKEN = \\\"24\\\"; // Wrong receipt token address\\n    string public constant AAVE_FLASH_LOAN_NOT_ACTIVE = \\\"25\\\"; // aave flash loan is not active\\n    string public constant DYDX_FLASH_LOAN_NOT_ACTIVE = \\\"26\\\"; // DYDX flash loan is not active\\n    string public constant INVALID_FLASH_LOAN = \\\"27\\\"; // invalid-flash-loan\\n    string public constant INVALID_INITIATOR = \\\"28\\\"; // \\\"invalid-initiator\\\"\\n    string public constant INCORRECT_WITHDRAW_AMOUNT = \\\"29\\\"; // withdrawn amount is not correct\\n    string public constant NO_MARKET_ID_FOUND = \\\"30\\\"; // dydx flash loan no marketId found for token\\n    string public constant SAME_AS_PREVIOUS = \\\"31\\\"; // Input should not be same as previous value.\\n    string public constant INVALID_INPUT = \\\"32\\\"; // Generic invalid input error code\\n}\\n\",\"keccak256\":\"0x96be83cb172a1efef0ff9771392f0b1d192a680fb2b36b061efbd49177afb947\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1477864def7febd9826918e50482a1ee7068b337b03804a7e0e98c674ac57c2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/interfaces/aave/IAave.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface AaveLendingPoolAddressesProvider {\\n    function getLendingPool() external view returns (address);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function getPriceOracle() external view returns (address);\\n}\\n\\ninterface AaveOracle {\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n}\\n\\ninterface AToken is IERC20 {\\n    /**\\n     * @dev Returns the address of the incentives controller contract\\n     **/\\n    function getIncentivesController() external view returns (address);\\n\\n    function mint(\\n        address user,\\n        uint256 amount,\\n        uint256 index\\n    ) external returns (bool);\\n\\n    function burn(\\n        address user,\\n        address receiverOfUnderlying,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n}\\n\\ninterface AaveIncentivesController {\\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n}\\n\\ninterface AaveLendingPool {\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) external;\\n\\n    function getUserAccountData(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n}\\n\\ninterface AaveProtocolDataProvider {\\n    function getReserveTokensAddresses(address asset)\\n        external\\n        view\\n        returns (\\n            address aTokenAddress,\\n            address stableDebtTokenAddress,\\n            address variableDebtTokenAddress\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n\\n    function getReserveConfigurationData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n}\\n\\n//solhint-disable func-name-mixedcase\\ninterface StakedAave is IERC20 {\\n    function claimRewards(address to, uint256 amount) external;\\n\\n    function cooldown() external;\\n\\n    function stake(address onBehalfOf, uint256 amount) external;\\n\\n    function redeem(address to, uint256 amount) external;\\n\\n    function getTotalRewardsBalance(address staker) external view returns (uint256);\\n\\n    function stakersCooldowns(address staker) external view returns (uint256);\\n\\n    function COOLDOWN_SECONDS() external view returns (uint256);\\n\\n    function UNSTAKE_WINDOW() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9f77c277406099a595959b9eb377e15278d68e58629cd954ef34cc0e341d6566\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/* solhint-disable func-name-mixedcase */\\n// Partial interface of IUniswapV2Router02\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\\ninterface ISwapManager {\\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\\n\\n    function N_DEX() external view returns (uint256);\\n\\n    function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\\n\\n    function bestOutputFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountOut,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function bestInputFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountIn,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function safeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function safeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function comparePathsFixedInput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function comparePathsFixedOutput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function oracleCount() external view returns (uint256);\\n\\n    function oracleAt(uint256 idx) external view returns (address);\\n\\n    function getOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function createOrUpdateOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external returns (address oracleAddr);\\n\\n    function consultForFree(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\\n\\n    /// get the data we want and pay the gas to update\\n    function consult(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    )\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint256 lastUpdatedAt,\\n            bool updated\\n        );\\n\\n    function updateOracles() external returns (uint256 updated, uint256 expected);\\n\\n    function updateOracles(address[] memory _oracleAddrs) external returns (uint256 updated, uint256 expected);\\n}\\n\",\"keccak256\":\"0x32466e3712b63a6e5112a1c44057d83d5e53f9f8369fd4e4f8d53a50baed8e4d\",\"license\":\"MIT\"},\"contracts/interfaces/oracle/IUniswapV3Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n// Interface to use 3rd party Uniswap V3 oracle utility contract deployed at https://etherscan.io/address/0x0f1f5a87f99f0918e6c81f16e59f3518698221ff#code\\n\\n/// @title UniswapV3 oracle with ability to query across an intermediate liquidity pool\\ninterface IUniswapV3Oracle {\\n    function assetToEth(\\n        address _tokenIn,\\n        uint256 _amountIn,\\n        uint32 _twapPeriod\\n    ) external view returns (uint256 ethAmountOut);\\n\\n    function ethToAsset(\\n        uint256 _ethAmountIn,\\n        address _tokenOut,\\n        uint32 _twapPeriod\\n    ) external view returns (uint256 amountOut);\\n\\n    function assetToAsset(\\n        address _tokenIn,\\n        uint256 _amountIn,\\n        address _tokenOut,\\n        uint32 _twapPeriod\\n    ) external view returns (uint256 amountOut);\\n\\n    function assetToAssetThruRoute(\\n        address _tokenIn,\\n        uint256 _amountIn,\\n        address _tokenOut,\\n        uint32 _twapPeriod,\\n        address _routeThruToken,\\n        uint24[2] memory _poolFees\\n    ) external view returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x98df00f48e9de570c305758b8b6ca860d526b98c7544b23b57ed42650b55d7e4\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Pausable interface\\n */\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function shutdown() external;\\n\\n    function open() external;\\n}\\n\",\"keccak256\":\"0x22ea4d5c268f55d0839ec0140fef79a8849508c33106c63e57e967e301bf4f68\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IPoolRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPoolRewards {\\n    /// Emitted after reward added\\n    event RewardAdded(address indexed rewardToken, uint256 reward, uint256 rewardDuration);\\n    /// Emitted whenever any user claim rewards\\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\\n    /// Emitted after adding new rewards token into rewardTokens array\\n    event RewardTokenAdded(address indexed rewardToken, address[] existingRewardTokens);\\n\\n    function claimReward(address) external;\\n\\n    function notifyRewardAmount(\\n        address _rewardToken,\\n        uint256 _rewardAmount,\\n        uint256 _rewardDuration\\n    ) external;\\n\\n    function notifyRewardAmount(\\n        address[] memory _rewardTokens,\\n        uint256[] memory _rewardAmounts,\\n        uint256[] memory _rewardDurations\\n    ) external;\\n\\n    function updateReward(address) external;\\n\\n    function claimable(address _account)\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts);\\n\\n    function lastTimeRewardApplicable(address _rewardToken) external view returns (uint256);\\n\\n    function rewardForDuration()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration);\\n\\n    function rewardPerToken()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate);\\n}\\n\",\"keccak256\":\"0x44ded14cb0ced3f4f72286454c8f950480731f2b46d275b49172fc17ad9ad3c4\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStrategy {\\n    function rebalance() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalValueCurrent() external returns (uint256);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x45b007a39e3361fcc148692762735cb11489305b8016c1b9e05d79fbb5c9bc60\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\n\\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\\n    function calculateUniversalFee(uint256 _profit) external view returns (uint256 _fee);\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function poolRewards() external view returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address _address) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address _address) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa0912bb18aaa205e2ea7e59247f3b4cd863ccd33c25ed9459bdcc1635d15b833\",\"license\":\"MIT\"},\"contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/bloq/ISwapManager.sol\\\";\\nimport \\\"../interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    // solhint-disable-next-line  var-name-mixedcase\\n    address internal WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    ISwapManager public swapManager;\\n\\n    uint256 public oraclePeriod = 3600; // 1h\\n    uint256 public oracleRouterIdx = 0; // Uniswap V2\\n    uint256 public swapSlippage = 10000; // 100% Don't use oracles by default\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\\n    event UpdatedSwapSlippage(uint256 oldSwapSlippage, uint256 newSwapSlippage);\\n    event UpdatedOracleConfig(uint256 oldPeriod, uint256 newPeriod, uint256 oldRouterIdx, uint256 newRouterIdx);\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken\\n    ) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        swapManager = ISwapManager(_swapManager);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swap manager address\\n     * @param _swapManager swap manager address\\n     */\\n    function updateSwapManager(address _swapManager) external onlyGovernor {\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        require(_swapManager != address(swapManager), \\\"sm-is-same\\\");\\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\\n        swapManager = ISwapManager(_swapManager);\\n    }\\n\\n    function updateSwapSlippage(uint256 _newSwapSlippage) external onlyGovernor {\\n        require(_newSwapSlippage <= 10000, \\\"invalid-slippage-value\\\");\\n        emit UpdatedSwapSlippage(swapSlippage, _newSwapSlippage);\\n        swapSlippage = _newSwapSlippage;\\n    }\\n\\n    function updateOracleConfig(uint256 _newPeriod, uint256 _newRouterIdx) external onlyGovernor {\\n        require(_newRouterIdx < swapManager.N_DEX(), \\\"invalid-router-index\\\");\\n        if (_newPeriod == 0) _newPeriod = oraclePeriod;\\n        require(_newPeriod > 59, \\\"invalid-oracle-period\\\");\\n        emit UpdatedOracleConfig(oraclePeriod, _newPeriod, oracleRouterIdx, _newRouterIdx);\\n        oraclePeriod = _newPeriod;\\n        oracleRouterIdx = _newRouterIdx;\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken() external onlyKeeper {\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    function setupOracles() external onlyKeeper {\\n        _setupOracles();\\n    }\\n\\n    /**\\n     * @dev Withdraw collateral token from lending pool.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        _withdraw(_amount);\\n    }\\n\\n    /**\\n     * @dev Rebalance profit, loss and investment of this strategy\\n     */\\n    function rebalance() external virtual override onlyKeeper {\\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _reinvest();\\n    }\\n\\n    /**\\n     * @dev sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /**\\n     * @notice Calculate total value of asset under management\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view virtual override returns (uint256 _value);\\n\\n    /**\\n     * @notice Calculate total value of asset under management (in real-time)\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValueCurrent() external virtual override returns (uint256) {\\n        return totalValue();\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /**\\n     * @notice some strategy may want to prepare before doing migration.\\n        Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    /**\\n     *  @notice Generate report for current profit and loss. Also liquidate asset to payback\\n     * excess debt, if any.\\n     * @return _profit Calculate any realized profit and convert it to collateral, if not already.\\n     * @return _loss Calculate any loss that strategy has made on investment. Convert into collateral token.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function _generateReport()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n        _profit = _realizeProfit(_totalDebt);\\n        _loss = _realizeLoss(_totalDebt);\\n        _payback = _liquidate(_excessDebt);\\n    }\\n\\n    function _calcAmtOutAfterSlippage(uint256 _amount, uint256 _slippage) internal pure returns (uint256) {\\n        return (_amount * (10000 - _slippage)) / (10000);\\n    }\\n\\n    function _simpleOraclePath(address _from, address _to) internal view returns (address[] memory path) {\\n        if (_from == WETH || _to == WETH) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = WETH;\\n            path[2] = _to;\\n        }\\n    }\\n\\n    function _consultOracle(\\n        address _from,\\n        address _to,\\n        uint256 _amt\\n    ) internal returns (uint256, bool) {\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            (bool _success, bytes memory _returnData) =\\n                // solhint-disable-next-line avoid-low-level-calls\\n                address(swapManager).call(\\n                    abi.encodePacked(swapManager.consult.selector, abi.encode(_from, _to, _amt, oraclePeriod, i))\\n                );\\n            if (_success) {\\n                (uint256 rate, uint256 lastUpdate, ) = abi.decode(_returnData, (uint256, uint256, bool));\\n                if ((lastUpdate > (block.timestamp - oraclePeriod)) && (rate != 0)) return (rate, true);\\n                return (0, false);\\n            }\\n        }\\n        return (0, false);\\n    }\\n\\n    function _getOracleRate(address[] memory path, uint256 _amountIn) internal returns (uint256 amountOut) {\\n        require(path.length > 1, \\\"invalid-oracle-path\\\");\\n        amountOut = _amountIn;\\n        bool isValid;\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            (amountOut, isValid) = _consultOracle(path[i], path[i + 1], amountOut);\\n            require(isValid, \\\"invalid-oracle-rate\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe swap via Uniswap / Sushiswap (better rate of the two)\\n     * @dev There are many scenarios when token swap via Uniswap can fail, so this\\n     * method will wrap Uniswap call in a 'try catch' to make it fail safe.\\n     * however, this method will throw minAmountOut is not met\\n     * @param _from address of from token\\n     * @param _to address of to token\\n     * @param _amountIn Amount to be swapped\\n     * @param _minAmountOut minimum amount out\\n     */\\n    function _safeSwap(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) internal {\\n        if (_from == _to) {\\n            return;\\n        }\\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\\n            swapManager.bestOutputFixedInput(_from, _to, _amountIn);\\n        if (_minAmountOut == 0) _minAmountOut = 1;\\n        if (amountOut != 0) {\\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\\n                _amountIn,\\n                _minAmountOut,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    // These methods can be implemented by the inheriting strategy.\\n    /* solhint-disable no-empty-blocks */\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual {}\\n\\n    /**\\n     * @notice Set up any oracles that are needed for this strategy.\\n     */\\n    function _setupOracles() internal virtual {}\\n\\n    /* solhint-enable */\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdraw(uint256 _amount) internal virtual;\\n\\n    function _approveToken(uint256 _amount) internal virtual;\\n\\n    /**\\n     * @notice Withdraw collateral to payback excess debt in pool.\\n     * @param _excessDebt Excess debt of strategy in collateral token\\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\\n     */\\n    function _liquidate(uint256 _excessDebt) internal virtual returns (uint256 _payback);\\n\\n    /**\\n     * @notice Calculate earning and withdraw/convert it into collateral token.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _profit Profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal virtual returns (uint256 _profit);\\n\\n    /**\\n     * @notice Calculate loss\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _loss Realized loss in collateral token\\n     */\\n    function _realizeLoss(uint256 _totalDebt) internal virtual returns (uint256 _loss);\\n\\n    /**\\n     * @notice Reinvest collateral.\\n     * @dev Once we file report back in pool, we might have some collateral in hand\\n     * which we want to reinvest aka deposit in lender/provider.\\n     */\\n    function _reinvest() internal virtual;\\n}\\n\",\"keccak256\":\"0xd92c6995ae60810833336e5ac17134ca5684d9fbb077e6b424ee1d2c66709c8a\",\"license\":\"MIT\"},\"contracts/strategies/aave/AaveCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../interfaces/aave/IAave.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../../Errors.sol\\\";\\n\\n/// @title This contract provide core operations for Aave\\nabstract contract AaveCore {\\n    //solhint-disable-next-line const-name-snakecase\\n    StakedAave public constant stkAAVE = StakedAave(0x4da27a545c0c5B758a6BA100e3a049001de870f5);\\n    address public constant AAVE = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\\n\\n    AaveLendingPool public immutable aaveLendingPool;\\n    AaveProtocolDataProvider public aaveProtocolDataProvider;\\n    AaveIncentivesController public immutable aaveIncentivesController;\\n    AaveLendingPoolAddressesProvider internal immutable aaveAddressesProvider_;\\n\\n    AToken internal immutable aToken;\\n    bytes32 private constant AAVE_PROVIDER_ID = 0x0100000000000000000000000000000000000000000000000000000000000000;\\n\\n    constructor(address _receiptToken) {\\n        require(_receiptToken != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\\n        aToken = AToken(_receiptToken);\\n        // If there is no AAVE incentive then below call will fail\\n        try AToken(_receiptToken).getIncentivesController() returns (address _aaveIncentivesController) {\\n            aaveIncentivesController = AaveIncentivesController(_aaveIncentivesController);\\n        } catch {} //solhint-disable no-empty-blocks\\n        aaveAddressesProvider_ = AaveLendingPoolAddressesProvider(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5);\\n        aaveLendingPool = AaveLendingPool(aaveAddressesProvider_.getLendingPool());\\n        aaveProtocolDataProvider = AaveProtocolDataProvider(aaveAddressesProvider_.getAddress(AAVE_PROVIDER_ID));\\n    }\\n\\n    ///////////////////////// External access functions /////////////////////////\\n\\n    /**\\n     * @notice Initiate cooldown to unstake aave.\\n     * @dev We only want to call this function when cooldown is expired and\\n     * that's the reason we have 'if' condition.\\n     * @dev Child contract should expose this function as external and onlyKeeper\\n     */\\n    function _startCooldown() internal returns (bool) {\\n        if (canStartCooldown()) {\\n            stkAAVE.cooldown();\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Unstake Aave from stakedAave contract\\n     * @dev We want to unstake as soon as favorable condition exit\\n     * @dev No guarding condition thus this call can fail, if we can't unstake.\\n     * @dev Child contract should expose this function as external and onlyKeeper\\n     */\\n    function _unstakeAave() internal {\\n        stkAAVE.redeem(address(this), type(uint256).max);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Returns true if Aave can be unstaked\\n    function canUnstake() external view returns (bool) {\\n        (, uint256 _cooldownEnd, uint256 _unstakeEnd) = cooldownData();\\n        return _canUnstake(_cooldownEnd, _unstakeEnd);\\n    }\\n\\n    /// @notice Returns true if we should start cooldown\\n    function canStartCooldown() public view returns (bool) {\\n        (uint256 _cooldownStart, , uint256 _unstakeEnd) = cooldownData();\\n        return _canStartCooldown(_cooldownStart, _unstakeEnd);\\n    }\\n\\n    /// @notice Return cooldown related timestamps\\n    function cooldownData()\\n        public\\n        view\\n        returns (\\n            uint256 _cooldownStart,\\n            uint256 _cooldownEnd,\\n            uint256 _unstakeEnd\\n        )\\n    {\\n        _cooldownStart = stkAAVE.stakersCooldowns(address(this));\\n        _cooldownEnd = _cooldownStart + stkAAVE.COOLDOWN_SECONDS();\\n        _unstakeEnd = _cooldownEnd + stkAAVE.UNSTAKE_WINDOW();\\n    }\\n\\n    /**\\n     * @notice Claim Aave. Also unstake all Aave if favorable condition exits or start cooldown.\\n     * @dev If we unstake all Aave, we can't start cooldown because it requires StakedAave balance.\\n     * @dev DO NOT convert 'if else' to 2 'if's as we are reading cooldown state once to save gas.\\n     * @dev Not all collateral token has aave incentive\\n     */\\n    function _claimAave() internal returns (uint256) {\\n        if (address(aaveIncentivesController) == address(0)) {\\n            return 0;\\n        }\\n        (uint256 _cooldownStart, uint256 _cooldownEnd, uint256 _unstakeEnd) = cooldownData();\\n        if (_cooldownStart == 0 || block.timestamp > _unstakeEnd) {\\n            // claim stkAave when its first rebalance or unstake period passed.\\n            aaveIncentivesController.claimRewards(getAssets(), type(uint256).max, address(this));\\n        }\\n        // Fetch and check again for next action.\\n        (_cooldownStart, _cooldownEnd, _unstakeEnd) = cooldownData();\\n        if (_canUnstake(_cooldownEnd, _unstakeEnd)) {\\n            stkAAVE.redeem(address(this), type(uint256).max);\\n        } else if (_canStartCooldown(_cooldownStart, _unstakeEnd)) {\\n            stkAAVE.cooldown();\\n        }\\n\\n        stkAAVE.claimRewards(address(this), type(uint256).max);\\n        return IERC20(AAVE).balanceOf(address(this));\\n    }\\n\\n    /// @notice Deposit asset into Aave\\n    function _deposit(address _asset, uint256 _amount) internal {\\n        if (_amount != 0) {\\n            aaveLendingPool.deposit(_asset, _amount, address(this), 0);\\n        }\\n    }\\n\\n    function getAssets() internal view returns (address[] memory) {\\n        address[] memory _assets = new address[](1);\\n        _assets[0] = address(aToken);\\n        return _assets;\\n    }\\n\\n    /**\\n     * @notice Safe withdraw will make sure to check asking amount against available amount.\\n     * @dev Check we have enough aToken and liquidity to support this withdraw\\n     * @param _asset Address of asset to withdraw\\n     * @param _to Address that will receive collateral token.\\n     * @param _amount Amount of collateral to withdraw.\\n     * @return Actual collateral withdrawn\\n     */\\n    function _safeWithdraw(\\n        address _asset,\\n        address _to,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\\n        // If Vesper becomes large liquidity provider in Aave(This happened in past in vUSDC 1.0)\\n        // In this case we might have more aToken compare to available liquidity in Aave and any\\n        // withdraw asking more than available liquidity will fail. To do safe withdraw, check\\n        // _amount against available liquidity.\\n        (uint256 _availableLiquidity, , , , , , , , , ) = aaveProtocolDataProvider.getReserveData(_asset);\\n        // Get minimum of _amount, _aTokenBalance and _availableLiquidity\\n        return _withdraw(_asset, _to, Math.min(_amount, Math.min(_aTokenBalance, _availableLiquidity)));\\n    }\\n\\n    /**\\n     * @notice Withdraw given amount of collateral from Aave to given address\\n     * @param _asset Address of asset to withdraw\\n     * @param _to Address that will receive collateral token.\\n     * @param _amount Amount of collateral to withdraw.\\n     * @return Actual collateral withdrawn\\n     */\\n    function _withdraw(\\n        address _asset,\\n        address _to,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        if (_amount != 0) {\\n            require(aaveLendingPool.withdraw(_asset, _amount, _to) == _amount, Errors.INCORRECT_WITHDRAW_AMOUNT);\\n        }\\n        return _amount;\\n    }\\n\\n    /**\\n     * @dev Return true, only if we have StakedAave balance and either cooldown expired or cooldown is zero\\n     * @dev If we are in cooldown period we cannot unstake Aave. But our cooldown is still valid so we do\\n     * not want to reset/start cooldown.\\n     */\\n    function _canStartCooldown(uint256 _cooldownStart, uint256 _unstakeEnd) internal view returns (bool) {\\n        return stkAAVE.balanceOf(address(this)) != 0 && (_cooldownStart == 0 || block.timestamp > _unstakeEnd);\\n    }\\n\\n    /// @dev Return true, if cooldown is over and we are in unstake window.\\n    function _canUnstake(uint256 _cooldownEnd, uint256 _unstakeEnd) internal view returns (bool) {\\n        return block.timestamp > _cooldownEnd && block.timestamp <= _unstakeEnd;\\n    }\\n\\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function _isReservedToken(address _token) internal view returns (bool) {\\n        return _token == address(aToken) || _token == AAVE || _token == address(stkAAVE);\\n    }\\n\\n    /**\\n     * @notice Return total AAVE incentive allocated to this address\\n     * @dev Aave and StakedAave are 1:1\\n     * @dev Not all collateral token has aave incentive\\n     */\\n    function _totalAave() internal view returns (uint256) {\\n        if (address(aaveIncentivesController) == address(0)) {\\n            return 0;\\n        }\\n        // TotalAave = Get current StakedAave rewards from controller +\\n        //             StakedAave balance here +\\n        //             Aave rewards by staking Aave in StakedAave contract\\n        return\\n            aaveIncentivesController.getRewardsBalance(getAssets(), address(this)) +\\n            stkAAVE.balanceOf(address(this)) +\\n            stkAAVE.getTotalRewardsBalance(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x74f785b338b49b236d1650a88f6b31927d917ff8a3777c7f16d6ba7579ff8b81\",\"license\":\"MIT\"},\"contracts/strategies/aave/AaveXYStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GNU LGPLv3\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../Strategy.sol\\\";\\nimport \\\"../../interfaces/aave/IAave.sol\\\";\\nimport \\\"../../interfaces/oracle/IUniswapV3Oracle.sol\\\";\\nimport \\\"./AaveCore.sol\\\";\\nimport \\\"../../interfaces/vesper/IPoolRewards.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n\\n/// @title Deposit Collateral in Aave and earn interest by depositing borrowed token in a Vesper Pool.\\ncontract AaveXYStrategy is Strategy, AaveCore {\\n    using SafeERC20 for IERC20;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    string public NAME;\\n    string public constant VERSION = \\\"4.0.0\\\";\\n\\n    uint256 internal constant MAX_BPS = 10_000; //100%\\n    uint256 public minBorrowLimit = 7_000; // 70% of actual collateral factor of protocol\\n    uint256 public maxBorrowLimit = 8_500; // 85% of actual collateral factor of protocol\\n\\n    IUniswapV3Oracle internal constant ORACLE = IUniswapV3Oracle(0x0F1f5A87f99f0918e6C81F16E59F3518698221Ff);\\n    uint32 internal constant TWAP_PERIOD = 3600;\\n    address public rewardToken;\\n    address public borrowToken;\\n    AToken public vdToken; // Variable Debt Token\\n\\n    event UpdatedBorrowLimit(\\n        uint256 previousMinBorrowLimit,\\n        uint256 newMinBorrowLimit,\\n        uint256 previousMaxBorrowLimit,\\n        uint256 newMaxBorrowLimit\\n    );\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _rewardToken,\\n        address _receiptToken,\\n        address _borrowToken,\\n        string memory _name\\n    ) Strategy(_pool, _swapManager, _receiptToken) AaveCore(_receiptToken) {\\n        NAME = _name;\\n        rewardToken = _rewardToken;\\n        (, , address _vdToken) = aaveProtocolDataProvider.getReserveTokensAddresses(_borrowToken);\\n        vdToken = AToken(_vdToken);\\n        borrowToken = _borrowToken;\\n    }\\n\\n    /**\\n     * @notice Calculate current position using claimed rewardToken and current borrow.\\n     */\\n    function isLossMaking() external view returns (bool) {\\n        // It's loss making if _totalValue < totalDebt\\n        return totalValue() < IVesperPool(pool).totalDebtOf(address(this));\\n    }\\n\\n    function isReservedToken(address _token) public view virtual override returns (bool) {\\n        return _isReservedToken(_token) || address(vdToken) == _token || borrowToken == _token;\\n    }\\n\\n    /**\\n     * @notice Calculate total value using rewardToken accrued, supply and borrow position\\n     */\\n    function totalValue() public view virtual override returns (uint256 _totalValue) {\\n        uint256 _aaveRewardAccrued = _totalAave();\\n        uint256 _aaveAsCollateral;\\n        if (_aaveRewardAccrued > 0) {\\n            (, _aaveAsCollateral, ) = swapManager.bestOutputFixedInput(\\n                rewardToken,\\n                address(collateralToken),\\n                _aaveRewardAccrued\\n            );\\n        }\\n\\n        uint256 _supply = aToken.balanceOf(address(this));\\n        uint256 _borrowInAave = vdToken.balanceOf(address(this));\\n        uint256 _investedBorrowBalance = _getInvestedBorrowBalance();\\n\\n        uint256 _collateralNeededForRepay;\\n        if (_borrowInAave > _investedBorrowBalance) {\\n            (, _collateralNeededForRepay, ) = swapManager.bestInputFixedOutput(\\n                address(collateralToken),\\n                borrowToken,\\n                _borrowInAave - _investedBorrowBalance\\n            );\\n        }\\n        _totalValue =\\n            _aaveAsCollateral +\\n            collateralToken.balanceOf(address(this)) +\\n            _supply -\\n            _collateralNeededForRepay;\\n    }\\n\\n    /// @notice After borrowing Y Hook\\n    function _afterBorrowY(uint256 _amount) internal virtual {}\\n\\n    /// @notice Approve all required tokens\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        collateralToken.safeApprove(pool, _amount);\\n        collateralToken.safeApprove(address(aToken), _amount);\\n        collateralToken.safeApprove(address(aaveLendingPool), _amount);\\n        IERC20(borrowToken).safeApprove(address(aaveLendingPool), _amount);\\n\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            IERC20(collateralToken).safeApprove(address(swapManager.ROUTERS(i)), _amount);\\n            IERC20(rewardToken).safeApprove(address(swapManager.ROUTERS(i)), _amount);\\n            IERC20(borrowToken).safeApprove(address(swapManager.ROUTERS(i)), _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim rewardToken and transfer to new strategy\\n     * @param _newStrategy Address of new strategy.\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual override {\\n        require(IStrategy(_newStrategy).token() == address(aToken), \\\"wrong-receipt-token\\\");\\n        _repayY(vdToken.balanceOf(address(this)));\\n    }\\n\\n    /// @notice Before repaying Y Hook\\n    function _beforeRepayY(uint256 _amount) internal virtual returns (uint256 _withdrawnAmount) {\\n        return _amount;\\n    }\\n\\n    function _borrowY(uint256 _amount) internal virtual {\\n        if (_amount > 0) {\\n            // 2 for variable rate borrow, 0 for referralCode\\n            aaveLendingPool.borrow(borrowToken, _amount, 2, 0, address(this));\\n            _afterBorrowY(_amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate borrow and repay amount based on current collateral and new deposit/withdraw amount.\\n     * @param _depositAmount deposit amount\\n     * @param _withdrawAmount withdraw amount\\n     * @return _borrowAmount borrow more amount\\n     * @return _repayAmount repay amount to keep ltv within limit\\n     */\\n    function _calculateBorrowPosition(uint256 _depositAmount, uint256 _withdrawAmount)\\n        internal\\n        view\\n        returns (uint256 _borrowAmount, uint256 _repayAmount)\\n    {\\n        require(_depositAmount == 0 || _withdrawAmount == 0, \\\"all-input-gt-zero\\\");\\n        uint256 _borrowed = vdToken.balanceOf(address(this));\\n        // If maximum borrow limit set to 0 then repay borrow\\n        if (maxBorrowLimit == 0) {\\n            return (0, _borrowed);\\n        }\\n        uint256 _collateral = aToken.balanceOf(address(this));\\n        // In case of withdraw, _amount can be greater than _supply\\n        uint256 _hypotheticalCollateral =\\n            _depositAmount > 0 ? _collateral + _depositAmount : _collateral > _withdrawAmount\\n                ? _collateral - _withdrawAmount\\n                : 0;\\n        if (_hypotheticalCollateral == 0) {\\n            return (0, _borrowed);\\n        }\\n        AaveOracle _aaveOracle = AaveOracle(aaveAddressesProvider_.getPriceOracle());\\n        // Oracle prices are in 18 decimal\\n        uint256 _borrowTokenPrice = _aaveOracle.getAssetPrice(borrowToken);\\n        uint256 _collateralTokenPrice = _aaveOracle.getAssetPrice(address(collateralToken));\\n        if (_borrowTokenPrice == 0 || _collateralTokenPrice == 0) {\\n            // Oracle problem. Lets payback all\\n            return (0, _borrowed);\\n        }\\n        // _collateralFactor in 4 decimal. 10_000 = 100%\\n        (, uint256 _collateralFactor, , , , , , , , ) =\\n            aaveProtocolDataProvider.getReserveConfigurationData(address(collateralToken));\\n\\n        // Collateral in base currency based on oracle price and cf;\\n        uint256 _actualCollateralForBorrow =\\n            (_hypotheticalCollateral * _collateralFactor * _collateralTokenPrice) /\\n                (MAX_BPS * (10**IERC20Metadata(address(collateralToken)).decimals()));\\n        // Calculate max borrow possible in borrow token number\\n        uint256 _maxBorrowPossible =\\n            (_actualCollateralForBorrow * (10**IERC20Metadata(address(borrowToken)).decimals())) / _borrowTokenPrice;\\n        if (_maxBorrowPossible == 0) {\\n            return (0, _borrowed);\\n        }\\n        // Safe buffer to avoid liquidation due to price variations.\\n        uint256 _borrowUpperBound = (_maxBorrowPossible * maxBorrowLimit) / MAX_BPS;\\n\\n        // Borrow up to _borrowLowerBound and keep buffer of _borrowUpperBound - _borrowLowerBound for price variation\\n        uint256 _borrowLowerBound = (_maxBorrowPossible * minBorrowLimit) / MAX_BPS;\\n\\n        // If current borrow is greater than max borrow, then repay to achieve safe position.\\n        if (_borrowed > _borrowUpperBound) {\\n            // If borrow > upperBound then it is greater than lowerBound too.\\n            _repayAmount = _borrowed - _borrowLowerBound;\\n        } else if (_borrowLowerBound > _borrowed) {\\n            _borrowAmount = _borrowLowerBound - _borrowed;\\n        }\\n    }\\n\\n    /// @notice Claim Aave and VSP rewards and convert to _toToken.\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\\n        uint256 _aaveAmount = _claimAave();\\n        if (_aaveAmount > 0) {\\n            _safeSwap(rewardToken, _toToken, _aaveAmount, 1);\\n        }\\n    }\\n\\n    /**\\n     * @notice Generate report for pools accounting and also send profit and any payback to pool.\\n     * @dev Claim rewardToken and convert to collateral.\\n     */\\n    function _generateReport()\\n        internal\\n        override\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n\\n        // Claim rewardToken and convert to collateral token\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n\\n        uint256 _supply = aToken.balanceOf(address(this));\\n        uint256 _borrow = vdToken.balanceOf(address(this));\\n\\n        uint256 _investedBorrowBalance = _getInvestedBorrowBalance();\\n\\n        if (_investedBorrowBalance > _borrow) {\\n            _rebalanceBorrow(_investedBorrowBalance - _borrow);\\n        } else {\\n            _swapToBorrowToken(_borrow - _investedBorrowBalance);\\n        }\\n\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        uint256 _totalCollateral = _supply + _collateralHere;\\n\\n        if (_totalCollateral > _totalDebt) {\\n            _profit = _totalCollateral - _totalDebt;\\n        } else {\\n            _loss = _totalDebt - _totalCollateral;\\n        }\\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\\n        if (_collateralHere < _profitAndExcessDebt) {\\n            uint256 _totalAmountToWithdraw = Math.min((_profitAndExcessDebt - _collateralHere), _supply);\\n            if (_totalAmountToWithdraw > 0) {\\n                _withdrawHere(_totalAmountToWithdraw);\\n                _collateralHere = collateralToken.balanceOf(address(this));\\n            }\\n        }\\n\\n        if (_excessDebt > 0) {\\n            _payback = Math.min(_collateralHere, _excessDebt);\\n        }\\n    }\\n\\n    /// @notice Borrowed Y balance deposited here or elsewhere hook\\n    function _getInvestedBorrowBalance() internal view virtual returns (uint256) {\\n        return IERC20(borrowToken).balanceOf(address(this));\\n    }\\n\\n    // @solhint-disable-next-line no-empty-blocks\\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {}\\n\\n    /**\\n     * @dev Aave support WETH as collateral.\\n     */\\n    function _mint(uint256 _amount) internal virtual {\\n        _deposit(address(collateralToken), _amount);\\n    }\\n\\n    // @solhint-disable-next-line no-empty-blocks\\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {}\\n\\n    // @solhint-disable-next-line no-empty-blocks\\n    function _realizeProfit(uint256 _totalDebt) internal virtual override returns (uint256) {}\\n\\n    /// @notice Swap excess borrow for more collateral hook\\n    function _rebalanceBorrow(uint256 _excessBorrow) internal virtual {}\\n\\n    function _redeemX(uint256 _amount) internal virtual {\\n        _withdraw(address(collateralToken), address(this), _amount);\\n    }\\n\\n    /// @notice Deposit collateral in Aave and adjust borrow position\\n    function _reinvest() internal virtual override {\\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\\n\\n        (uint256 _borrowAmount, uint256 _repayAmount) = _calculateBorrowPosition(_collateralBalance, 0);\\n\\n        if (_repayAmount > 0) {\\n            // Repay _borrowAmount to maintain safe position\\n            _repayY(_repayAmount);\\n            _mint(collateralToken.balanceOf(address(this)));\\n        } else {\\n            // Happy path, mint more borrow more\\n            _mint(_collateralBalance);\\n            _borrowY(_borrowAmount);\\n        }\\n    }\\n\\n    function _repayY(uint256 _amount) internal virtual {\\n        uint256 _repayAmount = _beforeRepayY(_amount);\\n        if (_repayAmount > 0) aaveLendingPool.repay(borrowToken, _repayAmount, 2, address(this));\\n    }\\n\\n    /**\\n     * @dev If swap slippage is defined then use oracle to get amountOut and calculate minAmountOut\\n     */\\n    function _safeSwap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal virtual {\\n        uint256 _minAmountOut =\\n            swapSlippage != 10000\\n                ? _calcAmtOutAfterSlippage(\\n                    ORACLE.assetToAsset(_tokenIn, _amountIn, _tokenOut, TWAP_PERIOD),\\n                    swapSlippage\\n                )\\n                : 1;\\n        _safeSwap(_tokenIn, _tokenOut, _amountIn, _minAmountOut);\\n    }\\n\\n    /**\\n     * @notice Swap given token to borrowToken\\n     * @param _shortOnBorrow Expected output of this swap\\n     */\\n    function _swapToBorrowToken(uint256 _shortOnBorrow) internal {\\n        // Looking for _amountIn using fixed output amount\\n        (address[] memory _path, uint256 _amountIn, uint256 _rIdx) =\\n            swapManager.bestInputFixedOutput(address(collateralToken), borrowToken, _shortOnBorrow);\\n        if (_amountIn > 0) {\\n            uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n            // If we do not have enough _from token to get expected output, either get\\n            // some _from token or adjust expected output.\\n            if (_amountIn > _collateralHere) {\\n                // Redeem some collateral, so that we have enough collateral to get expected output\\n                _redeemX(_amountIn - _collateralHere);\\n            }\\n            swapManager.ROUTERS(_rIdx).swapTokensForExactTokens(\\n                _shortOnBorrow,\\n                _amountIn,\\n                _path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    /// @dev Withdraw collateral and transfer it to pool\\n    function _withdraw(uint256 _amount) internal override {\\n        collateralToken.safeTransfer(pool, _withdrawHere(_amount));\\n    }\\n\\n    /// @dev Withdraw collateral here. Do not transfer to pool\\n    function _withdrawHere(uint256 _amount) internal returns (uint256) {\\n        (, uint256 _repayAmount) = _calculateBorrowPosition(0, _amount);\\n        if (_repayAmount > 0) {\\n            _repayY(_repayAmount);\\n        }\\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\\n\\n        _redeemX(_amount);\\n\\n        return collateralToken.balanceOf(address(this)) - _collateralBefore;\\n    }\\n\\n    /**\\n     * @notice Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\\n     * @dev It is possible to set _maxBorrowLimit and _minBorrowLimit as 0 to not borrow anything\\n     * @param _minBorrowLimit It is % of actual collateral factor of protocol\\n     * @param _maxBorrowLimit It is % of actual collateral factor of protocol\\n     */\\n    function updateBorrowLimit(uint256 _minBorrowLimit, uint256 _maxBorrowLimit) external onlyGovernor {\\n        require(_maxBorrowLimit < MAX_BPS, \\\"invalid-max-borrow-limit\\\");\\n        // set _maxBorrowLimit and _minBorrowLimit to disable borrow;\\n        require(\\n            (_maxBorrowLimit == 0 && _minBorrowLimit == 0) || _maxBorrowLimit > _minBorrowLimit,\\n            \\\"max-should-be-higher-than-min\\\"\\n        );\\n        emit UpdatedBorrowLimit(minBorrowLimit, _minBorrowLimit, maxBorrowLimit, _maxBorrowLimit);\\n        minBorrowLimit = _minBorrowLimit;\\n        maxBorrowLimit = _maxBorrowLimit;\\n    }\\n}\\n\",\"keccak256\":\"0xf5f68f376254774ef740a6adb62d9dfcdd2aae8e1a9d32e3f2281af66d0be97c\",\"license\":\"GNU LGPLv3\"},\"contracts/strategies/aave/VesperAaveXYStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GNU LGPLv3\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./AaveXYStrategy.sol\\\";\\nimport \\\"../../interfaces/vesper/IVesperPool.sol\\\";\\n\\n/// @title Deposit Collateral in Aave and earn interest by depositing borrowed token in a Vesper Pool.\\ncontract VesperAaveXYStrategy is AaveXYStrategy {\\n    using SafeERC20 for IERC20;\\n\\n    // Destination Grow Pool for borrowed Token\\n    address public immutable vPool;\\n    // VSP token address\\n    address public immutable vsp;\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _rewardToken,\\n        address _receiptToken,\\n        address _borrowToken,\\n        address _vPool,\\n        address _vspAddress,\\n        string memory _name\\n    ) AaveXYStrategy(_pool, _swapManager, _rewardToken, _receiptToken, _borrowToken, _name) {\\n        require(_vspAddress != address(0), \\\"invalid-vsp-address\\\");\\n        require(address(IVesperPool(_vPool).token()) == borrowToken, \\\"invalid-grow-pool\\\");\\n        vPool = _vPool;\\n        vsp = _vspAddress;\\n    }\\n\\n    function totalValue() public view virtual override returns (uint256 _totalValue) {\\n        uint256 _vspAsCollateral;\\n        address _poolRewards = IVesperPool(vPool).poolRewards();\\n        if (_poolRewards != address(0)) {\\n            (, uint256[] memory _claimableAmount) = IPoolRewards(_poolRewards).claimable(address(this));\\n            uint256 _vspRewardAccrued = _claimableAmount[0];\\n            if (_vspRewardAccrued != 0) {\\n                (, _vspAsCollateral, ) = swapManager.bestOutputFixedInput(\\n                    vsp,\\n                    address(collateralToken),\\n                    _vspRewardAccrued\\n                );\\n            }\\n        }\\n        _totalValue = super.totalValue() + _vspAsCollateral;\\n    }\\n\\n    /// @notice After borrowing Y, deposit to Vesper Pool\\n    function _afterBorrowY(uint256 _amount) internal virtual override {\\n        IVesperPool(vPool).deposit(_amount);\\n    }\\n\\n    /// @notice Approve all required tokens\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        super._approveToken(_amount);\\n        IERC20(borrowToken).safeApprove(vPool, _amount);\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            IERC20(vsp).safeApprove(address(swapManager.ROUTERS(i)), _amount);\\n        }\\n    }\\n\\n    /// @notice Before repaying Y, withdraw it from Vesper Pool\\n    function _beforeRepayY(uint256 _amount) internal virtual override returns (uint256 _withdrawnAmount) {\\n        _withdrawFromVesperPool(_amount);\\n        _withdrawnAmount = IERC20(borrowToken).balanceOf(address(this));\\n    }\\n\\n    /// @notice Claim Aave and VSP rewards and convert to _toToken.\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\\n        super._claimRewardsAndConvertTo(_toToken);\\n        address _poolRewards = IVesperPool(vPool).poolRewards();\\n        if (_poolRewards != address(0)) {\\n            IPoolRewards(_poolRewards).claimReward(address(this));\\n            uint256 _vspAmount = IERC20(vsp).balanceOf(address(this));\\n            if (_vspAmount != 0) {\\n                _safeSwap(vsp, _toToken, _vspAmount, 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Borrowed Y balance deposited in Vesper Pool\\n    function _getInvestedBorrowBalance() internal view virtual override returns (uint256) {\\n        return\\n            IERC20(borrowToken).balanceOf(address(this)) +\\n            ((IVesperPool(vPool).pricePerShare() * IVesperPool(vPool).balanceOf(address(this))) / 1e18);\\n    }\\n\\n    /// @notice Swap excess borrow for more collateral when underlying VSP pool is making profits\\n    function _rebalanceBorrow(uint256 _excessBorrow) internal virtual override {\\n        if (_excessBorrow != 0) {\\n            _withdrawFromVesperPool(_excessBorrow);\\n            uint256 _borrowedHere = IERC20(borrowToken).balanceOf(address(this));\\n            if (_borrowedHere != 0) {\\n                _safeSwap(borrowToken, address(collateralToken), _borrowedHere);\\n            }\\n        }\\n    }\\n\\n    /// @notice Withdraw _shares proportional to collateral _amount from vPool\\n    function _withdrawFromVesperPool(uint256 _amount) internal {\\n        if (_amount > 0) {\\n            uint256 _pricePerShare = IVesperPool(vPool).pricePerShare();\\n            uint256 _shares = (_amount * 1e18) / _pricePerShare;\\n            _shares = _amount > ((_shares * _pricePerShare) / 1e18) ? _shares + 1 : _shares;\\n\\n            uint256 _maxShares = IERC20(vPool).balanceOf(address(this));\\n\\n            IVesperPool(vPool).withdraw((_shares > _maxShares || _shares == 0) ? _maxShares : _shares);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xebbd20e5b4c5fa09ddb02b2b7bbc1d45cd36256f20ec19edef235424135e7c5e\",\"license\":\"GNU LGPLv3\"}},\"version\":1}",
  "bytecode": "0x610180604052600080546001600160a01b03191673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2178155610e10600455600555612710600655611b58600b55612134600c553480156200005357600080fd5b506040516200682438038062006824833981016040819052620000769162000805565b878787878785828686826001600160a01b038316620000dc5760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038216620001295760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b6044820152606401620000d3565b600380546001600160a01b0319166001600160a01b0384811691909117909155831660a081905260408051637e062a3560e11b8152905163fc0c546a91600480820192602092909190829003018186803b1580156200018757600080fd5b505afa1580156200019c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c2919062000957565b6001600160a01b03908116608052600180546001600160a01b03191691831691909117905562000209620001f33390565b60076200068b60201b62001d441790919060201c565b6200024b5760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401620000d3565b5050604080518082019091526002815261031360f41b602082015290506001600160a01b038216620002925760405162461bcd60e51b8152600401620000d391906200097e565b506001600160a01b038116610120819052604080516375d2641360e01b815290516375d2641391600480820192602092909190829003018186803b158015620002da57600080fd5b505afa9250505080156200030d575060408051601f3d908101601f191682019092526200030a9181019062000957565b60015b620003185762000325565b6001600160a01b031660e0525b73b53c1a33016b2dc2ff3653530bff1848a515c8c561010081905260408051630261bf8b60e01b81529051630261bf8b91600480820192602092909190829003018186803b1580156200037757600080fd5b505afa1580156200038c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003b2919062000957565b6001600160a01b0390811660c052610100516040516321f8a72160e01b8152600160f81b60048201529116906321f8a7219060240160206040518083038186803b1580156200040057600080fd5b505afa15801562000415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200043b919062000957565b600980546001600160a01b0319166001600160a01b03929092169190911790555080516200047190600a906020840190620006fd565b50600d80546001600160a01b0319166001600160a01b03868116919091179091556009546040516334924edb60e21b81528483166004820152600092919091169063d2493b6c9060240160606040518083038186803b158015620004d457600080fd5b505afa158015620004e9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200050f9190620009b3565b600f80546001600160a01b03199081166001600160a01b0393841617909155600e805490911696821696909617909555505050508616151593506200059b925050505760405162461bcd60e51b815260206004820152601360248201527f696e76616c69642d7673702d61646472657373000000000000000000000000006044820152606401620000d3565b600e5460408051637e062a3560e11b815290516001600160a01b039283169286169163fc0c546a916004808301926020929190829003018186803b158015620005e357600080fd5b505afa158015620005f8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200061e919062000957565b6001600160a01b0316146200066a5760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a590b59dc9bddcb5c1bdbdb607a1b6044820152606401620000d3565b506001600160a01b039182166101405216610160525062000a449350505050565b6000620006a2836001600160a01b038416620006ab565b90505b92915050565b6000818152600183016020526040812054620006f457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620006a5565b506000620006a5565b8280546200070b9062000a07565b90600052602060002090601f0160209004810192826200072f57600085556200077a565b82601f106200074a57805160ff19168380011785556200077a565b828001600101855582156200077a579182015b828111156200077a5782518255916020019190600101906200075d565b50620007889291506200078c565b5090565b5b808211156200078857600081556001016200078d565b6001600160a01b0381168114620007b957600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620007ef578181015183820152602001620007d5565b83811115620007ff576000848401525b50505050565b600080600080600080600080610100898b0312156200082357600080fd5b88516200083081620007a3565b60208a01519098506200084381620007a3565b60408a01519097506200085681620007a3565b60608a01519096506200086981620007a3565b60808a01519095506200087c81620007a3565b60a08a01519094506200088f81620007a3565b60c08a0151909350620008a281620007a3565b60e08a01519092506001600160401b0380821115620008c057600080fd5b818b0191508b601f830112620008d557600080fd5b815181811115620008ea57620008ea620007bc565b604051601f8201601f19908116603f01168101908382118183101715620009155762000915620007bc565b816040528281528e60208487010111156200092f57600080fd5b62000942836020830160208801620007d2565b80955050505050509295985092959890939650565b6000602082840312156200096a57600080fd5b81516200097781620007a3565b9392505050565b60208152600082518060208401526200099f816040850160208701620007d2565b601f01601f19169190910160400192915050565b600080600060608486031215620009c957600080fd5b8351620009d681620007a3565b6020850151909350620009e981620007a3565b6040850151909250620009fc81620007a3565b809150509250925092565b600181811c9082168062000a1c57607f821691505b6020821081141562000a3e57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516101405161016051615b8962000c9b600039600081816103240152818161187f01528181612668015281816130f9015261318c0152600081816104200152818161170a0152818161252b01528181612fe2015281816131c10152818161325d015281816148d9015281816149c501528181614a630152614cce015260008181611da60152818161206c015281816126a301528181612945015281816137fa01528181613fb80152614d6c015260006138cb0152600081816103de015281816144c4015281816145fa01528181614eb80152614f1201526000818161057201528181613daa01528181613e720152818161400c0152818161404301528181614c890152614df30152600081816102af0152818161060c015281816108cd0152818161091d01528181610a6a01528181610c4001528181610df401528181610e7701528181610fe701528181611242015281816112df0152818161153c01528181611b8101528181611d7a01528181611eed01528181611f8d0152613f640152600081816104dd0152818161146f01528181611513015281816118a1015281816119b10152818161202e015281816121d0015281816122df015281816123a301528181612467015281816128a801528181612a8201528181612b2801528181612e9501528181612f3e015281816134340152818161348b01528181613534015281816139f701528181613acf01528181613b5701528181613e0a01528181613f4201528181613f9601528181613fea0152818161418001526146ac0152615b896000f3fe608060405234801561001057600080fd5b50600436106102745760003560e01c80639298602411610151578063d4c3eea0116100c3578063ec78e83211610087578063ec78e83214610594578063f51896f8146105a7578063f7c618c1146105af578063fb7ee102146105c2578063fc0c546a146105d5578063ffa1ad74146105e657600080fd5b8063d4c3eea014610541578063e00af4a714610549578063e260d7471461055c578063e645c20214610565578063e9d337b81461056d57600080fd5b8063aa10188611610115578063aa101886146104d0578063b2016bd4146104d8578063c415b95c146104ff578063cd2d7ebe14610512578063ce5494bb1461051b578063d2c35ce81461052e57600080fd5b80639298602414610483578063951dc22c1461048b57806399b71d5c146104a0578063a3f4df7e146104a8578063a923b2a6146104bd57600080fd5b8063456dc17a116101ea57806360a05a85116101ae57806360a05a85146104135780636719578c1461041b57806367f5e4b814610442578063709d039d146104555780637d7c2a1c1461046857806390d675141461047057600080fd5b8063456dc17a1461039857806348ccda3c146103ab5780634c36fad7146103c65780635f2475ca146103d95780635f9d4d2e1461040057600080fd5b806321fc6bb01161023c57806321fc6bb0146102fc57806329ba73ed1461031f5780632e1a7d4d146103465780634032b72b1461035957806342189c8f1461036c578063440d72481461037557600080fd5b80630181686c1461027957806314ae9f2e1461029557806316f0115b146102aa5780631aedeabe146102de5780631fc29c01146102e7575b600080fd5b610282600c5481565b6040519081526020015b60405180910390f35b6102a86102a3366004615347565b61060a565b005b6102d17f000000000000000000000000000000000000000000000000000000000000000081565b60405161028c9190615364565b61028260065481565b6102d1600080516020615b3483398151915281565b610304610725565b6040805193845260208401929092529082015260600161028c565b6102d17f000000000000000000000000000000000000000000000000000000000000000081565b6102a8610354366004615378565b6108ca565b6102a8610367366004615347565b61091b565b61028260045481565b610388610383366004615347565b610a27565b604051901515815260200161028c565b600e546102d1906001600160a01b031681565b6102d1737fc66500c84a76ad7e9c93437bfc5ac33e2ddae981565b6102a86103d4366004615347565b610a68565b6102d17f000000000000000000000000000000000000000000000000000000000000000081565b6009546102d1906001600160a01b031681565b610388610c1b565b6102d17f000000000000000000000000000000000000000000000000000000000000000081565b6102a8610450366004615378565b610c3e565b6003546102d1906001600160a01b031681565b6102a8610d8a565b600f546102d1906001600160a01b031681565b610388610e5d565b610493610f0a565b60405161028c91906153d5565b6102a8610f1b565b6104b0610f57565b60405161028c9190615414565b6102a86104cb366004615447565b610fe5565b6102a861121a565b6102d17f000000000000000000000000000000000000000000000000000000000000000081565b6002546102d1906001600160a01b031681565b61028260055481565b6102a8610529366004615347565b61123f565b6102a861053c366004615347565b61153a565b610282611703565b6102a8610557366004615347565b61193a565b610282600b5481565b610282611b59565b6102d17f000000000000000000000000000000000000000000000000000000000000000081565b6001546102d1906001600160a01b031681565b610388611b63565b600d546102d1906001600160a01b031681565b6102a86105d0366004615447565b611b7f565b6001546001600160a01b03166102d1565b6104b0604051806040016040528060058152602001640342e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561066357600080fd5b505afa158015610677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069b9190615469565b6001600160a01b0316336001600160a01b0316146106d45760405162461bcd60e51b81526004016106cb90615486565b60405180910390fd5b6106df600782611d60565b6107225760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b60448201526064016106cb565b50565b60405163091030c360e01b815260009081908190600080516020615b348339815191529063091030c39061075d903090600401615364565b60206040518083038186803b15801561077557600080fd5b505afa158015610789573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ad91906154bd565b9250600080516020615b348339815191526001600160a01b03166372b49d636040518163ffffffff1660e01b815260040160206040518083038186803b1580156107f657600080fd5b505afa15801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e91906154bd565b61083890846154ec565b9150600080516020615b348339815191526001600160a01b031663359c4a966040518163ffffffff1660e01b815260040160206040518083038186803b15801561088157600080fd5b505afa158015610895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b991906154bd565b6108c390836154ec565b9050909192565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146109125760405162461bcd60e51b81526004016106cb90615504565b61072281611d75565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561097457600080fd5b505afa158015610988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ac9190615469565b6001600160a01b0316336001600160a01b0316146109dc5760405162461bcd60e51b81526004016106cb90615486565b6109e7600782611d44565b6107225760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b60448201526064016106cb565b6000610a3282611da2565b80610a4a5750600f546001600160a01b038381169116145b80610a625750600e546001600160a01b038381169116145b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610ac157600080fd5b505afa158015610ad5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af99190615469565b6001600160a01b0316336001600160a01b031614610b295760405162461bcd60e51b81526004016106cb90615486565b6001600160a01b038116610b745760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b60448201526064016106cb565b6003546001600160a01b0382811691161415610bbf5760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b60448201526064016106cb565b6003546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000610c28610725565b9250509150610c378282611e26565b9250505090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9757600080fd5b505afa158015610cab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccf9190615469565b6001600160a01b0316336001600160a01b031614610cff5760405162461bcd60e51b81526004016106cb90615486565b612710811115610d4a5760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b60448201526064016106cb565b60065460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600655565b610d97335b600790611ec3565b610db35760405162461bcd60e51b81526004016106cb90615537565b6000806000610dc0611ee5565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b158015610e3857600080fd5b505af1158015610e4c573d6000803e3d6000fd5b50505050610e58612389565b505050565b604051639f2b283360e01b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b283390610eac903090600401615364565b60206040518083038186803b158015610ec457600080fd5b505afa158015610ed8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efc91906154bd565b610f04611703565b10905090565b6060610f166007612503565b905090565b610f2433610d8f565b610f405760405162461bcd60e51b81526004016106cb90615537565b610f4a6000612510565b610f55600019612510565b565b600a8054610f6490615567565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9090615567565b8015610fdd5780601f10610fb257610100808354040283529160200191610fdd565b820191906000526020600020905b815481529060010190602001808311610fc057829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561103e57600080fd5b505afa158015611052573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110769190615469565b6001600160a01b0316336001600160a01b0316146110a65760405162461bcd60e51b81526004016106cb90615486565b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b1580156110f457600080fd5b505afa158015611108573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112c91906154bd565b81106111715760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b60448201526064016106cb565b8161117c5760045491505b603b82116111c45760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b60448201526064016106cb565b6004546005546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600491909155600555565b61122333610d8f565b610f555760405162461bcd60e51b81526004016106cb90615537565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146112875760405162461bcd60e51b81526004016106cb90615504565b6001600160a01b0381166112dd5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f0000000060448201526064016106cb565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561134057600080fd5b505afa158015611354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113789190615469565b6001600160a01b0316146113c75760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b60448201526064016106cb565b6113d0816126a1565b6001546040516370a0823160e01b81526114699183916001600160a01b03909116906370a0823190611406903090600401615364565b60206040518083038186803b15801561141e57600080fd5b505afa158015611432573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145691906154bd565b6001546001600160a01b0316919061280f565b610722817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016114b99190615364565b60206040518083038186803b1580156114d157600080fd5b505afa1580156114e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150991906154bd565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061280f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561159357600080fd5b505afa1580156115a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cb9190615469565b6001600160a01b0316336001600160a01b0316146115fb5760405162461bcd60e51b81526004016106cb90615486565b6001600160a01b0381166116515760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f00000060448201526064016106cb565b6002546001600160a01b03828116911614156116a75760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b60448201526064016106cb565b6002546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638bc6beb26040518163ffffffff1660e01b815260040160206040518083038186803b15801561176157600080fd5b505afa158015611775573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117999190615469565b90506001600160a01b038116156119275760405163402914f560e01b81526000906001600160a01b0383169063402914f5906117d9903090600401615364565b60006040518083038186803b1580156117f157600080fd5b505afa158015611805573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261182d91908101906156dc565b91505060008160008151811061184557611845615740565b602002602001015190508060001461192457600354604051631d1f307960e31b81526001600160a01b039091169063e8f983c8906118cb907f0000000000000000000000000000000000000000000000000000000000000000907f0000000000000000000000000000000000000000000000000000000000000000908690600401615756565b60006040518083038186803b1580156118e357600080fd5b505afa1580156118f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261191f919081019061577a565b509450505b50505b81611930612865565b610c3791906154ec565b61194333610d8f565b61195f5760405162461bcd60e51b81526004016106cb90615537565b6002546001600160a01b03166119af5760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b60448201526064016106cb565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415611a315760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c0060448201526064016106cb565b611a3a81610a27565b15611a7e5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b60448201526064016106cb565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611ab957600254610722906001600160a01b031647612beb565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190611ae8903090600401615364565b60206040518083038186803b158015611b0057600080fd5b505afa158015611b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3891906154bd565b600254909150611b55906001600160a01b0384811691168361280f565b5050565b6000610f16611703565b6000806000611b70610725565b9250925050610c378282612d04565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611bd857600080fd5b505afa158015611bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c109190615469565b6001600160a01b0316336001600160a01b031614611c405760405162461bcd60e51b81526004016106cb90615486565b6127108110611c8c5760405162461bcd60e51b81526020600482015260186024820152771a5b9d985b1a590b5b585e0b589bdc9c9bddcb5b1a5b5a5d60421b60448201526064016106cb565b80158015611c98575081155b80611ca257508181115b611cee5760405162461bcd60e51b815260206004820152601d60248201527f6d61782d73686f756c642d62652d6869676865722d7468616e2d6d696e00000060448201526064016106cb565b600b54600c546040805192835260208301859052820152606081018290527fedd77444afdf63401315e81ffe86d08f7865796e8ad2e11acf1d56a1393f07d59060800160405180910390a1600b91909155600c55565b6000611d59836001600160a01b038416612d19565b9392505050565b6000611d59836001600160a01b038416612d68565b6107227f000000000000000000000000000000000000000000000000000000000000000061150983612e5b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480611e0057506001600160a01b038216737fc66500c84a76ad7e9c93437bfc5ac33e2ddae9145b80610a6257506001600160a01b038216600080516020615b348339815191521492915050565b6040516370a0823160e01b8152600090600080516020615b34833981519152906370a0823190611e5a903090600401615364565b60206040518083038186803b158015611e7257600080fd5b505afa158015611e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eaa91906154bd565b15801590611d595750821580611d595750504211919050565b6001600160a01b03811660009081526001830160205260408120541515611d59565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b8152600401611f379190615364565b60206040518083038186803b158015611f4f57600080fd5b505afa158015611f63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8791906154bd565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b8152600401611fd79190615364565b60206040518083038186803b158015611fef57600080fd5b505afa158015612003573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202791906154bd565b90506120527f0000000000000000000000000000000000000000000000000000000000000000612fd5565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906120a1903090600401615364565b60206040518083038186803b1580156120b957600080fd5b505afa1580156120cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f191906154bd565b600f546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190612127903090600401615364565b60206040518083038186803b15801561213f57600080fd5b505afa158015612153573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217791906154bd565b905060006121836131b4565b9050818111156121a45761219f61219a83836157ca565b61338a565b6121b6565b6121b66121b182846157ca565b613459565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612205903090600401615364565b60206040518083038186803b15801561221d57600080fd5b505afa158015612231573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225591906154bd565b9050600061226382866154ec565b90508581111561227e5761227786826157ca565b995061228b565b61228881876157ca565b98505b6000612297888c6154ec565b9050808310156123695760006122b66122b085846157ca565b886136e3565b90508015612367576122c781612e5b565b506040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612314903090600401615364565b60206040518083038186803b15801561232c57600080fd5b505afa158015612340573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236491906154bd565b93505b505b871561237c5761237983896136e3565b98505b5050505050505050909192565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906123d8903090600401615364565b60206040518083038186803b1580156123f057600080fd5b505afa158015612404573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242891906154bd565b90506000806124388360006136f9565b909250905080156124f15761244c81613d61565b6040516370a0823160e01b8152610e58906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061249c903090600401615364565b60206040518083038186803b1580156124b457600080fd5b505afa1580156124c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ec91906154bd565b613e05565b6124fa83613e05565b610e5882613e2f565b60606000611d5983613ed9565b61251981613f35565b600e54612550906001600160a01b03167f0000000000000000000000000000000000000000000000000000000000000000836142db565b60005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b1580156125a157600080fd5b505afa1580156125b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d991906154bd565b811015611b5557600354604051636e74a6f760e01b81526004810183905261268f916001600160a01b031690636e74a6f79060240160206040518083038186803b15801561262657600080fd5b505afa15801561263a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265e9190615469565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690846142db565b80612699816157e1565b915050612553565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561270457600080fd5b505afa158015612718573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273c9190615469565b6001600160a01b0316146127885760405162461bcd60e51b81526020600482015260136024820152723bb937b73396b932b1b2b4b83a16ba37b5b2b760691b60448201526064016106cb565b600f546040516370a0823160e01b8152610722916001600160a01b0316906370a08231906127ba903090600401615364565b60206040518083038186803b1580156127d257600080fd5b505afa1580156127e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280a91906154bd565b613d61565b610e588363a9059cbb60e01b848460405160240161282e9291906157fc565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526143ee565b6000806128706144c0565b90506000811561292b57600354600d54604051631d1f307960e31b81526001600160a01b039283169263e8f983c8926128d2929116907f0000000000000000000000000000000000000000000000000000000000000000908790600401615756565b60006040518083038186803b1580156128ea57600080fd5b505afa1580156128fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612926919081019061577a565b509150505b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061297a903090600401615364565b60206040518083038186803b15801561299257600080fd5b505afa1580156129a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ca91906154bd565b600f546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190612a00903090600401615364565b60206040518083038186803b158015612a1857600080fd5b505afa158015612a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5091906154bd565b90506000612a5c6131b4565b9050600081831115612b2457600354600e546001600160a01b039182169163f4de46f6917f00000000000000000000000000000000000000000000000000000000000000009116612aad86886157ca565b6040518463ffffffff1660e01b8152600401612acb93929190615756565b60006040518083038186803b158015612ae357600080fd5b505afa158015612af7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b1f919081019061577a565b509150505b80847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612b729190615364565b60206040518083038186803b158015612b8a57600080fd5b505afa158015612b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc291906154bd565b612bcc90886154ec565b612bd691906154ec565b612be091906157ca565b965050505050505090565b80471015612c3b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016106cb565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612c88576040519150601f19603f3d011682016040523d82523d6000602084013e612c8d565b606091505b5050905080610e585760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016106cb565b60008242118015611d59575050421115919050565b6000818152600183016020526040812054612d6057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a62565b506000610a62565b60008181526001830160205260408120548015612e51576000612d8c6001836157ca565b8554909150600090612da0906001906157ca565b9050818114612e05576000866000018281548110612dc057612dc0615740565b9060005260206000200154905080876000018481548110612de357612de3615740565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612e1657612e16615815565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610a62565b6000915050610a62565b600080612e696000846136f9565b9150508015612e7b57612e7b81613d61565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612eca903090600401615364565b60206040518083038186803b158015612ee257600080fd5b505afa158015612ef6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f1a91906154bd565b9050612f25846146a7565b6040516370a0823160e01b815281906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612f73903090600401615364565b60206040518083038186803b158015612f8b57600080fd5b505afa158015612f9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc391906154bd565b612fcd91906157ca565b949350505050565b612fde816146d2565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638bc6beb26040518163ffffffff1660e01b815260040160206040518083038186803b15801561303957600080fd5b505afa15801561304d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130719190615469565b90506001600160a01b03811615611b555760405163d279c19160e01b81526001600160a01b0382169063d279c191906130ae903090600401615364565b600060405180830381600087803b1580156130c857600080fd5b505af11580156130dc573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691506370a082319061312f903090600401615364565b60206040518083038186803b15801561314757600080fd5b505afa15801561315b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061317f91906154bd565b90508015610e5857610e587f0000000000000000000000000000000000000000000000000000000000000000848360016146f9565b6000670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161320b9190615364565b60206040518083038186803b15801561322357600080fd5b505afa158015613237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061325b91906154bd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b1580156132b457600080fd5b505afa1580156132c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ec91906154bd565b6132f6919061582b565b613300919061584a565b600e546040516370a0823160e01b81526001600160a01b03909116906370a0823190613330903090600401615364565b60206040518083038186803b15801561334857600080fd5b505afa15801561335c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061338091906154bd565b610f1691906154ec565b801561072257613399816148cf565b600e546040516370a0823160e01b81526000916001600160a01b0316906370a08231906133ca903090600401615364565b60206040518083038186803b1580156133e257600080fd5b505afa1580156133f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061341a91906154bd565b90508015611b5557600e54611b55906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083614af4565b600354600e54604051637a6f237b60e11b8152600092839283926001600160a01b039283169263f4de46f6926134b9927f000000000000000000000000000000000000000000000000000000000000000092909116908990600401615756565b60006040518083038186803b1580156134d157600080fd5b505afa1580156134e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261350d919081019061577a565b9194509250905081156136dd576040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613569903090600401615364565b60206040518083038186803b15801561358157600080fd5b505afa158015613595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135b991906154bd565b9050808311156135d5576135d56135d082856157ca565b6146a7565b600354604051636e74a6f760e01b8152600481018490526001600160a01b0390911690636e74a6f79060240160206040518083038186803b15801561361957600080fd5b505afa15801561362d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136519190615469565b6001600160a01b0316638803dbee86858730426040518663ffffffff1660e01b815260040161368495949392919061586c565b600060405180830381600087803b15801561369e57600080fd5b505af11580156136b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136da91908101906158a8565b50505b50505050565b60008183106136f25781611d59565b5090919050565b600080831580613707575082155b6137475760405162461bcd60e51b8152602060048201526011602482015270616c6c2d696e7075742d67742d7a65726f60781b60448201526064016106cb565b600f546040516370a0823160e01b81526000916001600160a01b0316906370a0823190613778903090600401615364565b60206040518083038186803b15801561379057600080fd5b505afa1580156137a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c891906154bd565b9050600c54600014156137e057600092509050613d5a565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061382f903090600401615364565b60206040518083038186803b15801561384757600080fd5b505afa15801561385b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061387f91906154bd565b905060008087116138a7578582116138985760006138b1565b6138a286836157ca565b6138b1565b6138b187836154ec565b9050806138c75760008394509450505050613d5a565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561392257600080fd5b505afa158015613936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061395a9190615469565b600e5460405163b3596f0760e01b81529192506000916001600160a01b038085169263b3596f07926139929290911690600401615364565b60206040518083038186803b1580156139aa57600080fd5b505afa1580156139be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139e291906154bd565b90506000826001600160a01b031663b3596f077f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401613a329190615364565b60206040518083038186803b158015613a4a57600080fd5b505afa158015613a5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a8291906154bd565b9050811580613a8f575080155b15613aa65760008697509750505050505050613d5a565b600954604051633e15014160e01b81526000916001600160a01b031690633e15014190613af7907f000000000000000000000000000000000000000000000000000000000000000090600401615364565b6101406040518083038186803b158015613b1057600080fd5b505afa158015613b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b4891906158f2565b505050505050505091505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015613bae57600080fd5b505afa158015613bc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613be69190615989565b613bf190600a615a90565b613bfd9061271061582b565b83613c08848961582b565b613c12919061582b565b613c1c919061584a565b9050600084600e60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015613c6f57600080fd5b505afa158015613c83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ca79190615989565b613cb290600a615a90565b613cbc908461582b565b613cc6919061584a565b905080613ce2576000899a509a50505050505050505050613d5a565b6000612710600c5483613cf5919061582b565b613cff919061584a565b90506000612710600b5484613d14919061582b565b613d1e919061584a565b9050818b1115613d3957613d32818c6157ca565b9b50613d4e565b8a811115613d4e57613d4b8b826157ca565b9c505b50505050505050505050505b9250929050565b6000613d6c82614bc5565b90508015611b5557600e5460405163573ade8160e01b81526001600160a01b03918216600482015260248101839052600260448201523060648201527f00000000000000000000000000000000000000000000000000000000000000009091169063573ade81906084015b600060405180830381600087803b158015613df157600080fd5b505af11580156136da573d6000803e3d6000fd5b6107227f000000000000000000000000000000000000000000000000000000000000000082614c50565b801561072257600e5460405163a415bcad60e01b81526001600160a01b0391821660048201526024810183905260026044820152600060648201523060848201527f00000000000000000000000000000000000000000000000000000000000000009091169063a415bcad9060a401600060405180830381600087803b158015613eb857600080fd5b505af1158015613ecc573d6000803e3d6000fd5b5050505061072281614cb8565b606081600001805480602002602001604051908101604052809291908181526020018280548015613f2957602002820191906000526020600020905b815481526020019060010190808311613f15575b50505050509050919050565b613f896001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836142db565b613fdd6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836142db565b6140316001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836142db565b600e54614068906001600160a01b03167f0000000000000000000000000000000000000000000000000000000000000000836142db565b60005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b1580156140b957600080fd5b505afa1580156140cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140f191906154bd565b811015611b5557600354604051636e74a6f760e01b8152600481018390526141a7916001600160a01b031690636e74a6f79060240160206040518083038186803b15801561413e57600080fd5b505afa158015614152573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141769190615469565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690846142db565b600354604051636e74a6f760e01b815260048101839052614238916001600160a01b031690636e74a6f79060240160206040518083038186803b1580156141ed57600080fd5b505afa158015614201573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142259190615469565b600d546001600160a01b031690846142db565b600354604051636e74a6f760e01b8152600481018390526142c9916001600160a01b031690636e74a6f79060240160206040518083038186803b15801561427e57600080fd5b505afa158015614292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142b69190615469565b600e546001600160a01b031690846142db565b806142d3816157e1565b91505061406b565b8015806143645750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561432a57600080fd5b505afa15801561433e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061436291906154bd565b155b6143cf5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016106cb565b610e588363095ea7b360e01b848460405160240161282e9291906157fc565b6000614443826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614d359092919063ffffffff16565b805190915015610e5857808060200190518101906144619190615a9f565b610e585760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106cb565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166144f65750600090565b6040516346df7f7160e11b8152600080516020615b3483398151915290638dbefee290614527903090600401615364565b60206040518083038186803b15801561453f57600080fd5b505afa158015614553573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061457791906154bd565b6040516370a0823160e01b8152600080516020615b34833981519152906370a08231906145a8903090600401615364565b60206040518083038186803b1580156145c057600080fd5b505afa1580156145d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145f891906154bd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638b599f2661462f614d44565b306040518363ffffffff1660e01b815260040161464d929190615aba565b60206040518083038186803b15801561466557600080fd5b505afa158015614679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061469d91906154bd565b61338091906154ec565b611b557f00000000000000000000000000000000000000000000000000000000000000003083614dbb565b60006146dc614eb4565b90508015611b5557600d54611b55906001600160a01b0316838360015b826001600160a01b0316846001600160a01b03161415614718576136dd565b600354604051631d1f307960e31b8152600091829182916001600160a01b03169063e8f983c890614751908a908a908a90600401615756565b60006040518083038186803b15801561476957600080fd5b505afa15801561477d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526147a5919081019061577a565b92509250925083600014156147b957600193505b81156148c657600354604051636e74a6f760e01b8152600481018390526001600160a01b0390911690636e74a6f79060240160206040518083038186803b15801561480357600080fd5b505afa158015614817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061483b9190615469565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b815260040161486e95949392919061586c565b600060405180830381600087803b15801561488857600080fd5b505af115801561489c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526148c491908101906158a8565b505b50505050505050565b80156107225760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b15801561493057600080fd5b505afa158015614944573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061496891906154bd565b905060008161497f84670de0b6b3a764000061582b565b614989919061584a565b9050670de0b6b3a764000061499e838361582b565b6149a8919061584a565b83116149b457806149bf565b6149bf8160016154ec565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401614a0f9190615364565b60206040518083038186803b158015614a2757600080fd5b505afa158015614a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a5f91906154bd565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d82841180614a9c575083155b614aa65783614aa8565b825b6040518263ffffffff1660e01b8152600401614ac691815260200190565b600060405180830381600087803b158015614ae057600080fd5b505af11580156148c4573d6000803e3d6000fd5b60006006546127101415614b09576001614bb7565b6040516358fac00360e01b81526001600160a01b0380861660048301526024820184905284166044820152610e106064820152614bb790730f1f5a87f99f0918e6c81f16e59f3518698221ff906358fac0039060840160206040518083038186803b158015614b7757600080fd5b505afa158015614b8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614baf91906154bd565b6006546151ae565b90506136dd848484846146f9565b6000614bd0826148cf565b600e546040516370a0823160e01b81526001600160a01b03909116906370a0823190614c00903090600401615364565b60206040518083038186803b158015614c1857600080fd5b505afa158015614c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6291906154bd565b8015611b555760405163e8eda9df60e01b81526001600160a01b03838116600483015260248201839052306044830152600060648301527f0000000000000000000000000000000000000000000000000000000000000000169063e8eda9df90608401613dd7565b60405163b6b55f2560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f2590602401600060405180830381600087803b158015614d1a57600080fd5b505af1158015614d2e573d6000803e3d6000fd5b5050505050565b6060612fcd84846000856151d1565b60408051600180825281830190925260609160009190602080830190803683370190505090507f000000000000000000000000000000000000000000000000000000000000000081600081518110614d9e57614d9e615740565b6001600160a01b0390921660209283029190910190910152919050565b60008115614ead57604051631a4ca37b60e21b81526001600160a01b03858116600483015260248201849052848116604483015283917f0000000000000000000000000000000000000000000000000000000000000000909116906369328dec90606401602060405180830381600087803b158015614e3957600080fd5b505af1158015614e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e7191906154bd565b1460405180604001604052806002815260200161323960f01b81525090614eab5760405162461bcd60e51b81526004016106cb9190615414565b505b5092915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316614eea5750600090565b6000806000614ef7610725565b9250925092508260001480614f0b57508042115b15614fbd577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633111e7b3614f47614d44565b600019306040518463ffffffff1660e01b8152600401614f6993929190615ae4565b602060405180830381600087803b158015614f8357600080fd5b505af1158015614f97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614fbb91906154bd565b505b614fc5610725565b91945092509050614fd68282612d04565b15615047576040516301e9a69560e41b8152600080516020615b3483398151915290631e9a695090615010903090600019906004016157fc565b600060405180830381600087803b15801561502a57600080fd5b505af115801561503e573d6000803e3d6000fd5b505050506150b8565b6150518382611e26565b156150b857600080516020615b348339815191526001600160a01b031663787a08a66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561509f57600080fd5b505af11580156150b3573d6000803e3d6000fd5b505050505b6040516309a99b4f60e41b8152600080516020615b3483398151915290639a99b4f0906150ed903090600019906004016157fc565b600060405180830381600087803b15801561510757600080fd5b505af115801561511b573d6000803e3d6000fd5b50506040516370a0823160e01b8152737fc66500c84a76ad7e9c93437bfc5ac33e2ddae992506370a082319150615156903090600401615364565b60206040518083038186803b15801561516e57600080fd5b505afa158015615182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906151a691906154bd565b935050505090565b60006127106151bd83826157ca565b6151c7908561582b565b611d59919061584a565b6060824710156152325760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106cb565b843b6152805760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106cb565b600080866001600160a01b0316858760405161529c9190615b17565b60006040518083038185875af1925050503d80600081146152d9576040519150601f19603f3d011682016040523d82523d6000602084013e6152de565b606091505b50915091506152ee8282866152f9565b979650505050505050565b60608315615308575081611d59565b8251156153185782518084602001fd5b8160405162461bcd60e51b81526004016106cb9190615414565b6001600160a01b038116811461072257600080fd5b60006020828403121561535957600080fd5b8135611d5981615332565b6001600160a01b0391909116815260200190565b60006020828403121561538a57600080fd5b5035919050565b600081518084526020808501945080840160005b838110156153ca5781516001600160a01b0316875295820195908201906001016153a5565b509495945050505050565b602081526000611d596020830184615391565b60005b838110156154035781810151838201526020016153eb565b838111156136dd5750506000910152565b60208152600082518060208401526154338160408501602087016153e8565b601f01601f19169190910160400192915050565b6000806040838503121561545a57600080fd5b50508035926020909101359150565b60006020828403121561547b57600080fd5b8151611d5981615332565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b6000602082840312156154cf57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156154ff576154ff6154d6565b500190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b600181811c9082168061557b57607f821691505b6020821081141561559c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156155e1576155e16155a2565b604052919050565b600067ffffffffffffffff821115615603576156036155a2565b5060051b60200190565b600082601f83011261561e57600080fd5b8151602061563361562e836155e9565b6155b8565b82815260059290921b8401810191818101908684111561565257600080fd5b8286015b8481101561567657805161566981615332565b8352918301918301615656565b509695505050505050565b600082601f83011261569257600080fd5b815160206156a261562e836155e9565b82815260059290921b840181019181810190868411156156c157600080fd5b8286015b8481101561567657805183529183019183016156c5565b600080604083850312156156ef57600080fd5b825167ffffffffffffffff8082111561570757600080fd5b6157138683870161560d565b9350602085015191508082111561572957600080fd5b5061573685828601615681565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b60008060006060848603121561578f57600080fd5b835167ffffffffffffffff8111156157a657600080fd5b6157b28682870161560d565b93505060208401519150604084015190509250925092565b6000828210156157dc576157dc6154d6565b500390565b60006000198214156157f5576157f56154d6565b5060010190565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052603160045260246000fd5b6000816000190483118215151615615845576158456154d6565b500290565b60008261586757634e487b7160e01b600052601260045260246000fd5b500490565b85815284602082015260a06040820152600061588b60a0830186615391565b6001600160a01b0394909416606083015250608001529392505050565b6000602082840312156158ba57600080fd5b815167ffffffffffffffff8111156158d157600080fd5b612fcd84828501615681565b805180151581146158ed57600080fd5b919050565b6000806000806000806000806000806101408b8d03121561591257600080fd5b8a51995060208b0151985060408b0151975060608b0151965060808b0151955061593e60a08c016158dd565b945061594c60c08c016158dd565b935061595a60e08c016158dd565b92506159696101008c016158dd565b91506159786101208c016158dd565b90509295989b9194979a5092959850565b60006020828403121561599b57600080fd5b815160ff81168114611d5957600080fd5b600181815b808511156159e75781600019048211156159cd576159cd6154d6565b808516156159da57918102915b93841c93908002906159b1565b509250929050565b6000826159fe57506001610a62565b81615a0b57506000610a62565b8160018114615a215760028114615a2b57615a47565b6001915050610a62565b60ff841115615a3c57615a3c6154d6565b50506001821b610a62565b5060208310610133831016604e8410600b8410161715615a6a575081810a610a62565b615a7483836159ac565b8060001904821115615a8857615a886154d6565b029392505050565b6000611d5960ff8416836159ef565b600060208284031215615ab157600080fd5b611d59826158dd565b604081526000615acd6040830185615391565b905060018060a01b03831660208301529392505050565b606081526000615af76060830186615391565b6020830194909452506001600160a01b0391909116604090910152919050565b60008251615b298184602087016153e8565b919091019291505056fe0000000000000000000000004da27a545c0c5b758a6ba100e3a049001de870f5a2646970667358221220ae3c0066df0a9989595b7728521c7c35c39084a219942c4cbeba200362eebcc864736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102745760003560e01c80639298602411610151578063d4c3eea0116100c3578063ec78e83211610087578063ec78e83214610594578063f51896f8146105a7578063f7c618c1146105af578063fb7ee102146105c2578063fc0c546a146105d5578063ffa1ad74146105e657600080fd5b8063d4c3eea014610541578063e00af4a714610549578063e260d7471461055c578063e645c20214610565578063e9d337b81461056d57600080fd5b8063aa10188611610115578063aa101886146104d0578063b2016bd4146104d8578063c415b95c146104ff578063cd2d7ebe14610512578063ce5494bb1461051b578063d2c35ce81461052e57600080fd5b80639298602414610483578063951dc22c1461048b57806399b71d5c146104a0578063a3f4df7e146104a8578063a923b2a6146104bd57600080fd5b8063456dc17a116101ea57806360a05a85116101ae57806360a05a85146104135780636719578c1461041b57806367f5e4b814610442578063709d039d146104555780637d7c2a1c1461046857806390d675141461047057600080fd5b8063456dc17a1461039857806348ccda3c146103ab5780634c36fad7146103c65780635f2475ca146103d95780635f9d4d2e1461040057600080fd5b806321fc6bb01161023c57806321fc6bb0146102fc57806329ba73ed1461031f5780632e1a7d4d146103465780634032b72b1461035957806342189c8f1461036c578063440d72481461037557600080fd5b80630181686c1461027957806314ae9f2e1461029557806316f0115b146102aa5780631aedeabe146102de5780631fc29c01146102e7575b600080fd5b610282600c5481565b6040519081526020015b60405180910390f35b6102a86102a3366004615347565b61060a565b005b6102d17f000000000000000000000000000000000000000000000000000000000000000081565b60405161028c9190615364565b61028260065481565b6102d1600080516020615b3483398151915281565b610304610725565b6040805193845260208401929092529082015260600161028c565b6102d17f000000000000000000000000000000000000000000000000000000000000000081565b6102a8610354366004615378565b6108ca565b6102a8610367366004615347565b61091b565b61028260045481565b610388610383366004615347565b610a27565b604051901515815260200161028c565b600e546102d1906001600160a01b031681565b6102d1737fc66500c84a76ad7e9c93437bfc5ac33e2ddae981565b6102a86103d4366004615347565b610a68565b6102d17f000000000000000000000000000000000000000000000000000000000000000081565b6009546102d1906001600160a01b031681565b610388610c1b565b6102d17f000000000000000000000000000000000000000000000000000000000000000081565b6102a8610450366004615378565b610c3e565b6003546102d1906001600160a01b031681565b6102a8610d8a565b600f546102d1906001600160a01b031681565b610388610e5d565b610493610f0a565b60405161028c91906153d5565b6102a8610f1b565b6104b0610f57565b60405161028c9190615414565b6102a86104cb366004615447565b610fe5565b6102a861121a565b6102d17f000000000000000000000000000000000000000000000000000000000000000081565b6002546102d1906001600160a01b031681565b61028260055481565b6102a8610529366004615347565b61123f565b6102a861053c366004615347565b61153a565b610282611703565b6102a8610557366004615347565b61193a565b610282600b5481565b610282611b59565b6102d17f000000000000000000000000000000000000000000000000000000000000000081565b6001546102d1906001600160a01b031681565b610388611b63565b600d546102d1906001600160a01b031681565b6102a86105d0366004615447565b611b7f565b6001546001600160a01b03166102d1565b6104b0604051806040016040528060058152602001640342e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561066357600080fd5b505afa158015610677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069b9190615469565b6001600160a01b0316336001600160a01b0316146106d45760405162461bcd60e51b81526004016106cb90615486565b60405180910390fd5b6106df600782611d60565b6107225760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b60448201526064016106cb565b50565b60405163091030c360e01b815260009081908190600080516020615b348339815191529063091030c39061075d903090600401615364565b60206040518083038186803b15801561077557600080fd5b505afa158015610789573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ad91906154bd565b9250600080516020615b348339815191526001600160a01b03166372b49d636040518163ffffffff1660e01b815260040160206040518083038186803b1580156107f657600080fd5b505afa15801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e91906154bd565b61083890846154ec565b9150600080516020615b348339815191526001600160a01b031663359c4a966040518163ffffffff1660e01b815260040160206040518083038186803b15801561088157600080fd5b505afa158015610895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b991906154bd565b6108c390836154ec565b9050909192565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146109125760405162461bcd60e51b81526004016106cb90615504565b61072281611d75565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561097457600080fd5b505afa158015610988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ac9190615469565b6001600160a01b0316336001600160a01b0316146109dc5760405162461bcd60e51b81526004016106cb90615486565b6109e7600782611d44565b6107225760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b60448201526064016106cb565b6000610a3282611da2565b80610a4a5750600f546001600160a01b038381169116145b80610a625750600e546001600160a01b038381169116145b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610ac157600080fd5b505afa158015610ad5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af99190615469565b6001600160a01b0316336001600160a01b031614610b295760405162461bcd60e51b81526004016106cb90615486565b6001600160a01b038116610b745760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b60448201526064016106cb565b6003546001600160a01b0382811691161415610bbf5760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b60448201526064016106cb565b6003546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000610c28610725565b9250509150610c378282611e26565b9250505090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9757600080fd5b505afa158015610cab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccf9190615469565b6001600160a01b0316336001600160a01b031614610cff5760405162461bcd60e51b81526004016106cb90615486565b612710811115610d4a5760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b60448201526064016106cb565b60065460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600655565b610d97335b600790611ec3565b610db35760405162461bcd60e51b81526004016106cb90615537565b6000806000610dc0611ee5565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b158015610e3857600080fd5b505af1158015610e4c573d6000803e3d6000fd5b50505050610e58612389565b505050565b604051639f2b283360e01b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b283390610eac903090600401615364565b60206040518083038186803b158015610ec457600080fd5b505afa158015610ed8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efc91906154bd565b610f04611703565b10905090565b6060610f166007612503565b905090565b610f2433610d8f565b610f405760405162461bcd60e51b81526004016106cb90615537565b610f4a6000612510565b610f55600019612510565b565b600a8054610f6490615567565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9090615567565b8015610fdd5780601f10610fb257610100808354040283529160200191610fdd565b820191906000526020600020905b815481529060010190602001808311610fc057829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561103e57600080fd5b505afa158015611052573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110769190615469565b6001600160a01b0316336001600160a01b0316146110a65760405162461bcd60e51b81526004016106cb90615486565b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b1580156110f457600080fd5b505afa158015611108573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112c91906154bd565b81106111715760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b60448201526064016106cb565b8161117c5760045491505b603b82116111c45760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b60448201526064016106cb565b6004546005546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600491909155600555565b61122333610d8f565b610f555760405162461bcd60e51b81526004016106cb90615537565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146112875760405162461bcd60e51b81526004016106cb90615504565b6001600160a01b0381166112dd5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f0000000060448201526064016106cb565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561134057600080fd5b505afa158015611354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113789190615469565b6001600160a01b0316146113c75760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b60448201526064016106cb565b6113d0816126a1565b6001546040516370a0823160e01b81526114699183916001600160a01b03909116906370a0823190611406903090600401615364565b60206040518083038186803b15801561141e57600080fd5b505afa158015611432573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145691906154bd565b6001546001600160a01b0316919061280f565b610722817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016114b99190615364565b60206040518083038186803b1580156114d157600080fd5b505afa1580156114e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150991906154bd565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061280f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561159357600080fd5b505afa1580156115a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cb9190615469565b6001600160a01b0316336001600160a01b0316146115fb5760405162461bcd60e51b81526004016106cb90615486565b6001600160a01b0381166116515760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f00000060448201526064016106cb565b6002546001600160a01b03828116911614156116a75760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b60448201526064016106cb565b6002546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638bc6beb26040518163ffffffff1660e01b815260040160206040518083038186803b15801561176157600080fd5b505afa158015611775573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117999190615469565b90506001600160a01b038116156119275760405163402914f560e01b81526000906001600160a01b0383169063402914f5906117d9903090600401615364565b60006040518083038186803b1580156117f157600080fd5b505afa158015611805573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261182d91908101906156dc565b91505060008160008151811061184557611845615740565b602002602001015190508060001461192457600354604051631d1f307960e31b81526001600160a01b039091169063e8f983c8906118cb907f0000000000000000000000000000000000000000000000000000000000000000907f0000000000000000000000000000000000000000000000000000000000000000908690600401615756565b60006040518083038186803b1580156118e357600080fd5b505afa1580156118f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261191f919081019061577a565b509450505b50505b81611930612865565b610c3791906154ec565b61194333610d8f565b61195f5760405162461bcd60e51b81526004016106cb90615537565b6002546001600160a01b03166119af5760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b60448201526064016106cb565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415611a315760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c0060448201526064016106cb565b611a3a81610a27565b15611a7e5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b60448201526064016106cb565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611ab957600254610722906001600160a01b031647612beb565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190611ae8903090600401615364565b60206040518083038186803b158015611b0057600080fd5b505afa158015611b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3891906154bd565b600254909150611b55906001600160a01b0384811691168361280f565b5050565b6000610f16611703565b6000806000611b70610725565b9250925050610c378282612d04565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611bd857600080fd5b505afa158015611bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c109190615469565b6001600160a01b0316336001600160a01b031614611c405760405162461bcd60e51b81526004016106cb90615486565b6127108110611c8c5760405162461bcd60e51b81526020600482015260186024820152771a5b9d985b1a590b5b585e0b589bdc9c9bddcb5b1a5b5a5d60421b60448201526064016106cb565b80158015611c98575081155b80611ca257508181115b611cee5760405162461bcd60e51b815260206004820152601d60248201527f6d61782d73686f756c642d62652d6869676865722d7468616e2d6d696e00000060448201526064016106cb565b600b54600c546040805192835260208301859052820152606081018290527fedd77444afdf63401315e81ffe86d08f7865796e8ad2e11acf1d56a1393f07d59060800160405180910390a1600b91909155600c55565b6000611d59836001600160a01b038416612d19565b9392505050565b6000611d59836001600160a01b038416612d68565b6107227f000000000000000000000000000000000000000000000000000000000000000061150983612e5b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480611e0057506001600160a01b038216737fc66500c84a76ad7e9c93437bfc5ac33e2ddae9145b80610a6257506001600160a01b038216600080516020615b348339815191521492915050565b6040516370a0823160e01b8152600090600080516020615b34833981519152906370a0823190611e5a903090600401615364565b60206040518083038186803b158015611e7257600080fd5b505afa158015611e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eaa91906154bd565b15801590611d595750821580611d595750504211919050565b6001600160a01b03811660009081526001830160205260408120541515611d59565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b8152600401611f379190615364565b60206040518083038186803b158015611f4f57600080fd5b505afa158015611f63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8791906154bd565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b8152600401611fd79190615364565b60206040518083038186803b158015611fef57600080fd5b505afa158015612003573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202791906154bd565b90506120527f0000000000000000000000000000000000000000000000000000000000000000612fd5565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906120a1903090600401615364565b60206040518083038186803b1580156120b957600080fd5b505afa1580156120cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f191906154bd565b600f546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190612127903090600401615364565b60206040518083038186803b15801561213f57600080fd5b505afa158015612153573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217791906154bd565b905060006121836131b4565b9050818111156121a45761219f61219a83836157ca565b61338a565b6121b6565b6121b66121b182846157ca565b613459565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612205903090600401615364565b60206040518083038186803b15801561221d57600080fd5b505afa158015612231573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225591906154bd565b9050600061226382866154ec565b90508581111561227e5761227786826157ca565b995061228b565b61228881876157ca565b98505b6000612297888c6154ec565b9050808310156123695760006122b66122b085846157ca565b886136e3565b90508015612367576122c781612e5b565b506040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612314903090600401615364565b60206040518083038186803b15801561232c57600080fd5b505afa158015612340573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236491906154bd565b93505b505b871561237c5761237983896136e3565b98505b5050505050505050909192565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906123d8903090600401615364565b60206040518083038186803b1580156123f057600080fd5b505afa158015612404573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242891906154bd565b90506000806124388360006136f9565b909250905080156124f15761244c81613d61565b6040516370a0823160e01b8152610e58906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061249c903090600401615364565b60206040518083038186803b1580156124b457600080fd5b505afa1580156124c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ec91906154bd565b613e05565b6124fa83613e05565b610e5882613e2f565b60606000611d5983613ed9565b61251981613f35565b600e54612550906001600160a01b03167f0000000000000000000000000000000000000000000000000000000000000000836142db565b60005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b1580156125a157600080fd5b505afa1580156125b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d991906154bd565b811015611b5557600354604051636e74a6f760e01b81526004810183905261268f916001600160a01b031690636e74a6f79060240160206040518083038186803b15801561262657600080fd5b505afa15801561263a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265e9190615469565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690846142db565b80612699816157e1565b915050612553565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561270457600080fd5b505afa158015612718573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273c9190615469565b6001600160a01b0316146127885760405162461bcd60e51b81526020600482015260136024820152723bb937b73396b932b1b2b4b83a16ba37b5b2b760691b60448201526064016106cb565b600f546040516370a0823160e01b8152610722916001600160a01b0316906370a08231906127ba903090600401615364565b60206040518083038186803b1580156127d257600080fd5b505afa1580156127e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280a91906154bd565b613d61565b610e588363a9059cbb60e01b848460405160240161282e9291906157fc565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526143ee565b6000806128706144c0565b90506000811561292b57600354600d54604051631d1f307960e31b81526001600160a01b039283169263e8f983c8926128d2929116907f0000000000000000000000000000000000000000000000000000000000000000908790600401615756565b60006040518083038186803b1580156128ea57600080fd5b505afa1580156128fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612926919081019061577a565b509150505b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061297a903090600401615364565b60206040518083038186803b15801561299257600080fd5b505afa1580156129a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ca91906154bd565b600f546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190612a00903090600401615364565b60206040518083038186803b158015612a1857600080fd5b505afa158015612a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5091906154bd565b90506000612a5c6131b4565b9050600081831115612b2457600354600e546001600160a01b039182169163f4de46f6917f00000000000000000000000000000000000000000000000000000000000000009116612aad86886157ca565b6040518463ffffffff1660e01b8152600401612acb93929190615756565b60006040518083038186803b158015612ae357600080fd5b505afa158015612af7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b1f919081019061577a565b509150505b80847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612b729190615364565b60206040518083038186803b158015612b8a57600080fd5b505afa158015612b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc291906154bd565b612bcc90886154ec565b612bd691906154ec565b612be091906157ca565b965050505050505090565b80471015612c3b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016106cb565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612c88576040519150601f19603f3d011682016040523d82523d6000602084013e612c8d565b606091505b5050905080610e585760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016106cb565b60008242118015611d59575050421115919050565b6000818152600183016020526040812054612d6057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a62565b506000610a62565b60008181526001830160205260408120548015612e51576000612d8c6001836157ca565b8554909150600090612da0906001906157ca565b9050818114612e05576000866000018281548110612dc057612dc0615740565b9060005260206000200154905080876000018481548110612de357612de3615740565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612e1657612e16615815565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610a62565b6000915050610a62565b600080612e696000846136f9565b9150508015612e7b57612e7b81613d61565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612eca903090600401615364565b60206040518083038186803b158015612ee257600080fd5b505afa158015612ef6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f1a91906154bd565b9050612f25846146a7565b6040516370a0823160e01b815281906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612f73903090600401615364565b60206040518083038186803b158015612f8b57600080fd5b505afa158015612f9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc391906154bd565b612fcd91906157ca565b949350505050565b612fde816146d2565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638bc6beb26040518163ffffffff1660e01b815260040160206040518083038186803b15801561303957600080fd5b505afa15801561304d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130719190615469565b90506001600160a01b03811615611b555760405163d279c19160e01b81526001600160a01b0382169063d279c191906130ae903090600401615364565b600060405180830381600087803b1580156130c857600080fd5b505af11580156130dc573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691506370a082319061312f903090600401615364565b60206040518083038186803b15801561314757600080fd5b505afa15801561315b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061317f91906154bd565b90508015610e5857610e587f0000000000000000000000000000000000000000000000000000000000000000848360016146f9565b6000670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161320b9190615364565b60206040518083038186803b15801561322357600080fd5b505afa158015613237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061325b91906154bd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b1580156132b457600080fd5b505afa1580156132c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ec91906154bd565b6132f6919061582b565b613300919061584a565b600e546040516370a0823160e01b81526001600160a01b03909116906370a0823190613330903090600401615364565b60206040518083038186803b15801561334857600080fd5b505afa15801561335c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061338091906154bd565b610f1691906154ec565b801561072257613399816148cf565b600e546040516370a0823160e01b81526000916001600160a01b0316906370a08231906133ca903090600401615364565b60206040518083038186803b1580156133e257600080fd5b505afa1580156133f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061341a91906154bd565b90508015611b5557600e54611b55906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083614af4565b600354600e54604051637a6f237b60e11b8152600092839283926001600160a01b039283169263f4de46f6926134b9927f000000000000000000000000000000000000000000000000000000000000000092909116908990600401615756565b60006040518083038186803b1580156134d157600080fd5b505afa1580156134e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261350d919081019061577a565b9194509250905081156136dd576040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613569903090600401615364565b60206040518083038186803b15801561358157600080fd5b505afa158015613595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135b991906154bd565b9050808311156135d5576135d56135d082856157ca565b6146a7565b600354604051636e74a6f760e01b8152600481018490526001600160a01b0390911690636e74a6f79060240160206040518083038186803b15801561361957600080fd5b505afa15801561362d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136519190615469565b6001600160a01b0316638803dbee86858730426040518663ffffffff1660e01b815260040161368495949392919061586c565b600060405180830381600087803b15801561369e57600080fd5b505af11580156136b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136da91908101906158a8565b50505b50505050565b60008183106136f25781611d59565b5090919050565b600080831580613707575082155b6137475760405162461bcd60e51b8152602060048201526011602482015270616c6c2d696e7075742d67742d7a65726f60781b60448201526064016106cb565b600f546040516370a0823160e01b81526000916001600160a01b0316906370a0823190613778903090600401615364565b60206040518083038186803b15801561379057600080fd5b505afa1580156137a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c891906154bd565b9050600c54600014156137e057600092509050613d5a565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061382f903090600401615364565b60206040518083038186803b15801561384757600080fd5b505afa15801561385b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061387f91906154bd565b905060008087116138a7578582116138985760006138b1565b6138a286836157ca565b6138b1565b6138b187836154ec565b9050806138c75760008394509450505050613d5a565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561392257600080fd5b505afa158015613936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061395a9190615469565b600e5460405163b3596f0760e01b81529192506000916001600160a01b038085169263b3596f07926139929290911690600401615364565b60206040518083038186803b1580156139aa57600080fd5b505afa1580156139be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139e291906154bd565b90506000826001600160a01b031663b3596f077f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401613a329190615364565b60206040518083038186803b158015613a4a57600080fd5b505afa158015613a5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a8291906154bd565b9050811580613a8f575080155b15613aa65760008697509750505050505050613d5a565b600954604051633e15014160e01b81526000916001600160a01b031690633e15014190613af7907f000000000000000000000000000000000000000000000000000000000000000090600401615364565b6101406040518083038186803b158015613b1057600080fd5b505afa158015613b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b4891906158f2565b505050505050505091505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015613bae57600080fd5b505afa158015613bc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613be69190615989565b613bf190600a615a90565b613bfd9061271061582b565b83613c08848961582b565b613c12919061582b565b613c1c919061584a565b9050600084600e60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015613c6f57600080fd5b505afa158015613c83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ca79190615989565b613cb290600a615a90565b613cbc908461582b565b613cc6919061584a565b905080613ce2576000899a509a50505050505050505050613d5a565b6000612710600c5483613cf5919061582b565b613cff919061584a565b90506000612710600b5484613d14919061582b565b613d1e919061584a565b9050818b1115613d3957613d32818c6157ca565b9b50613d4e565b8a811115613d4e57613d4b8b826157ca565b9c505b50505050505050505050505b9250929050565b6000613d6c82614bc5565b90508015611b5557600e5460405163573ade8160e01b81526001600160a01b03918216600482015260248101839052600260448201523060648201527f00000000000000000000000000000000000000000000000000000000000000009091169063573ade81906084015b600060405180830381600087803b158015613df157600080fd5b505af11580156136da573d6000803e3d6000fd5b6107227f000000000000000000000000000000000000000000000000000000000000000082614c50565b801561072257600e5460405163a415bcad60e01b81526001600160a01b0391821660048201526024810183905260026044820152600060648201523060848201527f00000000000000000000000000000000000000000000000000000000000000009091169063a415bcad9060a401600060405180830381600087803b158015613eb857600080fd5b505af1158015613ecc573d6000803e3d6000fd5b5050505061072281614cb8565b606081600001805480602002602001604051908101604052809291908181526020018280548015613f2957602002820191906000526020600020905b815481526020019060010190808311613f15575b50505050509050919050565b613f896001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836142db565b613fdd6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836142db565b6140316001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836142db565b600e54614068906001600160a01b03167f0000000000000000000000000000000000000000000000000000000000000000836142db565b60005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b1580156140b957600080fd5b505afa1580156140cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140f191906154bd565b811015611b5557600354604051636e74a6f760e01b8152600481018390526141a7916001600160a01b031690636e74a6f79060240160206040518083038186803b15801561413e57600080fd5b505afa158015614152573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141769190615469565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690846142db565b600354604051636e74a6f760e01b815260048101839052614238916001600160a01b031690636e74a6f79060240160206040518083038186803b1580156141ed57600080fd5b505afa158015614201573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142259190615469565b600d546001600160a01b031690846142db565b600354604051636e74a6f760e01b8152600481018390526142c9916001600160a01b031690636e74a6f79060240160206040518083038186803b15801561427e57600080fd5b505afa158015614292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142b69190615469565b600e546001600160a01b031690846142db565b806142d3816157e1565b91505061406b565b8015806143645750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561432a57600080fd5b505afa15801561433e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061436291906154bd565b155b6143cf5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016106cb565b610e588363095ea7b360e01b848460405160240161282e9291906157fc565b6000614443826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614d359092919063ffffffff16565b805190915015610e5857808060200190518101906144619190615a9f565b610e585760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106cb565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166144f65750600090565b6040516346df7f7160e11b8152600080516020615b3483398151915290638dbefee290614527903090600401615364565b60206040518083038186803b15801561453f57600080fd5b505afa158015614553573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061457791906154bd565b6040516370a0823160e01b8152600080516020615b34833981519152906370a08231906145a8903090600401615364565b60206040518083038186803b1580156145c057600080fd5b505afa1580156145d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145f891906154bd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638b599f2661462f614d44565b306040518363ffffffff1660e01b815260040161464d929190615aba565b60206040518083038186803b15801561466557600080fd5b505afa158015614679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061469d91906154bd565b61338091906154ec565b611b557f00000000000000000000000000000000000000000000000000000000000000003083614dbb565b60006146dc614eb4565b90508015611b5557600d54611b55906001600160a01b0316838360015b826001600160a01b0316846001600160a01b03161415614718576136dd565b600354604051631d1f307960e31b8152600091829182916001600160a01b03169063e8f983c890614751908a908a908a90600401615756565b60006040518083038186803b15801561476957600080fd5b505afa15801561477d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526147a5919081019061577a565b92509250925083600014156147b957600193505b81156148c657600354604051636e74a6f760e01b8152600481018390526001600160a01b0390911690636e74a6f79060240160206040518083038186803b15801561480357600080fd5b505afa158015614817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061483b9190615469565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b815260040161486e95949392919061586c565b600060405180830381600087803b15801561488857600080fd5b505af115801561489c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526148c491908101906158a8565b505b50505050505050565b80156107225760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b15801561493057600080fd5b505afa158015614944573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061496891906154bd565b905060008161497f84670de0b6b3a764000061582b565b614989919061584a565b9050670de0b6b3a764000061499e838361582b565b6149a8919061584a565b83116149b457806149bf565b6149bf8160016154ec565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401614a0f9190615364565b60206040518083038186803b158015614a2757600080fd5b505afa158015614a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a5f91906154bd565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d82841180614a9c575083155b614aa65783614aa8565b825b6040518263ffffffff1660e01b8152600401614ac691815260200190565b600060405180830381600087803b158015614ae057600080fd5b505af11580156148c4573d6000803e3d6000fd5b60006006546127101415614b09576001614bb7565b6040516358fac00360e01b81526001600160a01b0380861660048301526024820184905284166044820152610e106064820152614bb790730f1f5a87f99f0918e6c81f16e59f3518698221ff906358fac0039060840160206040518083038186803b158015614b7757600080fd5b505afa158015614b8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614baf91906154bd565b6006546151ae565b90506136dd848484846146f9565b6000614bd0826148cf565b600e546040516370a0823160e01b81526001600160a01b03909116906370a0823190614c00903090600401615364565b60206040518083038186803b158015614c1857600080fd5b505afa158015614c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6291906154bd565b8015611b555760405163e8eda9df60e01b81526001600160a01b03838116600483015260248201839052306044830152600060648301527f0000000000000000000000000000000000000000000000000000000000000000169063e8eda9df90608401613dd7565b60405163b6b55f2560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f2590602401600060405180830381600087803b158015614d1a57600080fd5b505af1158015614d2e573d6000803e3d6000fd5b5050505050565b6060612fcd84846000856151d1565b60408051600180825281830190925260609160009190602080830190803683370190505090507f000000000000000000000000000000000000000000000000000000000000000081600081518110614d9e57614d9e615740565b6001600160a01b0390921660209283029190910190910152919050565b60008115614ead57604051631a4ca37b60e21b81526001600160a01b03858116600483015260248201849052848116604483015283917f0000000000000000000000000000000000000000000000000000000000000000909116906369328dec90606401602060405180830381600087803b158015614e3957600080fd5b505af1158015614e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e7191906154bd565b1460405180604001604052806002815260200161323960f01b81525090614eab5760405162461bcd60e51b81526004016106cb9190615414565b505b5092915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316614eea5750600090565b6000806000614ef7610725565b9250925092508260001480614f0b57508042115b15614fbd577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633111e7b3614f47614d44565b600019306040518463ffffffff1660e01b8152600401614f6993929190615ae4565b602060405180830381600087803b158015614f8357600080fd5b505af1158015614f97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614fbb91906154bd565b505b614fc5610725565b91945092509050614fd68282612d04565b15615047576040516301e9a69560e41b8152600080516020615b3483398151915290631e9a695090615010903090600019906004016157fc565b600060405180830381600087803b15801561502a57600080fd5b505af115801561503e573d6000803e3d6000fd5b505050506150b8565b6150518382611e26565b156150b857600080516020615b348339815191526001600160a01b031663787a08a66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561509f57600080fd5b505af11580156150b3573d6000803e3d6000fd5b505050505b6040516309a99b4f60e41b8152600080516020615b3483398151915290639a99b4f0906150ed903090600019906004016157fc565b600060405180830381600087803b15801561510757600080fd5b505af115801561511b573d6000803e3d6000fd5b50506040516370a0823160e01b8152737fc66500c84a76ad7e9c93437bfc5ac33e2ddae992506370a082319150615156903090600401615364565b60206040518083038186803b15801561516e57600080fd5b505afa158015615182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906151a691906154bd565b935050505090565b60006127106151bd83826157ca565b6151c7908561582b565b611d59919061584a565b6060824710156152325760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106cb565b843b6152805760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106cb565b600080866001600160a01b0316858760405161529c9190615b17565b60006040518083038185875af1925050503d80600081146152d9576040519150601f19603f3d011682016040523d82523d6000602084013e6152de565b606091505b50915091506152ee8282866152f9565b979650505050505050565b60608315615308575081611d59565b8251156153185782518084602001fd5b8160405162461bcd60e51b81526004016106cb9190615414565b6001600160a01b038116811461072257600080fd5b60006020828403121561535957600080fd5b8135611d5981615332565b6001600160a01b0391909116815260200190565b60006020828403121561538a57600080fd5b5035919050565b600081518084526020808501945080840160005b838110156153ca5781516001600160a01b0316875295820195908201906001016153a5565b509495945050505050565b602081526000611d596020830184615391565b60005b838110156154035781810151838201526020016153eb565b838111156136dd5750506000910152565b60208152600082518060208401526154338160408501602087016153e8565b601f01601f19169190910160400192915050565b6000806040838503121561545a57600080fd5b50508035926020909101359150565b60006020828403121561547b57600080fd5b8151611d5981615332565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b6000602082840312156154cf57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156154ff576154ff6154d6565b500190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b600181811c9082168061557b57607f821691505b6020821081141561559c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156155e1576155e16155a2565b604052919050565b600067ffffffffffffffff821115615603576156036155a2565b5060051b60200190565b600082601f83011261561e57600080fd5b8151602061563361562e836155e9565b6155b8565b82815260059290921b8401810191818101908684111561565257600080fd5b8286015b8481101561567657805161566981615332565b8352918301918301615656565b509695505050505050565b600082601f83011261569257600080fd5b815160206156a261562e836155e9565b82815260059290921b840181019181810190868411156156c157600080fd5b8286015b8481101561567657805183529183019183016156c5565b600080604083850312156156ef57600080fd5b825167ffffffffffffffff8082111561570757600080fd5b6157138683870161560d565b9350602085015191508082111561572957600080fd5b5061573685828601615681565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b60008060006060848603121561578f57600080fd5b835167ffffffffffffffff8111156157a657600080fd5b6157b28682870161560d565b93505060208401519150604084015190509250925092565b6000828210156157dc576157dc6154d6565b500390565b60006000198214156157f5576157f56154d6565b5060010190565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052603160045260246000fd5b6000816000190483118215151615615845576158456154d6565b500290565b60008261586757634e487b7160e01b600052601260045260246000fd5b500490565b85815284602082015260a06040820152600061588b60a0830186615391565b6001600160a01b0394909416606083015250608001529392505050565b6000602082840312156158ba57600080fd5b815167ffffffffffffffff8111156158d157600080fd5b612fcd84828501615681565b805180151581146158ed57600080fd5b919050565b6000806000806000806000806000806101408b8d03121561591257600080fd5b8a51995060208b0151985060408b0151975060608b0151965060808b0151955061593e60a08c016158dd565b945061594c60c08c016158dd565b935061595a60e08c016158dd565b92506159696101008c016158dd565b91506159786101208c016158dd565b90509295989b9194979a5092959850565b60006020828403121561599b57600080fd5b815160ff81168114611d5957600080fd5b600181815b808511156159e75781600019048211156159cd576159cd6154d6565b808516156159da57918102915b93841c93908002906159b1565b509250929050565b6000826159fe57506001610a62565b81615a0b57506000610a62565b8160018114615a215760028114615a2b57615a47565b6001915050610a62565b60ff841115615a3c57615a3c6154d6565b50506001821b610a62565b5060208310610133831016604e8410600b8410161715615a6a575081810a610a62565b615a7483836159ac565b8060001904821115615a8857615a886154d6565b029392505050565b6000611d5960ff8416836159ef565b600060208284031215615ab157600080fd5b611d59826158dd565b604081526000615acd6040830185615391565b905060018060a01b03831660208301529392505050565b606081526000615af76060830186615391565b6020830194909452506001600160a01b0391909116604090910152919050565b60008251615b298184602087016153e8565b919091019291505056fe0000000000000000000000004da27a545c0c5b758a6ba100e3a049001de870f5a2646970667358221220ae3c0066df0a9989595b7728521c7c35c39084a219942c4cbeba200362eebcc864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken()": {
        "details": "Approve all required tokens"
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "details": "Rebalance profit, loss and investment of this strategy"
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "sweepERC20(address)": {
        "details": "sweep given token to feeCollector of strategy",
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "totalValueCurrent()": {
        "details": "Report total value in collateral token"
      },
      "updateBorrowLimit(uint256,uint256)": {
        "details": "It is possible to set _maxBorrowLimit and _minBorrowLimit as 0 to not borrow anything",
        "params": {
          "_maxBorrowLimit": "It is % of actual collateral factor of protocol",
          "_minBorrowLimit": "It is % of actual collateral factor of protocol"
        }
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapManager(address)": {
        "params": {
          "_swapManager": "swap manager address"
        }
      },
      "withdraw(uint256)": {
        "details": "Withdraw collateral token from lending pool.",
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "title": "Deposit Collateral in Aave and earn interest by depositing borrowed token in a Vesper Pool.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "canStartCooldown()": {
        "notice": "Returns true if we should start cooldown"
      },
      "canUnstake()": {
        "notice": "Returns true if Aave can be unstaked"
      },
      "cooldownData()": {
        "notice": "Return cooldown related timestamps"
      },
      "isLossMaking()": {
        "notice": "Calculate current position using claimed rewardToken and current borrow."
      },
      "isReservedToken(address)": {
        "notice": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "token()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "totalValue()": {
        "notice": "Calculate total value using rewardToken accrued, supply and borrow position"
      },
      "totalValueCurrent()": {
        "notice": "Calculate total value of asset under management (in real-time)"
      },
      "updateBorrowLimit(uint256,uint256)": {
        "notice": "Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol."
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapManager(address)": {
        "notice": "Update swap manager address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13972,
        "contract": "contracts/strategies/aave/VesperAaveXYStrategy.sol:VesperAaveXYStrategy",
        "label": "WETH",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13977,
        "contract": "contracts/strategies/aave/VesperAaveXYStrategy.sol:VesperAaveXYStrategy",
        "label": "receiptToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 13983,
        "contract": "contracts/strategies/aave/VesperAaveXYStrategy.sol:VesperAaveXYStrategy",
        "label": "feeCollector",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 13986,
        "contract": "contracts/strategies/aave/VesperAaveXYStrategy.sol:VesperAaveXYStrategy",
        "label": "swapManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISwapManager)5729"
      },
      {
        "astId": 13989,
        "contract": "contracts/strategies/aave/VesperAaveXYStrategy.sol:VesperAaveXYStrategy",
        "label": "oraclePeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 13992,
        "contract": "contracts/strategies/aave/VesperAaveXYStrategy.sol:VesperAaveXYStrategy",
        "label": "oracleRouterIdx",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 13995,
        "contract": "contracts/strategies/aave/VesperAaveXYStrategy.sol:VesperAaveXYStrategy",
        "label": "swapSlippage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 13998,
        "contract": "contracts/strategies/aave/VesperAaveXYStrategy.sol:VesperAaveXYStrategy",
        "label": "_keepers",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(AddressSet)4634_storage"
      },
      {
        "astId": 15015,
        "contract": "contracts/strategies/aave/VesperAaveXYStrategy.sol:VesperAaveXYStrategy",
        "label": "aaveProtocolDataProvider",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(AaveProtocolDataProvider)5150"
      },
      {
        "astId": 17876,
        "contract": "contracts/strategies/aave/VesperAaveXYStrategy.sol:VesperAaveXYStrategy",
        "label": "NAME",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 17885,
        "contract": "contracts/strategies/aave/VesperAaveXYStrategy.sol:VesperAaveXYStrategy",
        "label": "minBorrowLimit",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 17888,
        "contract": "contracts/strategies/aave/VesperAaveXYStrategy.sol:VesperAaveXYStrategy",
        "label": "maxBorrowLimit",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 17899,
        "contract": "contracts/strategies/aave/VesperAaveXYStrategy.sol:VesperAaveXYStrategy",
        "label": "rewardToken",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 17901,
        "contract": "contracts/strategies/aave/VesperAaveXYStrategy.sol:VesperAaveXYStrategy",
        "label": "borrowToken",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 17904,
        "contract": "contracts/strategies/aave/VesperAaveXYStrategy.sol:VesperAaveXYStrategy",
        "label": "vdToken",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(AToken)4981"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AToken)4981": {
        "encoding": "inplace",
        "label": "contract AToken",
        "numberOfBytes": "20"
      },
      "t_contract(AaveProtocolDataProvider)5150": {
        "encoding": "inplace",
        "label": "contract AaveProtocolDataProvider",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapManager)5729": {
        "encoding": "inplace",
        "label": "contract ISwapManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)4634_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4633,
            "contract": "contracts/strategies/aave/VesperAaveXYStrategy.sol:VesperAaveXYStrategy",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4333_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4333_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4328,
            "contract": "contracts/strategies/aave/VesperAaveXYStrategy.sol:VesperAaveXYStrategy",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4332,
            "contract": "contracts/strategies/aave/VesperAaveXYStrategy.sol:VesperAaveXYStrategy",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}