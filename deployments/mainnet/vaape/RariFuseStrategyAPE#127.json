{
  "address": "0xb436d8a2e3e23aF57040B2dA8E01463c818e0999",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fusePoolId",
          "type": "uint256"
        },
        {
          "internalType": "contract IFusePoolDirectory",
          "name": "_fusePoolDirectory",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newFusePoolId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldCToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newCToken",
          "type": "address"
        }
      ],
      "name": "FusePoolChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRouterIdx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "UpdatedOracleConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousSwapManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSwapManager",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSwapSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "UpdatedSwapSlippage",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COMPTROLLER",
      "outputs": [
        {
          "internalType": "contract Comptroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fusePoolDirectory",
      "outputs": [
        {
          "internalType": "contract IFusePoolDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fusePoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPoolId",
          "type": "uint256"
        }
      ],
      "name": "migrateFusePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oraclePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleRouterIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDistributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setupOracles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapManager",
      "outputs": [
        {
          "internalType": "contract ISwapManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValueCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "updateOracleConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "name": "updateSwapManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "updateSwapSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf598b2704c561e0c2b5f96209b0bfa7285920f61650ef2f128f7fe0050380ff8",
  "receipt": {
    "to": null,
    "from": "0x1CbfaE0367a9B1e4Ac2c158E57B5F00cCb337271",
    "contractAddress": "0xb436d8a2e3e23aF57040B2dA8E01463c818e0999",
    "transactionIndex": 59,
    "gasUsed": "4038338",
    "logsBloom": "0x
    "blockHash": "0x4ae3c29c8dbee4f3e52214a428ddc7438f6d13b578063afa4bb576798460de33",
    "transactionHash": "0xf598b2704c561e0c2b5f96209b0bfa7285920f61650ef2f128f7fe0050380ff8",
    "logs": [],
    "blockNumber": 14476956,
    "cumulativeGasUsed": "7615380",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA5Bc6eB0A7E6738e2F2Ac6c92280b32771aC52Ad",
    "0xe382d9f2394A359B01006faa8A1864b8a60d2710",
    127,
    "0x835482FE0532f169024d5E9410199369aAD5C77E",
    "RariFuseStrategyAPE"
  ],
  "solcInputHash": "1fcc9d6bba2e02812b6c126ef0fdf444",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fusePoolId\",\"type\":\"uint256\"},{\"internalType\":\"contract IFusePoolDirectory\",\"name\":\"_fusePoolDirectory\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newFusePoolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCToken\",\"type\":\"address\"}],\"name\":\"FusePoolChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRouterIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"UpdatedOracleConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"UpdatedSwapManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdatedSwapSlippage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COMPTROLLER\",\"outputs\":[{\"internalType\":\"contract Comptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fusePoolDirectory\",\"outputs\":[{\"internalType\":\"contract IFusePoolDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fusePoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPoolId\",\"type\":\"uint256\"}],\"name\":\"migrateFusePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRouterIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"updateOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"updateSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken()\":{\"details\":\"Approve all required tokens\"},\"claimRewards()\":{\"details\":\"Manually claim rewards from rewardDistributor by keeper\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"migrateFusePool(uint256)\":{\"details\":\"Redeems cTokens from current fuse pool and mints cTokens of new Fuse Pool\",\"params\":{\"_newPoolId\":\"Fuse Pool ID\"}},\"rebalance()\":{\"details\":\"Rebalance profit, loss and investment of this strategy\"},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"sweepERC20(address)\":{\"details\":\"sweep given token to feeCollector of strategy\",\"params\":{\"_fromToken\":\"token address to sweep\"}},\"totalValue()\":{\"details\":\"Report total value in collateral token\"},\"totalValueCurrent()\":{\"details\":\"Report total value in collateral token\"},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapManager(address)\":{\"params\":{\"_swapManager\":\"swap manager address\"}},\"withdraw(uint256)\":{\"details\":\"Withdraw collateral token from lending pool.\",\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"title\":\"This strategy will deposit collateral token in a Rari Fuse Pool and earn interest.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"claimRewards()\":{\"notice\":\"Properly tests if reward claim works\"},\"isReservedToken(address)\":{\"notice\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"migrateFusePool(uint256)\":{\"notice\":\"Changes the underlying Fuse Pool to a new one\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"token()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"totalValue()\":{\"notice\":\"Calculate total value using underlying token\"},\"totalValueCurrent()\":{\"notice\":\"Calculate total value of asset under management (in real-time)\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapManager(address)\":{\"notice\":\"Update swap manager address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/rari-fuse/RariFuseStrategyAPE.sol\":\"RariFuseStrategyAPE\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/interfaces/aave/IAave.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface AaveLendingPoolAddressesProvider {\\n    function getLendingPool() external view returns (address);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n}\\n\\ninterface AToken is IERC20 {\\n    /**\\n     * @dev Returns the address of the incentives controller contract\\n     **/\\n    function getIncentivesController() external view returns (address);\\n\\n    function mint(\\n        address user,\\n        uint256 amount,\\n        uint256 index\\n    ) external returns (bool);\\n\\n    function burn(\\n        address user,\\n        address receiverOfUnderlying,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n}\\n\\ninterface AaveIncentivesController {\\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n}\\n\\ninterface AaveLendingPool {\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) external;\\n}\\n\\ninterface AaveProtocolDataProvider {\\n    function getReserveTokensAddresses(address asset)\\n        external\\n        view\\n        returns (\\n            address aTokenAddress,\\n            address stableDebtTokenAddress,\\n            address variableDebtTokenAddress\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n\\n    function getReserveConfigurationData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n}\\n\\n//solhint-disable func-name-mixedcase\\ninterface StakedAave is IERC20 {\\n    function claimRewards(address to, uint256 amount) external;\\n\\n    function cooldown() external;\\n\\n    function stake(address onBehalfOf, uint256 amount) external;\\n\\n    function redeem(address to, uint256 amount) external;\\n\\n    function getTotalRewardsBalance(address staker) external view returns (uint256);\\n\\n    function stakersCooldowns(address staker) external view returns (uint256);\\n\\n    function COOLDOWN_SECONDS() external view returns (uint256);\\n\\n    function UNSTAKE_WINDOW() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x269fd41e145c65968ac99d4e8945f2612e2402d52b0e461c7988a9f908dbf16c\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/* solhint-disable func-name-mixedcase */\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\ninterface ISwapManager {\\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\\n\\n    function N_DEX() external view returns (uint256);\\n\\n    function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\\n\\n    function bestOutputFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountOut,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function bestInputFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountIn,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function safeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function safeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function comparePathsFixedInput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function comparePathsFixedOutput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function oracleCount() external view returns (uint256);\\n\\n    function oracleAt(uint256 idx) external view returns (address);\\n\\n    function getOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function createOrUpdateOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external returns (address oracleAddr);\\n\\n    function consultForFree(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\\n\\n    /// get the data we want and pay the gas to update\\n    function consult(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    )\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint256 lastUpdatedAt,\\n            bool updated\\n        );\\n\\n    function updateOracles() external returns (uint256 updated, uint256 expected);\\n\\n    function updateOracles(address[] memory _oracleAddrs) external returns (uint256 updated, uint256 expected);\\n}\\n\",\"keccak256\":\"0xecabd02fb6346f19bcc4c493a923a269a69dff8b56078d1f1fe3935b58d8a71d\",\"license\":\"MIT\"},\"contracts/interfaces/compound/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface CToken {\\n    function accrueInterest() external returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function mint() external payable; // For ETH\\n\\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function repayBorrow() external payable; // For ETH\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256); // For ERC20\\n\\n    function transfer(address user, uint256 amount) external returns (bool);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function transferFrom(\\n        address owner,\\n        address user,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function underlying() external view returns (address);\\n}\\n\\ninterface Comptroller {\\n    function claimComp(address holder, address[] memory) external;\\n\\n    function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    function compAccrued(address holder) external view returns (uint256);\\n\\n    function getAccountLiquidity(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function markets(address market)\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isCompted\\n        );\\n}\\n\",\"keccak256\":\"0x3bc015ace2e56bccd1d7f7982e53adf80d064c955a38d91a313083baacdac582\",\"license\":\"MIT\"},\"contracts/interfaces/rari-fuse/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IComptroller {\\n    function cTokensByUnderlying(address) external view returns (address cToken);\\n\\n    function rewardsDistributors(uint256 index) external view returns (address);\\n\\n    function markets(address market) external view returns (bool isListed, uint256 collateralFactorMantissa);\\n}\\n\\ninterface IRariRewardDistributor {\\n    function rewardToken() external view returns (address);\\n\\n    function compAccrued(address holder) external view returns (uint256);\\n\\n    function claimRewards(address holder) external;\\n\\n    function getAllMarkets() external view returns (address[] calldata);\\n}\\n\",\"keccak256\":\"0xc77c07dfdd2acabfef691aa3a22145c851fa153cd1707cbda474b95ca7aea350\",\"license\":\"MIT\"},\"contracts/interfaces/rari-fuse/IFusePoolDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IFusePoolDirectory {\\n    function pools(uint256)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            address creator,\\n            address comptroller,\\n            uint256 blockPosted,\\n            uint256 timestampPosted\\n        );\\n}\\n\",\"keccak256\":\"0xe18039f321d785b1e134ce2d23aae769f0b7f7f6abc8b9ad964b0ac6a8a98e38\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStrategy {\\n    function rebalance() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalValueCurrent() external returns (uint256);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x45b007a39e3361fcc148692762735cb11489305b8016c1b9e05d79fbb5c9bc60\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVesperPool is IERC20 {\\n    function calculateUniversalFee(uint256 _profit) external view returns (uint256 _fee);\\n\\n    function deposit() external payable;\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function poolRewards() external returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function resetApproval() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function withdrawETH(uint256 _amount) external;\\n\\n    function whitelistedWithdraw(uint256 _amount) external;\\n\\n    function governor() external view returns (address);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address _address) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address _address) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 interestFeeObsolete,\\n            uint256 _debtRate,\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    // Function to get pricePerShare from V2 pools\\n    function getPricePerShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd7700c25410328eef072e72994a96863dd86a823eec01b362fc1f02d7a320f7b\",\"license\":\"MIT\"},\"contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/bloq/ISwapManager.sol\\\";\\nimport \\\"../interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    // solhint-disable-next-line  var-name-mixedcase\\n    address internal WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    ISwapManager public swapManager;\\n\\n    uint256 public oraclePeriod = 3600; // 1h\\n    uint256 public oracleRouterIdx = 0; // Uniswap V2\\n    uint256 public swapSlippage = 10000; // 100% Don't use oracles by default\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\\n    event UpdatedSwapSlippage(uint256 oldSwapSlippage, uint256 newSwapSlippage);\\n    event UpdatedOracleConfig(uint256 oldPeriod, uint256 newPeriod, uint256 oldRouterIdx, uint256 newRouterIdx);\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken\\n    ) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        swapManager = ISwapManager(_swapManager);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swap manager address\\n     * @param _swapManager swap manager address\\n     */\\n    function updateSwapManager(address _swapManager) external onlyGovernor {\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        require(_swapManager != address(swapManager), \\\"sm-is-same\\\");\\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\\n        swapManager = ISwapManager(_swapManager);\\n    }\\n\\n    function updateSwapSlippage(uint256 _newSwapSlippage) external onlyGovernor {\\n        require(_newSwapSlippage <= 10000, \\\"invalid-slippage-value\\\");\\n        emit UpdatedSwapSlippage(swapSlippage, _newSwapSlippage);\\n        swapSlippage = _newSwapSlippage;\\n    }\\n\\n    function updateOracleConfig(uint256 _newPeriod, uint256 _newRouterIdx) external onlyGovernor {\\n        require(_newRouterIdx < swapManager.N_DEX(), \\\"invalid-router-index\\\");\\n        if (_newPeriod == 0) _newPeriod = oraclePeriod;\\n        require(_newPeriod > 59, \\\"invalid-oracle-period\\\");\\n        emit UpdatedOracleConfig(oraclePeriod, _newPeriod, oracleRouterIdx, _newRouterIdx);\\n        oraclePeriod = _newPeriod;\\n        oracleRouterIdx = _newRouterIdx;\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken() external onlyKeeper {\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    function setupOracles() external onlyKeeper {\\n        _setupOracles();\\n    }\\n\\n    /**\\n     * @dev Withdraw collateral token from lending pool.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        _withdraw(_amount);\\n    }\\n\\n    /**\\n     * @dev Rebalance profit, loss and investment of this strategy\\n     */\\n    function rebalance() external virtual override onlyKeeper {\\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _reinvest();\\n    }\\n\\n    /**\\n     * @dev sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /**\\n     * @notice Calculate total value of asset under management\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view virtual override returns (uint256 _value);\\n\\n    /**\\n     * @notice Calculate total value of asset under management (in real-time)\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValueCurrent() external virtual override returns (uint256) {\\n        return totalValue();\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /**\\n     * @notice some strategy may want to prepare before doing migration.\\n        Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    /**\\n     *  @notice Generate report for current profit and loss. Also liquidate asset to payback\\n     * excess debt, if any.\\n     * @return _profit Calculate any realized profit and convert it to collateral, if not already.\\n     * @return _loss Calculate any loss that strategy has made on investment. Convert into collateral token.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function _generateReport()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n        _profit = _realizeProfit(_totalDebt);\\n        _loss = _realizeLoss(_totalDebt);\\n        _payback = _liquidate(_excessDebt);\\n    }\\n\\n    function _calcAmtOutAfterSlippage(uint256 _amount, uint256 _slippage) internal pure returns (uint256) {\\n        return (_amount * (10000 - _slippage)) / (10000);\\n    }\\n\\n    function _simpleOraclePath(address _from, address _to) internal view returns (address[] memory path) {\\n        if (_from == WETH || _to == WETH) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = WETH;\\n            path[2] = _to;\\n        }\\n    }\\n\\n    function _consultOracle(\\n        address _from,\\n        address _to,\\n        uint256 _amt\\n    ) internal returns (uint256, bool) {\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            (bool _success, bytes memory _returnData) =\\n                address(swapManager).call(\\n                    abi.encodePacked(swapManager.consult.selector, abi.encode(_from, _to, _amt, oraclePeriod, i))\\n                );\\n            if (_success) {\\n                (uint256 rate, uint256 lastUpdate, ) = abi.decode(_returnData, (uint256, uint256, bool));\\n                if ((lastUpdate > (block.timestamp - oraclePeriod)) && (rate != 0)) return (rate, true);\\n                return (0, false);\\n            }\\n        }\\n        return (0, false);\\n    }\\n\\n    function _getOracleRate(address[] memory path, uint256 _amountIn) internal returns (uint256 amountOut) {\\n        require(path.length > 1, \\\"invalid-oracle-path\\\");\\n        amountOut = _amountIn;\\n        bool isValid;\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            (amountOut, isValid) = _consultOracle(path[i], path[i + 1], amountOut);\\n            require(isValid, \\\"invalid-oracle-rate\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe swap via Uniswap / Sushiswap (better rate of the two)\\n     * @dev There are many scenarios when token swap via Uniswap can fail, so this\\n     * method will wrap Uniswap call in a 'try catch' to make it fail safe.\\n     * however, this method will throw minAmountOut is not met\\n     * @param _from address of from token\\n     * @param _to address of to token\\n     * @param _amountIn Amount to be swapped\\n     * @param _minAmountOut minimum amount out\\n     */\\n    function _safeSwap(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) internal {\\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\\n            swapManager.bestOutputFixedInput(_from, _to, _amountIn);\\n        if (_minAmountOut == 0) _minAmountOut = 1;\\n        if (amountOut != 0) {\\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\\n                _amountIn,\\n                _minAmountOut,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    // These methods can be implemented by the inheriting strategy.\\n    /* solhint-disable no-empty-blocks */\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual {}\\n\\n    /**\\n     * @notice Set up any oracles that are needed for this strategy.\\n     */\\n    function _setupOracles() internal virtual {}\\n\\n    /* solhint-enable */\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdraw(uint256 _amount) internal virtual;\\n\\n    function _approveToken(uint256 _amount) internal virtual;\\n\\n    /**\\n     * @notice Withdraw collateral to payback excess debt in pool.\\n     * @param _excessDebt Excess debt of strategy in collateral token\\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\\n     */\\n    function _liquidate(uint256 _excessDebt) internal virtual returns (uint256 _payback);\\n\\n    /**\\n     * @notice Calculate earning and withdraw/convert it into collateral token.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _profit Profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal virtual returns (uint256 _profit);\\n\\n    /**\\n     * @notice Calculate loss\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _loss Realized loss in collateral token\\n     */\\n    function _realizeLoss(uint256 _totalDebt) internal virtual returns (uint256 _loss);\\n\\n    /**\\n     * @notice Reinvest collateral.\\n     * @dev Once we file report back in pool, we might have some collateral in hand\\n     * which we want to reinvest aka deposit in lender/provider.\\n     */\\n    function _reinvest() internal virtual;\\n}\\n\",\"keccak256\":\"0xbc343e92340b45c2b0a57ea52cac816a6af06fe0c4bb30a6d22d08eadf449755\",\"license\":\"MIT\"},\"contracts/strategies/compound/CompoundStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../Strategy.sol\\\";\\nimport \\\"../../interfaces/compound/ICompound.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in Compound and earn interest.\\ncontract CompoundStrategy is Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    string public NAME;\\n    string public constant VERSION = \\\"4.0.0\\\";\\n\\n    CToken internal cToken;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    Comptroller public immutable COMPTROLLER;\\n    address public rewardToken;\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _comptroller,\\n        address _rewardToken,\\n        address _receiptToken,\\n        string memory _name\\n    ) Strategy(_pool, _swapManager, _receiptToken) {\\n        require(_receiptToken != address(0), \\\"cToken-address-is-zero\\\");\\n        cToken = CToken(_receiptToken);\\n        swapSlippage = 10000; // disable oracles on reward swaps by default\\n        NAME = _name;\\n\\n        // Either can be address(0), for example in Rari Strategy\\n        COMPTROLLER = Comptroller(_comptroller);\\n        rewardToken = _rewardToken;\\n    }\\n\\n    /**\\n     * @notice Calculate total value using COMP accrued and cToken\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view virtual override returns (uint256 _totalValue) {\\n        _totalValue = _calculateTotalValue((rewardToken != address(0)) ? _getRewardAccrued() : 0);\\n    }\\n\\n    function totalValueCurrent() public virtual override returns (uint256 _totalValue) {\\n        if (rewardToken != address(0)) {\\n            _claimRewards();\\n            _totalValue = _calculateTotalValue(IERC20(rewardToken).balanceOf(address(this)));\\n        } else {\\n            _totalValue = _calculateTotalValue(0);\\n        }\\n    }\\n\\n    function _calculateTotalValue(uint256 _rewardAccrued) internal view returns (uint256 _totalValue) {\\n        if (_rewardAccrued != 0) {\\n            (, _totalValue) = swapManager.bestPathFixedInput(rewardToken, address(collateralToken), _rewardAccrued, 0);\\n        }\\n        _totalValue += _convertToCollateral(cToken.balanceOf(address(this)));\\n    }\\n\\n    function isReservedToken(address _token) public view virtual override returns (bool) {\\n        return _token == address(cToken) || _token == rewardToken;\\n    }\\n\\n    /// @notice Approve all required tokens\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        collateralToken.safeApprove(pool, _amount);\\n        collateralToken.safeApprove(address(cToken), _amount);\\n        if (rewardToken != address(0)) {\\n            for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n                IERC20(rewardToken).safeApprove(address(swapManager.ROUTERS(i)), _amount);\\n            }\\n        }\\n    }\\n\\n    //solhint-disable-next-line no-empty-blocks\\n    function _beforeMigration(address _newStrategy) internal virtual override {}\\n\\n    /// @notice Claim comp\\n    function _claimRewards() internal virtual {\\n        address[] memory _markets = new address[](1);\\n        _markets[0] = address(cToken);\\n        COMPTROLLER.claimComp(address(this), _markets);\\n    }\\n\\n    function _getRewardAccrued() internal view virtual returns (uint256 _rewardAccrued) {\\n        _rewardAccrued = COMPTROLLER.compAccrued(address(this));\\n    }\\n\\n    /// @notice Claim COMP and convert COMP into collateral token.\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\\n        if (rewardToken != address(0)) {\\n            _claimRewards();\\n            uint256 _rewardAmount = IERC20(rewardToken).balanceOf(address(this));\\n            if (_rewardAmount != 0) {\\n                uint256 minAmtOut =\\n                    (swapSlippage != 10000)\\n                        ? _calcAmtOutAfterSlippage(\\n                            _getOracleRate(_simpleOraclePath(rewardToken, _toToken), _rewardAmount),\\n                            swapSlippage\\n                        )\\n                        : 1;\\n                _safeSwap(rewardToken, _toToken, _rewardAmount, minAmtOut);\\n            }\\n        }\\n    }\\n\\n    /// @notice Withdraw collateral to payback excess debt\\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {\\n        if (_excessDebt != 0) {\\n            _payback = _safeWithdraw(_excessDebt);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate earning and withdraw it from Compound.\\n     * @dev Claim COMP and convert into collateral\\n     * @dev If somehow we got some collateral token in strategy then we want to\\n     *  include those in profit. That's why we used 'return' outside 'if' condition.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal virtual override returns (uint256) {\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n        uint256 _collateralBalance = _convertToCollateral(cToken.balanceOf(address(this)));\\n        if (_collateralBalance > _totalDebt) {\\n            _withdrawHere(_collateralBalance - _totalDebt);\\n        }\\n        return collateralToken.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Calculate realized loss.\\n     * @return _loss Realized loss in collateral token\\n     */\\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {\\n        uint256 _collateralBalance = _convertToCollateral(cToken.balanceOf(address(this)));\\n        if (_collateralBalance < _totalDebt) {\\n            _loss = _totalDebt - _collateralBalance;\\n        }\\n    }\\n\\n    /// @notice Deposit collateral in Compound\\n    function _reinvest() internal virtual override {\\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\\n        if (_collateralBalance != 0) {\\n            require(cToken.mint(_collateralBalance) == 0, \\\"deposit-to-compound-failed\\\");\\n        }\\n    }\\n\\n    /// @dev Withdraw collateral and transfer it to pool\\n    function _withdraw(uint256 _amount) internal override {\\n        _safeWithdraw(_amount);\\n        collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Safe withdraw will make sure to check asking amount against available amount.\\n     * @param _amount Amount of collateral to withdraw.\\n     * @return Actual collateral withdrawn\\n     */\\n    function _safeWithdraw(uint256 _amount) internal returns (uint256) {\\n        uint256 _collateralBalance = _convertToCollateral(cToken.balanceOf(address(this)));\\n        // Get available liquidity from Compound\\n        uint256 _availableLiquidity = cToken.getCash();\\n        // Get minimum of _amount and _avaialbleLiquidity\\n        uint256 _withdrawAmount = _amount < _availableLiquidity ? _amount : _availableLiquidity;\\n        // Get minimum of _withdrawAmount and _collateralBalance\\n        return _withdrawHere(_withdrawAmount < _collateralBalance ? _withdrawAmount : _collateralBalance);\\n    }\\n\\n    /// @dev Withdraw collateral here. Do not transfer to pool\\n    function _withdrawHere(uint256 _amount) internal returns (uint256) {\\n        if (_amount != 0) {\\n            require(cToken.redeemUnderlying(_amount) == 0, \\\"withdraw-from-compound-failed\\\");\\n            _afterRedeem();\\n        }\\n        return _amount;\\n    }\\n\\n    function _setupOracles() internal virtual override {\\n        if (rewardToken != address(0))\\n            swapManager.createOrUpdateOracle(rewardToken, WETH, oraclePeriod, oracleRouterIdx);\\n        if (address(collateralToken) != WETH) {\\n            swapManager.createOrUpdateOracle(WETH, address(collateralToken), oraclePeriod, oracleRouterIdx);\\n        }\\n    }\\n\\n    /**\\n     * @dev Compound support ETH as collateral not WETH. This hook will take\\n     * care of conversion from WETH to ETH and vice versa.\\n     * @dev This will be used in ETH strategy only, hence empty implementation\\n     */\\n    //solhint-disable-next-line no-empty-blocks\\n    function _afterRedeem() internal virtual {}\\n\\n    function _convertToCollateral(uint256 _cTokenAmount) internal view returns (uint256) {\\n        return (_cTokenAmount * cToken.exchangeRateStored()) / 1e18;\\n    }\\n}\\n\",\"keccak256\":\"0x238fd4f57340ce4478375971cd82442d0ae65390b4f5539b600864aed4524dd6\",\"license\":\"MIT\"},\"contracts/strategies/rari-fuse/RariCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../interfaces/aave/IAave.sol\\\";\\nimport \\\"../../interfaces/rari-fuse/IComptroller.sol\\\";\\nimport \\\"../compound/CompoundStrategy.sol\\\";\\nimport \\\"../../interfaces/rari-fuse/IFusePoolDirectory.sol\\\";\\n\\n/// @title This library provide core operations for Rari\\nlibrary RariCore {\\n    /**\\n     * @notice Gets Comptroller\\n     * @param _fusePoolDir address of the Fuse Pool Directory\\n     * @param _fusePoolId Fuse Pool ID\\n     */\\n    function getComptroller(IFusePoolDirectory _fusePoolDir, uint256 _fusePoolId)\\n        internal\\n        view\\n        returns (address _comptroller)\\n    {\\n        (, , _comptroller, , ) = _fusePoolDir.pools(_fusePoolId);\\n    }\\n\\n    /**\\n     * @notice Gets the cToken to mint for a Fuse Pool\\n     * @param _fusePoolDir address of the Fuse Pool Directory\\n     * @param _fusePoolId Fuse Pool ID\\n     * @param _collateralToken address of the collateralToken\\n     */\\n    function getCTokenByUnderlying(\\n        IFusePoolDirectory _fusePoolDir,\\n        uint256 _fusePoolId,\\n        address _collateralToken\\n    ) internal view returns (address _cToken) {\\n        address _comptroller = getComptroller(_fusePoolDir, _fusePoolId);\\n        require(_comptroller != address(0), \\\"rari-fuse-invalid-comptroller\\\");\\n        _cToken = IComptroller(_comptroller).cTokensByUnderlying(_collateralToken);\\n        require(_cToken != address(0), \\\"rari-fuse-invalid-ctoken\\\");\\n    }\\n\\n    /**\\n     * @notice Automatically finds rewardToken set for the current Fuse Pool\\n     * @param _fusePoolDir address of the Fuse Pool Directory\\n     * @param _fusePoolId Fuse Pool ID\\n     */\\n    function getRewardToken(IFusePoolDirectory _fusePoolDir, uint256 _fusePoolId)\\n        internal\\n        view\\n        returns (address _rewardDistributor, address _rewardToken)\\n    {\\n        uint256 _success;\\n        address _comptroller = getComptroller(_fusePoolDir, _fusePoolId);\\n        bytes4 _selector = IComptroller(_comptroller).rewardsDistributors.selector;\\n\\n        // Low level static call to prevent revert in case the Comptroller doesn't have\\n        // rewardsDistributors function exposed\\n        // which may happen to older Fuse Pools\\n        uint256 _comptrollerSize;\\n        assembly {\\n            _comptrollerSize := extcodesize(_comptroller)\\n        }\\n        require(_comptrollerSize > 0, \\\"comptroller-not-a-contract\\\");\\n\\n        assembly {\\n            let x := mload(0x40) // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(x, _selector) // Place signature at beginning of empty storage\\n            mstore(add(x, 0x04), 0) // Place first argument directly next to signature\\n\\n            _success := staticcall(\\n                30000, // 30k gas\\n                _comptroller, // To addr\\n                x, // Inputs are stored at location x\\n                0x24, // Inputs are 36 bytes long\\n                x, // Store output over input (saves space)\\n                0x20\\n            ) // Outputs are 32 bytes long\\n\\n            _rewardDistributor := mload(x) // Load the result\\n        }\\n        if (_rewardDistributor != address(0)) {\\n            _rewardToken = IRariRewardDistributor(_rewardDistributor).rewardToken();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5e1fc17ab2cc305e630d9b5172f31055d54a068883c3f9de1d09a9a9ecacfef5\",\"license\":\"MIT\"},\"contracts/strategies/rari-fuse/RariFuseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./RariCore.sol\\\";\\nimport \\\"../compound/CompoundStrategy.sol\\\";\\nimport \\\"../../interfaces/rari-fuse/IComptroller.sol\\\";\\nimport \\\"../../interfaces/rari-fuse/IFusePoolDirectory.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in a Rari Fuse Pool and earn interest.\\ncontract RariFuseStrategy is CompoundStrategy {\\n    using SafeERC20 for IERC20;\\n    using RariCore for IFusePoolDirectory;\\n\\n    uint256 public fusePoolId;\\n    IFusePoolDirectory public immutable fusePoolDirectory;\\n    address public rewardDistributor;\\n    event FusePoolChanged(uint256 indexed newFusePoolId, address indexed oldCToken, address indexed newCToken);\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        uint256 _fusePoolId,\\n        IFusePoolDirectory _fusePoolDirectory,\\n        string memory _name\\n    )\\n        CompoundStrategy(\\n            _pool,\\n            _swapManager,\\n            _fusePoolDirectory.getComptroller(_fusePoolId),\\n            address(0), // rewardToken\\n            _fusePoolDirectory.getCTokenByUnderlying(\\n                _fusePoolId,\\n                address(IVesperPool(_pool).token()) == WETH ? address(0x0) : address(IVesperPool(_pool).token())\\n            ),\\n            _name\\n        )\\n    {\\n        fusePoolId = _fusePoolId;\\n        fusePoolDirectory = _fusePoolDirectory;\\n        // Find and set the rewardToken from the fuse pool data\\n        (rewardDistributor, rewardToken) = _fusePoolDirectory.getRewardToken(_fusePoolId);\\n    }\\n\\n    // solhint-enable no-empty-blocks\\n\\n    /**\\n     * @notice Calculate total value using underlying token\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view override returns (uint256 _totalValue) {\\n        _totalValue = _convertToCollateral(cToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Changes the underlying Fuse Pool to a new one\\n     * @dev Redeems cTokens from current fuse pool and mints cTokens of new Fuse Pool\\n     * @param _newPoolId Fuse Pool ID\\n     */\\n    function migrateFusePool(uint256 _newPoolId) external virtual onlyGovernor {\\n        address _newCToken = fusePoolDirectory.getCTokenByUnderlying(_newPoolId, address(collateralToken));\\n        require(address(cToken) != _newCToken, \\\"same-fuse-pool\\\");\\n        require(cToken.redeem(cToken.balanceOf(address(this))) == 0, \\\"withdraw-from-fuse-pool-failed\\\");\\n        collateralToken.safeApprove(address(cToken), 0);\\n        // We usually do infinite approval via approveToken() any way\\n        collateralToken.safeApprove(_newCToken, MAX_UINT_VALUE);\\n        require(CToken(_newCToken).mint(collateralToken.balanceOf(address(this))) == 0, \\\"deposit-to-fuse-pool-failed\\\");\\n        emit FusePoolChanged(_newPoolId, address(cToken), _newCToken);\\n        cToken = CToken(_newCToken);\\n        receiptToken = _newCToken;\\n        fusePoolId = _newPoolId;\\n        (rewardDistributor, rewardToken) = fusePoolDirectory.getRewardToken(fusePoolId);\\n    }\\n\\n    /// @dev Manually claim rewards from rewardDistributor by keeper\\n    /// @notice Properly tests if reward claim works\\n    function claimRewards() external onlyKeeper {\\n        _claimRewards();\\n    }\\n\\n    /// @notice Claim rewards from Fuse Pool' rewardDistributor\\n    function _claimRewards() internal virtual override {\\n        IRariRewardDistributor(rewardDistributor).claimRewards(address(this));\\n    }\\n\\n    /// @notice Get rewards accrued in Fuse Pool' rewardDistributor\\n    function _getRewardAccrued() internal view virtual override returns (uint256 _rewardAccrued) {\\n        _rewardAccrued = IRariRewardDistributor(rewardDistributor).compAccrued(address(this));\\n    }\\n\\n    // solhint-disable-next-line\\n    function _beforeMigration(address _newStrategy) internal override {}\\n}\\n\",\"keccak256\":\"0x93e550b3169947b9b2c0cf3f288959f21a3ff9390fc986fac2b729326deae494\",\"license\":\"MIT\"},\"contracts/strategies/rari-fuse/RariFuseStrategyAPE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./RariFuseStrategy.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in a Rari Fuse Pool and earn interest.\\ncontract RariFuseStrategyAPE is RariFuseStrategy {\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        uint256 _fusePoolId,\\n        IFusePoolDirectory _fusePoolDirectory,\\n        string memory _name\\n    ) RariFuseStrategy(_pool, _swapManager, _fusePoolId, _fusePoolDirectory, _name) {\\n        oracleRouterIdx = 1;\\n    }\\n}\\n\",\"keccak256\":\"0xcaa22066748ac2c2087a3804333ce6b3d9570bf57868a4ba1074298b594ee8fb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610100604052600080546001600160a01b03191673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2178155610e106004556005556127106006553480156200004757600080fd5b5060405162004c5138038062004c518339810160408190526200006a91620009bf565b848484848484846200009485856001600160a01b0316620004cd60201b62001bcb1790919060201c565b6000620001d98760008054906101000a90046001600160a01b03166001600160a01b03168b6001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015620000f257600080fd5b505afa15801562000107573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012d919062000a4a565b6001600160a01b031614620001b7578a6001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200017657600080fd5b505afa1580156200018b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b1919062000a4a565b620001ba565b60005b886001600160a01b03166200055c60201b62001c56179092919060201c565b858585836001600160a01b038316620002395760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038216620002865760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b604482015260640162000230565b600380546001600160a01b0319166001600160a01b0384811691909117909155831660a081905260408051637e062a3560e11b8152905163fc0c546a91600480820192602092909190829003018186803b158015620002e457600080fd5b505afa158015620002f9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200031f919062000a4a565b6001600160a01b03908116608052600180546001600160a01b03191691831691909117905562000366620003503390565b6007620006a460201b62001d921790919060201c565b620003a85760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b604482015260640162000230565b5050506001600160a01b038216620004035760405162461bcd60e51b815260206004820152601660248201527f63546f6b656e2d616464726573732d69732d7a65726f00000000000000000000604482015260640162000230565b600a80546001600160a01b0319166001600160a01b03841617905561271060065580516200043990600990602084019062000833565b5050506001600160a01b0391821660c052600b80546001600160a01b031916918316919091179055600c869055841660e0819052620004889250905084620006c4602090811b62001dae17901c565b600b80546001600160a01b039283166001600160a01b031991821617909155600d8054939092169216919091179055505060016005555062000b2b9650505050505050565b6040516315895f4760e31b8152600481018290526000906001600160a01b0384169063ac4afa389060240160006040518083038186803b1580156200051157600080fd5b505afa15801562000526573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000550919081019062000a71565b50909695505050505050565b6000806200056b8585620004cd565b90506001600160a01b038116620005c55760405162461bcd60e51b815260206004820152601d60248201527f726172692d667573652d696e76616c69642d636f6d7074726f6c6c6572000000604482015260640162000230565b6040516318ffa3fd60e11b81526001600160a01b0384811660048301528216906331ff47fa9060240160206040518083038186803b1580156200060757600080fd5b505afa1580156200061c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000642919062000a4a565b91506001600160a01b0382166200069c5760405162461bcd60e51b815260206004820152601860248201527f726172692d667573652d696e76616c69642d63746f6b656e0000000000000000604482015260640162000230565b509392505050565b6000620006bb836001600160a01b038416620007e1565b90505b92915050565b6000808080620006d58686620004cd565b905063c6c5b0dd60e01b813b80620007305760405162461bcd60e51b815260206004820152601a60248201527f636f6d7074726f6c6c65722d6e6f742d612d636f6e7472616374000000000000604482015260640162000230565b6040518281526000600482015260208160248387617530fa9051965093506001600160a01b03861615620007d657856001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b1580156200079857600080fd5b505afa158015620007ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007d3919062000a4a565b94505b505050509250929050565b60008181526001830160205260408120546200082a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620006be565b506000620006be565b828054620008419062000aee565b90600052602060002090601f016020900481019282620008655760008555620008b0565b82601f106200088057805160ff1916838001178555620008b0565b82800160010185558215620008b0579182015b82811115620008b057825182559160200191906001019062000893565b50620008be929150620008c2565b5090565b5b80821115620008be5760008155600101620008c3565b6001600160a01b0381168114620008ef57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200091a57600080fd5b81516001600160401b0380821115620009375762000937620008f2565b604051601f8301601f19908116603f01168101908282118183101715620009625762000962620008f2565b816040528381526020925086838588010111156200097f57600080fd5b600091505b83821015620009a3578582018301518183018401529082019062000984565b83821115620009b55760008385830101525b9695505050505050565b600080600080600060a08688031215620009d857600080fd5b8551620009e581620008d9565b6020870151909550620009f881620008d9565b60408701516060880151919550935062000a1281620008d9565b60808701519092506001600160401b0381111562000a2f57600080fd5b62000a3d8882890162000908565b9150509295509295909350565b60006020828403121562000a5d57600080fd5b815162000a6a81620008d9565b9392505050565b600080600080600060a0868803121562000a8a57600080fd5b85516001600160401b0381111562000aa157600080fd5b62000aaf8882890162000908565b955050602086015162000ac281620008d9565b604087015190945062000ad581620008d9565b6060870151608090970151959894975095949392505050565b600181811c9082168062000b0357607f821691505b6020821081141562000b2557634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161400562000c4c6000396000818161030e015281816109e00152610e09015260006102b90152600081816101e5015281816104820152818161059e015281816106210152818161075f0152818161091201528181610e640152818161101401528181611158015281816113bb01528181611458015281816116ac01528181611ee701528181612137015281816121d7015261244901526000818161039e01528181610a0301528181610bcf01528181610c0601528181610c40015281816115df015281816116830152818161197601528181611f08015281816122b5015281816124270152818161247f01528181612698015281816126fe0152818161299e01528181612d700152612dfb01526140056000f3fe608060405234801561001057600080fd5b50600436106101c65760003560e01c80639b0db5d0116100fa578063ce5494bb1161009d578063ce5494bb146103dc578063d2c35ce8146103ef578063d4c3eea014610402578063e00af4a71461040a578063e645c2021461041d578063ec78e83214610425578063f7c618c114610438578063fc0c546a1461044b578063ffa1ad741461045c57600080fd5b80639b0db5d01461034d578063a3f4df7e14610356578063a923b2a61461036b578063aa1018861461037e578063acc2166a14610386578063b2016bd414610399578063c415b95c146103c0578063cd2d7ebe146103d357600080fd5b80634c36fad71161016d5780634c36fad71461028e5780634dda5222146102a15780635f82c67e146102b457806367f5e4b8146102db578063709d039d146102ee5780637d7c2a1c14610301578063805c5e4014610309578063951dc22c1461033057806399b71d5c1461034557600080fd5b806314ae9f2e146101cb57806316f0115b146101e05780631aedeabe1461021d5780632e1a7d4d14610234578063372500ab146102475780634032b72b1461024f57806342189c8f14610262578063440d72481461026b575b600080fd5b6101de6101d93660046138f9565b610480565b005b6102077f000000000000000000000000000000000000000000000000000000000000000081565b6040516102149190613916565b60405180910390f35b61022660065481565b604051908152602001610214565b6101de61024236600461392a565b61059b565b6101de6105ec565b6101de61025d3660046138f9565b61061f565b61022660045481565b61027e6102793660046138f9565b61072b565b6040519015158152602001610214565b6101de61029c3660046138f9565b61075d565b6101de6102af36600461392a565b610910565b6102077f000000000000000000000000000000000000000000000000000000000000000081565b6101de6102e936600461392a565b610e62565b600354610207906001600160a01b031681565b6101de610fae565b6102077f000000000000000000000000000000000000000000000000000000000000000081565b61033861107d565b6040516102149190613987565b6101de61108e565b610226600c5481565b61035e6110c8565b60405161021491906139c6565b6101de6103793660046139f9565b611156565b6101de61138b565b600d54610207906001600160a01b031681565b6102077f000000000000000000000000000000000000000000000000000000000000000081565b600254610207906001600160a01b031681565b61022660055481565b6101de6103ea3660046138f9565b6113b8565b6101de6103fd3660046138f9565b6116aa565b610226611873565b6101de6104183660046138f9565b6118ff565b610226611b1e565b600154610207906001600160a01b031681565b600b54610207906001600160a01b031681565b6001546001600160a01b0316610207565b61035e604051806040016040528060058152602001640342e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156104d957600080fd5b505afa1580156104ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105119190613a26565b6001600160a01b0316336001600160a01b03161461054a5760405162461bcd60e51b815260040161054190613a43565b60405180910390fd5b610555600782611ec3565b6105985760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b6044820152606401610541565b50565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146105e35760405162461bcd60e51b815260040161054190613a7a565b61059881611ed8565b6105f9335b600790611f52565b6106155760405162461bcd60e51b815260040161054190613aad565b61061d611f74565b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561067857600080fd5b505afa15801561068c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b09190613a26565b6001600160a01b0316336001600160a01b0316146106e05760405162461bcd60e51b815260040161054190613a43565b6106eb600782611d92565b6105985760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610541565b600a546000906001600160a01b03838116911614806107575750600b546001600160a01b038381169116145b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156107b657600080fd5b505afa1580156107ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ee9190613a26565b6001600160a01b0316336001600160a01b03161461081e5760405162461bcd60e51b815260040161054190613a43565b6001600160a01b0381166108695760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b6044820152606401610541565b6003546001600160a01b03828116911614156108b45760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b6044820152606401610541565b6003546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561096957600080fd5b505afa15801561097d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a19190613a26565b6001600160a01b0316336001600160a01b0316146109d15760405162461bcd60e51b815260040161054190613a43565b6000610a276001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016837f0000000000000000000000000000000000000000000000000000000000000000611c56565b600a549091506001600160a01b0380831691161415610a795760405162461bcd60e51b815260206004820152600e60248201526d1cd85b594b599d5cd94b5c1bdbdb60921b6044820152606401610541565b600a546040516370a0823160e01b81526001600160a01b039091169063db006a759082906370a0823190610ab1903090600401613916565b60206040518083038186803b158015610ac957600080fd5b505afa158015610add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b019190613add565b6040518263ffffffff1660e01b8152600401610b1f91815260200190565b602060405180830381600087803b158015610b3957600080fd5b505af1158015610b4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b719190613add565b15610bbe5760405162461bcd60e51b815260206004820152601e60248201527f77697468647261772d66726f6d2d667573652d706f6f6c2d6661696c656400006044820152606401610541565b600a54610bf9906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691166000611fd8565b610c2f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682600019611fd8565b806001600160a01b031663a0712d687f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610c8a9190613916565b60206040518083038186803b158015610ca257600080fd5b505afa158015610cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cda9190613add565b6040518263ffffffff1660e01b8152600401610cf891815260200190565b602060405180830381600087803b158015610d1257600080fd5b505af1158015610d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4a9190613add565b15610d975760405162461bcd60e51b815260206004820152601b60248201527f6465706f7369742d746f2d667573652d706f6f6c2d6661696c656400000000006044820152606401610541565b600a546040516001600160a01b0380841692169084907f7725294be69fa7d941c001b388e2086daa9acdf58fbbc7aef3fd8cce3c316b6e90600090a4600a80546001600160a01b03199081166001600160a01b0384811691821790935560018054909216179055600c839055610e2f907f00000000000000000000000000000000000000000000000000000000000000001683611dae565b600b80546001600160a01b039283166001600160a01b031991821617909155600d80549390921692169190911790555050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610ebb57600080fd5b505afa158015610ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef39190613a26565b6001600160a01b0316336001600160a01b031614610f235760405162461bcd60e51b815260040161054190613a43565b612710811115610f6e5760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b6044820152606401610541565b60065460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600655565b610fb7336105f1565b610fd35760405162461bcd60e51b815260040161054190613aad565b6000806000610fe061212f565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b15801561105857600080fd5b505af115801561106c573d6000803e3d6000fd5b5050505061107861229b565b505050565b6060611089600761240d565b905090565b611097336105f1565b6110b35760405162461bcd60e51b815260040161054190613aad565b6110bd600061241a565b61061d60001961241a565b600980546110d590613af6565b80601f016020809104026020016040519081016040528092919081815260200182805461110190613af6565b801561114e5780601f106111235761010080835404028352916020019161114e565b820191906000526020600020905b81548152906001019060200180831161113157829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156111af57600080fd5b505afa1580156111c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e79190613a26565b6001600160a01b0316336001600160a01b0316146112175760405162461bcd60e51b815260040161054190613a43565b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561126557600080fd5b505afa158015611279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129d9190613add565b81106112e25760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b6044820152606401610541565b816112ed5760045491505b603b82116113355760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b6044820152606401610541565b6004546005546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600491909155600555565b611394336105f1565b6113b05760405162461bcd60e51b815260040161054190613aad565b61061d6125ec565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146114005760405162461bcd60e51b815260040161054190613a7a565b6001600160a01b0381166114565760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f000000006044820152606401610541565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b957600080fd5b505afa1580156114cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f19190613a26565b6001600160a01b0316146115405760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b6044820152606401610541565b6001546040516370a0823160e01b81526115d99183916001600160a01b03909116906370a0823190611576903090600401613916565b60206040518083038186803b15801561158e57600080fd5b505afa1580156115a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c69190613add565b6001546001600160a01b0316919061277a565b610598817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016116299190613916565b60206040518083038186803b15801561164157600080fd5b505afa158015611655573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116799190613add565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061277a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561170357600080fd5b505afa158015611717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173b9190613a26565b6001600160a01b0316336001600160a01b03161461176b5760405162461bcd60e51b815260040161054190613a43565b6001600160a01b0381166117c15760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f0000006044820152606401610541565b6002546001600160a01b03828116911614156118175760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b6044820152606401610541565b6002546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b600a546040516370a0823160e01b8152600091611089916001600160a01b03909116906370a08231906118aa903090600401613916565b60206040518083038186803b1580156118c257600080fd5b505afa1580156118d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fa9190613add565b6127aa565b611908336105f1565b6119245760405162461bcd60e51b815260040161054190613aad565b6002546001600160a01b03166119745760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b6044820152606401610541565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156119f65760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c006044820152606401610541565b6119ff8161072b565b15611a435760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b6044820152606401610541565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611a7e57600254610598906001600160a01b03164761284f565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190611aad903090600401613916565b60206040518083038186803b158015611ac557600080fd5b505afa158015611ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611afd9190613add565b600254909150611b1a906001600160a01b0384811691168361277a565b5050565b600b546000906001600160a01b031615611bc157611b3a611f74565b600b546040516370a0823160e01b8152611089916001600160a01b0316906370a0823190611b6c903090600401613916565b60206040518083038186803b158015611b8457600080fd5b505afa158015611b98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bbc9190613add565b612968565b6110896000612968565b6040516315895f4760e31b8152600481018290526000906001600160a01b0384169063ac4afa389060240160006040518083038186803b158015611c0e57600080fd5b505afa158015611c22573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c4a9190810190613b72565b50909695505050505050565b600080611c638585611bcb565b90506001600160a01b038116611cbb5760405162461bcd60e51b815260206004820152601d60248201527f726172692d667573652d696e76616c69642d636f6d7074726f6c6c65720000006044820152606401610541565b6040516318ffa3fd60e11b81526001600160a01b038216906331ff47fa90611ce7908690600401613916565b60206040518083038186803b158015611cff57600080fd5b505afa158015611d13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d379190613a26565b91506001600160a01b038216611d8a5760405162461bcd60e51b81526020600482015260186024820152773930b93496b33ab9b296b4b73b30b634b216b1ba37b5b2b760411b6044820152606401610541565b509392505050565b6000611da7836001600160a01b038416612a5f565b9392505050565b600080600080611dbe8686611bcb565b905063c6c5b0dd60e01b813b80611e175760405162461bcd60e51b815260206004820152601a60248201527f636f6d7074726f6c6c65722d6e6f742d612d636f6e74726163740000000000006044820152606401610541565b6040518281526000600482015260208160248387617530fa9051965093506001600160a01b03861615611eb857856001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611e7d57600080fd5b505afa158015611e91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb59190613a26565b94505b505050509250929050565b6000611da7836001600160a01b038416612aae565b611ee181612ba1565b506105987f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016116299190613916565b6001600160a01b03811660009081526001830160205260408120541515611da7565b600d54604051633bd73ee360e21b81526001600160a01b039091169063ef5cfb8c90611fa4903090600401613916565b600060405180830381600087803b158015611fbe57600080fd5b505af1158015611fd2573d6000803e3d6000fd5b50505050565b8015806120615750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561202757600080fd5b505afa15801561203b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205f9190613add565b155b6120cc5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610541565b6040516001600160a01b03831660248201526044810182905261107890849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612c97565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b81526004016121819190613916565b60206040518083038186803b15801561219957600080fd5b505afa1580156121ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d19190613add565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b81526004016122219190613916565b60206040518083038186803b15801561223957600080fd5b505afa15801561224d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122719190613add565b905061227c81612d69565b945061228781612e80565b935061229282612ed1565b92505050909192565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906122ea903090600401613916565b60206040518083038186803b15801561230257600080fd5b505afa158015612316573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233a9190613add565b9050801561059857600a5460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d6890602401602060405180830381600087803b15801561238857600080fd5b505af115801561239c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c09190613add565b156105985760405162461bcd60e51b815260206004820152601a60248201527f6465706f7369742d746f2d636f6d706f756e642d6661696c65640000000000006044820152606401610541565b60606000611da783612ee7565b61246e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083611fd8565b600a546124a8906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683611fd8565b600b546001600160a01b0316156105985760005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561250a57600080fd5b505afa15801561251e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125429190613add565b811015611b1a57600354604051636e74a6f760e01b8152600481018390526125da916001600160a01b031690636e74a6f79060240160206040518083038186803b15801561258f57600080fd5b505afa1580156125a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c79190613a26565b600b546001600160a01b03169084611fd8565b806125e481613c51565b9150506124bc565b600b546001600160a01b03161561269357600354600b5460005460048054600554604051630f30f2d360e21b81526001600160a01b0396871696633cc3cb4c9661263f9690821695911693929101613c6c565b602060405180830381600087803b15801561265957600080fd5b505af115801561266d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126919190613a26565b505b6000547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161461061d5760035460005460048054600554604051630f30f2d360e21b81526001600160a01b0395861695633cc3cb4c95612728959116937f0000000000000000000000000000000000000000000000000000000000000000939092909101613c6c565b602060405180830381600087803b15801561274257600080fd5b505af1158015612756573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105989190613a26565b6040516001600160a01b03831660248201526044810182905261107890849063a9059cbb60e01b906064016120f8565b6000670de0b6b3a7640000600a60009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561280357600080fd5b505afa158015612817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283b9190613add565b6128459084613c95565b6107579190613cb4565b8047101561289f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610541565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146128ec576040519150601f19603f3d011682016040523d82523d6000602084013e6128f1565b606091505b50509050806110785760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610541565b60008115612a2357600354600b546040516340b4c54560e11b81526001600160a01b03928316926381698a8a926129cb929116907f0000000000000000000000000000000000000000000000000000000000000000908790600090600401613c6c565b60006040518083038186803b1580156129e357600080fd5b505afa1580156129f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a1f9190810190613d6e565b9150505b600a546040516370a0823160e01b8152612a55916001600160a01b0316906370a08231906118aa903090600401613916565b6107579082613db5565b6000818152600183016020526040812054612aa657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610757565b506000610757565b60008181526001830160205260408120548015612b97576000612ad2600183613dcd565b8554909150600090612ae690600190613dcd565b9050818114612b4b576000866000018281548110612b0657612b06613de4565b9060005260206000200154905080876000018481548110612b2957612b29613de4565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612b5c57612b5c613dfa565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610757565b6000915050610757565b600a546040516370a0823160e01b81526000918291612bd8916001600160a01b0316906370a08231906118aa903090600401613916565b90506000600a60009054906101000a90046001600160a01b03166001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b158015612c2a57600080fd5b505afa158015612c3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c629190613add565b90506000818510612c735781612c75565b845b9050612c8e838210612c875783612f43565b815b612f43565b95945050505050565b6000612cec826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661301a9092919063ffffffff16565b8051909150156110785780806020019051810190612d0a9190613e20565b6110785760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610541565b6000612d947f0000000000000000000000000000000000000000000000000000000000000000613031565b600a546040516370a0823160e01b8152600091612dcb916001600160a01b03909116906370a08231906118aa903090600401613916565b905082811115612de457612de2612c898483613dcd565b505b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612e30903090600401613916565b60206040518083038186803b158015612e4857600080fd5b505afa158015612e5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da79190613add565b600a546040516370a0823160e01b81526000918291612eb7916001600160a01b0316906370a08231906118aa903090600401613916565b905082811015612ecb57611da78184613dcd565b50919050565b60008115612ee25761075782612ba1565b919050565b606081600001805480602002602001604051908101604052809291908181526020018280548015612f3757602002820191906000526020600020905b815481526020019060010190808311612f23575b50505050509050919050565b6000811561301657600a5460405163852a12e360e01b8152600481018490526001600160a01b039091169063852a12e390602401602060405180830381600087803b158015612f9157600080fd5b505af1158015612fa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc99190613add565b156130165760405162461bcd60e51b815260206004820152601d60248201527f77697468647261772d66726f6d2d636f6d706f756e642d6661696c65640000006044820152606401610541565b5090565b6060613029848460008561312f565b949350505050565b600b546001600160a01b0316156105985761304a611f74565b600b546040516370a0823160e01b81526000916001600160a01b0316906370a082319061307b903090600401613916565b60206040518083038186803b15801561309357600080fd5b505afa1580156130a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130cb9190613add565b90508015611b1a57600060065461271014156130e8576001613114565b600b546131149061310c90613106906001600160a01b031686613257565b846133d5565b6006546134e4565b600b54909150611078906001600160a01b0316848484613507565b6060824710156131905760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610541565b843b6131de5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610541565b600080866001600160a01b031685876040516131fa9190613e3b565b60006040518083038185875af1925050503d8060008114613237576040519150601f19603f3d011682016040523d82523d6000602084013e61323c565b606091505b509150915061324c8282866136c8565b979650505050505050565b6000546060906001600160a01b038481169116148061328357506000546001600160a01b038381169116145b1561331557604080516002808252606082018352909160208301908036833701905050905082816000815181106132bc576132bc613de4565b60200260200101906001600160a01b031690816001600160a01b03168152505081816001815181106132f0576132f0613de4565b60200260200101906001600160a01b031690816001600160a01b031681525050610757565b604080516003808252608082019092529060208201606080368337019050509050828160008151811061334a5761334a613de4565b6001600160a01b03928316602091820292909201015260005482519116908290600190811061337b5761337b613de4565b60200260200101906001600160a01b031690816001600160a01b03168152505081816002815181106133af576133af613de4565b60200260200101906001600160a01b031690816001600160a01b03168152505092915050565b6000600183511161341e5760405162461bcd60e51b81526020600482015260136024820152720d2dcecc2d8d2c85adee4c2c6d8ca5ae0c2e8d606b1b6044820152606401610541565b50806000805b600185516134329190613dcd565b8110156134dc5761348285828151811061344e5761344e613de4565b6020026020010151868360016134649190613db5565b8151811061347457613474613de4565b602002602001015185613701565b9093509150816134ca5760405162461bcd60e51b8152602060048201526013602482015272696e76616c69642d6f7261636c652d7261746560681b6044820152606401610541565b806134d481613c51565b915050613424565b505092915050565b60006127106134f38382613dcd565b6134fd9085613c95565b611da79190613cb4565b600354604051631d1f307960e31b81526001600160a01b038681166004830152858116602483015260448201859052600092839283929091169063e8f983c89060640160006040518083038186803b15801561356257600080fd5b505afa158015613576573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261359e9190810190613e57565b92509250925083600014156135b257600193505b81156136bf57600354604051636e74a6f760e01b8152600481018390526001600160a01b0390911690636e74a6f79060240160206040518083038186803b1580156135fc57600080fd5b505afa158015613610573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136349190613a26565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b8152600401613667959493929190613ea7565b600060405180830381600087803b15801561368157600080fd5b505af1158015613695573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136bd9190810190613ee3565b505b50505050505050565b606083156136d7575081611da7565b8251156136e75782518084602001fd5b8160405162461bcd60e51b815260040161054191906139c6565b60008060005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561375557600080fd5b505afa158015613769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061378d9190613add565b8110156138d357600354600454604080516001600160a01b038a811660208301528981168284015260608201899052608082019390935260a08082018690528251808303909101815260c08201909252600093849316916137fa9163b67bb24d60e01b919060e001613f69565b60408051601f198184030181529082905261381491613e3b565b6000604051808303816000865af19150503d8060008114613851576040519150601f19603f3d011682016040523d82523d6000602084013e613856565b606091505b509150915081156138be57600080828060200190518101906138789190613f9a565b50915091506004544261388b9190613dcd565b8111801561389857508115155b156138ad57509450600193506138dc92505050565b6000809650965050505050506138dc565b505080806138cb90613c51565b915050613707565b50600080915091505b935093915050565b6001600160a01b038116811461059857600080fd5b60006020828403121561390b57600080fd5b8135611da7816138e4565b6001600160a01b0391909116815260200190565b60006020828403121561393c57600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561397c5781516001600160a01b031687529582019590820190600101613957565b509495945050505050565b602081526000611da76020830184613943565b60005b838110156139b557818101518382015260200161399d565b83811115611fd25750506000910152565b60208152600082518060208401526139e581604085016020870161399a565b601f01601f19169190910160400192915050565b60008060408385031215613a0c57600080fd5b50508035926020909101359150565b8051612ee2816138e4565b600060208284031215613a3857600080fd5b8151611da7816138e4565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b600060208284031215613aef57600080fd5b5051919050565b600181811c90821680613b0a57607f821691505b60208210811415612ecb57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613b6a57613b6a613b2b565b604052919050565b600080600080600060a08688031215613b8a57600080fd5b855167ffffffffffffffff80821115613ba257600080fd5b818801915088601f830112613bb657600080fd5b815181811115613bc857613bc8613b2b565b613bdb601f8201601f1916602001613b41565b9150808252896020828501011115613bf257600080fd5b613c0381602084016020860161399a565b509550613c14905060208701613a1b565b9350613c2260408701613a1b565b6060870151608090970151959894975095949392505050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415613c6557613c65613c3b565b5060010190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6000816000190483118215151615613caf57613caf613c3b565b500290565b600082613cd157634e487b7160e01b600052601260045260246000fd5b500490565b600067ffffffffffffffff821115613cf057613cf0613b2b565b5060051b60200190565b600082601f830112613d0b57600080fd5b81516020613d20613d1b83613cd6565b613b41565b82815260059290921b84018101918181019086841115613d3f57600080fd5b8286015b84811015613d63578051613d56816138e4565b8352918301918301613d43565b509695505050505050565b60008060408385031215613d8157600080fd5b825167ffffffffffffffff811115613d9857600080fd5b613da485828601613cfa565b925050602083015190509250929050565b60008219821115613dc857613dc8613c3b565b500190565b600082821015613ddf57613ddf613c3b565b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b80518015158114612ee257600080fd5b600060208284031215613e3257600080fd5b611da782613e10565b60008251613e4d81846020870161399a565b9190910192915050565b600080600060608486031215613e6c57600080fd5b835167ffffffffffffffff811115613e8357600080fd5b613e8f86828701613cfa565b93505060208401519150604084015190509250925092565b85815284602082015260a060408201526000613ec660a0830186613943565b6001600160a01b0394909416606083015250608001529392505050565b60006020808385031215613ef657600080fd5b825167ffffffffffffffff811115613f0d57600080fd5b8301601f81018513613f1e57600080fd5b8051613f2c613d1b82613cd6565b81815260059190911b82018301908381019087831115613f4b57600080fd5b928401925b8284101561324c57835182529284019290840190613f50565b6001600160e01b0319831681528151600090613f8c81600485016020870161399a565b919091016004019392505050565b600080600060608486031215613faf57600080fd5b8351925060208401519150613fc660408501613e10565b9050925092509256fea2646970667358221220b756d6cc5e7f6a659563f908895a7fd98d13a09c632440989c782b5294eae8da64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c65760003560e01c80639b0db5d0116100fa578063ce5494bb1161009d578063ce5494bb146103dc578063d2c35ce8146103ef578063d4c3eea014610402578063e00af4a71461040a578063e645c2021461041d578063ec78e83214610425578063f7c618c114610438578063fc0c546a1461044b578063ffa1ad741461045c57600080fd5b80639b0db5d01461034d578063a3f4df7e14610356578063a923b2a61461036b578063aa1018861461037e578063acc2166a14610386578063b2016bd414610399578063c415b95c146103c0578063cd2d7ebe146103d357600080fd5b80634c36fad71161016d5780634c36fad71461028e5780634dda5222146102a15780635f82c67e146102b457806367f5e4b8146102db578063709d039d146102ee5780637d7c2a1c14610301578063805c5e4014610309578063951dc22c1461033057806399b71d5c1461034557600080fd5b806314ae9f2e146101cb57806316f0115b146101e05780631aedeabe1461021d5780632e1a7d4d14610234578063372500ab146102475780634032b72b1461024f57806342189c8f14610262578063440d72481461026b575b600080fd5b6101de6101d93660046138f9565b610480565b005b6102077f000000000000000000000000000000000000000000000000000000000000000081565b6040516102149190613916565b60405180910390f35b61022660065481565b604051908152602001610214565b6101de61024236600461392a565b61059b565b6101de6105ec565b6101de61025d3660046138f9565b61061f565b61022660045481565b61027e6102793660046138f9565b61072b565b6040519015158152602001610214565b6101de61029c3660046138f9565b61075d565b6101de6102af36600461392a565b610910565b6102077f000000000000000000000000000000000000000000000000000000000000000081565b6101de6102e936600461392a565b610e62565b600354610207906001600160a01b031681565b6101de610fae565b6102077f000000000000000000000000000000000000000000000000000000000000000081565b61033861107d565b6040516102149190613987565b6101de61108e565b610226600c5481565b61035e6110c8565b60405161021491906139c6565b6101de6103793660046139f9565b611156565b6101de61138b565b600d54610207906001600160a01b031681565b6102077f000000000000000000000000000000000000000000000000000000000000000081565b600254610207906001600160a01b031681565b61022660055481565b6101de6103ea3660046138f9565b6113b8565b6101de6103fd3660046138f9565b6116aa565b610226611873565b6101de6104183660046138f9565b6118ff565b610226611b1e565b600154610207906001600160a01b031681565b600b54610207906001600160a01b031681565b6001546001600160a01b0316610207565b61035e604051806040016040528060058152602001640342e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156104d957600080fd5b505afa1580156104ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105119190613a26565b6001600160a01b0316336001600160a01b03161461054a5760405162461bcd60e51b815260040161054190613a43565b60405180910390fd5b610555600782611ec3565b6105985760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b6044820152606401610541565b50565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146105e35760405162461bcd60e51b815260040161054190613a7a565b61059881611ed8565b6105f9335b600790611f52565b6106155760405162461bcd60e51b815260040161054190613aad565b61061d611f74565b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561067857600080fd5b505afa15801561068c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b09190613a26565b6001600160a01b0316336001600160a01b0316146106e05760405162461bcd60e51b815260040161054190613a43565b6106eb600782611d92565b6105985760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610541565b600a546000906001600160a01b03838116911614806107575750600b546001600160a01b038381169116145b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156107b657600080fd5b505afa1580156107ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ee9190613a26565b6001600160a01b0316336001600160a01b03161461081e5760405162461bcd60e51b815260040161054190613a43565b6001600160a01b0381166108695760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b6044820152606401610541565b6003546001600160a01b03828116911614156108b45760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b6044820152606401610541565b6003546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561096957600080fd5b505afa15801561097d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a19190613a26565b6001600160a01b0316336001600160a01b0316146109d15760405162461bcd60e51b815260040161054190613a43565b6000610a276001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016837f0000000000000000000000000000000000000000000000000000000000000000611c56565b600a549091506001600160a01b0380831691161415610a795760405162461bcd60e51b815260206004820152600e60248201526d1cd85b594b599d5cd94b5c1bdbdb60921b6044820152606401610541565b600a546040516370a0823160e01b81526001600160a01b039091169063db006a759082906370a0823190610ab1903090600401613916565b60206040518083038186803b158015610ac957600080fd5b505afa158015610add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b019190613add565b6040518263ffffffff1660e01b8152600401610b1f91815260200190565b602060405180830381600087803b158015610b3957600080fd5b505af1158015610b4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b719190613add565b15610bbe5760405162461bcd60e51b815260206004820152601e60248201527f77697468647261772d66726f6d2d667573652d706f6f6c2d6661696c656400006044820152606401610541565b600a54610bf9906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691166000611fd8565b610c2f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682600019611fd8565b806001600160a01b031663a0712d687f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610c8a9190613916565b60206040518083038186803b158015610ca257600080fd5b505afa158015610cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cda9190613add565b6040518263ffffffff1660e01b8152600401610cf891815260200190565b602060405180830381600087803b158015610d1257600080fd5b505af1158015610d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4a9190613add565b15610d975760405162461bcd60e51b815260206004820152601b60248201527f6465706f7369742d746f2d667573652d706f6f6c2d6661696c656400000000006044820152606401610541565b600a546040516001600160a01b0380841692169084907f7725294be69fa7d941c001b388e2086daa9acdf58fbbc7aef3fd8cce3c316b6e90600090a4600a80546001600160a01b03199081166001600160a01b0384811691821790935560018054909216179055600c839055610e2f907f00000000000000000000000000000000000000000000000000000000000000001683611dae565b600b80546001600160a01b039283166001600160a01b031991821617909155600d80549390921692169190911790555050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610ebb57600080fd5b505afa158015610ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef39190613a26565b6001600160a01b0316336001600160a01b031614610f235760405162461bcd60e51b815260040161054190613a43565b612710811115610f6e5760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b6044820152606401610541565b60065460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600655565b610fb7336105f1565b610fd35760405162461bcd60e51b815260040161054190613aad565b6000806000610fe061212f565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b15801561105857600080fd5b505af115801561106c573d6000803e3d6000fd5b5050505061107861229b565b505050565b6060611089600761240d565b905090565b611097336105f1565b6110b35760405162461bcd60e51b815260040161054190613aad565b6110bd600061241a565b61061d60001961241a565b600980546110d590613af6565b80601f016020809104026020016040519081016040528092919081815260200182805461110190613af6565b801561114e5780601f106111235761010080835404028352916020019161114e565b820191906000526020600020905b81548152906001019060200180831161113157829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156111af57600080fd5b505afa1580156111c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e79190613a26565b6001600160a01b0316336001600160a01b0316146112175760405162461bcd60e51b815260040161054190613a43565b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561126557600080fd5b505afa158015611279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129d9190613add565b81106112e25760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b6044820152606401610541565b816112ed5760045491505b603b82116113355760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b6044820152606401610541565b6004546005546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600491909155600555565b611394336105f1565b6113b05760405162461bcd60e51b815260040161054190613aad565b61061d6125ec565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146114005760405162461bcd60e51b815260040161054190613a7a565b6001600160a01b0381166114565760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f000000006044820152606401610541565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b957600080fd5b505afa1580156114cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f19190613a26565b6001600160a01b0316146115405760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b6044820152606401610541565b6001546040516370a0823160e01b81526115d99183916001600160a01b03909116906370a0823190611576903090600401613916565b60206040518083038186803b15801561158e57600080fd5b505afa1580156115a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c69190613add565b6001546001600160a01b0316919061277a565b610598817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016116299190613916565b60206040518083038186803b15801561164157600080fd5b505afa158015611655573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116799190613add565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061277a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561170357600080fd5b505afa158015611717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173b9190613a26565b6001600160a01b0316336001600160a01b03161461176b5760405162461bcd60e51b815260040161054190613a43565b6001600160a01b0381166117c15760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f0000006044820152606401610541565b6002546001600160a01b03828116911614156118175760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b6044820152606401610541565b6002546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b600a546040516370a0823160e01b8152600091611089916001600160a01b03909116906370a08231906118aa903090600401613916565b60206040518083038186803b1580156118c257600080fd5b505afa1580156118d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fa9190613add565b6127aa565b611908336105f1565b6119245760405162461bcd60e51b815260040161054190613aad565b6002546001600160a01b03166119745760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b6044820152606401610541565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156119f65760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c006044820152606401610541565b6119ff8161072b565b15611a435760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b6044820152606401610541565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611a7e57600254610598906001600160a01b03164761284f565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190611aad903090600401613916565b60206040518083038186803b158015611ac557600080fd5b505afa158015611ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611afd9190613add565b600254909150611b1a906001600160a01b0384811691168361277a565b5050565b600b546000906001600160a01b031615611bc157611b3a611f74565b600b546040516370a0823160e01b8152611089916001600160a01b0316906370a0823190611b6c903090600401613916565b60206040518083038186803b158015611b8457600080fd5b505afa158015611b98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bbc9190613add565b612968565b6110896000612968565b6040516315895f4760e31b8152600481018290526000906001600160a01b0384169063ac4afa389060240160006040518083038186803b158015611c0e57600080fd5b505afa158015611c22573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c4a9190810190613b72565b50909695505050505050565b600080611c638585611bcb565b90506001600160a01b038116611cbb5760405162461bcd60e51b815260206004820152601d60248201527f726172692d667573652d696e76616c69642d636f6d7074726f6c6c65720000006044820152606401610541565b6040516318ffa3fd60e11b81526001600160a01b038216906331ff47fa90611ce7908690600401613916565b60206040518083038186803b158015611cff57600080fd5b505afa158015611d13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d379190613a26565b91506001600160a01b038216611d8a5760405162461bcd60e51b81526020600482015260186024820152773930b93496b33ab9b296b4b73b30b634b216b1ba37b5b2b760411b6044820152606401610541565b509392505050565b6000611da7836001600160a01b038416612a5f565b9392505050565b600080600080611dbe8686611bcb565b905063c6c5b0dd60e01b813b80611e175760405162461bcd60e51b815260206004820152601a60248201527f636f6d7074726f6c6c65722d6e6f742d612d636f6e74726163740000000000006044820152606401610541565b6040518281526000600482015260208160248387617530fa9051965093506001600160a01b03861615611eb857856001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611e7d57600080fd5b505afa158015611e91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb59190613a26565b94505b505050509250929050565b6000611da7836001600160a01b038416612aae565b611ee181612ba1565b506105987f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016116299190613916565b6001600160a01b03811660009081526001830160205260408120541515611da7565b600d54604051633bd73ee360e21b81526001600160a01b039091169063ef5cfb8c90611fa4903090600401613916565b600060405180830381600087803b158015611fbe57600080fd5b505af1158015611fd2573d6000803e3d6000fd5b50505050565b8015806120615750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561202757600080fd5b505afa15801561203b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205f9190613add565b155b6120cc5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610541565b6040516001600160a01b03831660248201526044810182905261107890849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612c97565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b81526004016121819190613916565b60206040518083038186803b15801561219957600080fd5b505afa1580156121ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d19190613add565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b81526004016122219190613916565b60206040518083038186803b15801561223957600080fd5b505afa15801561224d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122719190613add565b905061227c81612d69565b945061228781612e80565b935061229282612ed1565b92505050909192565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906122ea903090600401613916565b60206040518083038186803b15801561230257600080fd5b505afa158015612316573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233a9190613add565b9050801561059857600a5460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d6890602401602060405180830381600087803b15801561238857600080fd5b505af115801561239c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c09190613add565b156105985760405162461bcd60e51b815260206004820152601a60248201527f6465706f7369742d746f2d636f6d706f756e642d6661696c65640000000000006044820152606401610541565b60606000611da783612ee7565b61246e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083611fd8565b600a546124a8906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683611fd8565b600b546001600160a01b0316156105985760005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561250a57600080fd5b505afa15801561251e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125429190613add565b811015611b1a57600354604051636e74a6f760e01b8152600481018390526125da916001600160a01b031690636e74a6f79060240160206040518083038186803b15801561258f57600080fd5b505afa1580156125a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c79190613a26565b600b546001600160a01b03169084611fd8565b806125e481613c51565b9150506124bc565b600b546001600160a01b03161561269357600354600b5460005460048054600554604051630f30f2d360e21b81526001600160a01b0396871696633cc3cb4c9661263f9690821695911693929101613c6c565b602060405180830381600087803b15801561265957600080fd5b505af115801561266d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126919190613a26565b505b6000547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161461061d5760035460005460048054600554604051630f30f2d360e21b81526001600160a01b0395861695633cc3cb4c95612728959116937f0000000000000000000000000000000000000000000000000000000000000000939092909101613c6c565b602060405180830381600087803b15801561274257600080fd5b505af1158015612756573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105989190613a26565b6040516001600160a01b03831660248201526044810182905261107890849063a9059cbb60e01b906064016120f8565b6000670de0b6b3a7640000600a60009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561280357600080fd5b505afa158015612817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283b9190613add565b6128459084613c95565b6107579190613cb4565b8047101561289f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610541565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146128ec576040519150601f19603f3d011682016040523d82523d6000602084013e6128f1565b606091505b50509050806110785760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610541565b60008115612a2357600354600b546040516340b4c54560e11b81526001600160a01b03928316926381698a8a926129cb929116907f0000000000000000000000000000000000000000000000000000000000000000908790600090600401613c6c565b60006040518083038186803b1580156129e357600080fd5b505afa1580156129f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a1f9190810190613d6e565b9150505b600a546040516370a0823160e01b8152612a55916001600160a01b0316906370a08231906118aa903090600401613916565b6107579082613db5565b6000818152600183016020526040812054612aa657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610757565b506000610757565b60008181526001830160205260408120548015612b97576000612ad2600183613dcd565b8554909150600090612ae690600190613dcd565b9050818114612b4b576000866000018281548110612b0657612b06613de4565b9060005260206000200154905080876000018481548110612b2957612b29613de4565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612b5c57612b5c613dfa565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610757565b6000915050610757565b600a546040516370a0823160e01b81526000918291612bd8916001600160a01b0316906370a08231906118aa903090600401613916565b90506000600a60009054906101000a90046001600160a01b03166001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b158015612c2a57600080fd5b505afa158015612c3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c629190613add565b90506000818510612c735781612c75565b845b9050612c8e838210612c875783612f43565b815b612f43565b95945050505050565b6000612cec826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661301a9092919063ffffffff16565b8051909150156110785780806020019051810190612d0a9190613e20565b6110785760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610541565b6000612d947f0000000000000000000000000000000000000000000000000000000000000000613031565b600a546040516370a0823160e01b8152600091612dcb916001600160a01b03909116906370a08231906118aa903090600401613916565b905082811115612de457612de2612c898483613dcd565b505b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612e30903090600401613916565b60206040518083038186803b158015612e4857600080fd5b505afa158015612e5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da79190613add565b600a546040516370a0823160e01b81526000918291612eb7916001600160a01b0316906370a08231906118aa903090600401613916565b905082811015612ecb57611da78184613dcd565b50919050565b60008115612ee25761075782612ba1565b919050565b606081600001805480602002602001604051908101604052809291908181526020018280548015612f3757602002820191906000526020600020905b815481526020019060010190808311612f23575b50505050509050919050565b6000811561301657600a5460405163852a12e360e01b8152600481018490526001600160a01b039091169063852a12e390602401602060405180830381600087803b158015612f9157600080fd5b505af1158015612fa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc99190613add565b156130165760405162461bcd60e51b815260206004820152601d60248201527f77697468647261772d66726f6d2d636f6d706f756e642d6661696c65640000006044820152606401610541565b5090565b6060613029848460008561312f565b949350505050565b600b546001600160a01b0316156105985761304a611f74565b600b546040516370a0823160e01b81526000916001600160a01b0316906370a082319061307b903090600401613916565b60206040518083038186803b15801561309357600080fd5b505afa1580156130a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130cb9190613add565b90508015611b1a57600060065461271014156130e8576001613114565b600b546131149061310c90613106906001600160a01b031686613257565b846133d5565b6006546134e4565b600b54909150611078906001600160a01b0316848484613507565b6060824710156131905760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610541565b843b6131de5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610541565b600080866001600160a01b031685876040516131fa9190613e3b565b60006040518083038185875af1925050503d8060008114613237576040519150601f19603f3d011682016040523d82523d6000602084013e61323c565b606091505b509150915061324c8282866136c8565b979650505050505050565b6000546060906001600160a01b038481169116148061328357506000546001600160a01b038381169116145b1561331557604080516002808252606082018352909160208301908036833701905050905082816000815181106132bc576132bc613de4565b60200260200101906001600160a01b031690816001600160a01b03168152505081816001815181106132f0576132f0613de4565b60200260200101906001600160a01b031690816001600160a01b031681525050610757565b604080516003808252608082019092529060208201606080368337019050509050828160008151811061334a5761334a613de4565b6001600160a01b03928316602091820292909201015260005482519116908290600190811061337b5761337b613de4565b60200260200101906001600160a01b031690816001600160a01b03168152505081816002815181106133af576133af613de4565b60200260200101906001600160a01b031690816001600160a01b03168152505092915050565b6000600183511161341e5760405162461bcd60e51b81526020600482015260136024820152720d2dcecc2d8d2c85adee4c2c6d8ca5ae0c2e8d606b1b6044820152606401610541565b50806000805b600185516134329190613dcd565b8110156134dc5761348285828151811061344e5761344e613de4565b6020026020010151868360016134649190613db5565b8151811061347457613474613de4565b602002602001015185613701565b9093509150816134ca5760405162461bcd60e51b8152602060048201526013602482015272696e76616c69642d6f7261636c652d7261746560681b6044820152606401610541565b806134d481613c51565b915050613424565b505092915050565b60006127106134f38382613dcd565b6134fd9085613c95565b611da79190613cb4565b600354604051631d1f307960e31b81526001600160a01b038681166004830152858116602483015260448201859052600092839283929091169063e8f983c89060640160006040518083038186803b15801561356257600080fd5b505afa158015613576573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261359e9190810190613e57565b92509250925083600014156135b257600193505b81156136bf57600354604051636e74a6f760e01b8152600481018390526001600160a01b0390911690636e74a6f79060240160206040518083038186803b1580156135fc57600080fd5b505afa158015613610573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136349190613a26565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b8152600401613667959493929190613ea7565b600060405180830381600087803b15801561368157600080fd5b505af1158015613695573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136bd9190810190613ee3565b505b50505050505050565b606083156136d7575081611da7565b8251156136e75782518084602001fd5b8160405162461bcd60e51b815260040161054191906139c6565b60008060005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561375557600080fd5b505afa158015613769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061378d9190613add565b8110156138d357600354600454604080516001600160a01b038a811660208301528981168284015260608201899052608082019390935260a08082018690528251808303909101815260c08201909252600093849316916137fa9163b67bb24d60e01b919060e001613f69565b60408051601f198184030181529082905261381491613e3b565b6000604051808303816000865af19150503d8060008114613851576040519150601f19603f3d011682016040523d82523d6000602084013e613856565b606091505b509150915081156138be57600080828060200190518101906138789190613f9a565b50915091506004544261388b9190613dcd565b8111801561389857508115155b156138ad57509450600193506138dc92505050565b6000809650965050505050506138dc565b505080806138cb90613c51565b915050613707565b50600080915091505b935093915050565b6001600160a01b038116811461059857600080fd5b60006020828403121561390b57600080fd5b8135611da7816138e4565b6001600160a01b0391909116815260200190565b60006020828403121561393c57600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561397c5781516001600160a01b031687529582019590820190600101613957565b509495945050505050565b602081526000611da76020830184613943565b60005b838110156139b557818101518382015260200161399d565b83811115611fd25750506000910152565b60208152600082518060208401526139e581604085016020870161399a565b601f01601f19169190910160400192915050565b60008060408385031215613a0c57600080fd5b50508035926020909101359150565b8051612ee2816138e4565b600060208284031215613a3857600080fd5b8151611da7816138e4565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b600060208284031215613aef57600080fd5b5051919050565b600181811c90821680613b0a57607f821691505b60208210811415612ecb57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613b6a57613b6a613b2b565b604052919050565b600080600080600060a08688031215613b8a57600080fd5b855167ffffffffffffffff80821115613ba257600080fd5b818801915088601f830112613bb657600080fd5b815181811115613bc857613bc8613b2b565b613bdb601f8201601f1916602001613b41565b9150808252896020828501011115613bf257600080fd5b613c0381602084016020860161399a565b509550613c14905060208701613a1b565b9350613c2260408701613a1b565b6060870151608090970151959894975095949392505050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415613c6557613c65613c3b565b5060010190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6000816000190483118215151615613caf57613caf613c3b565b500290565b600082613cd157634e487b7160e01b600052601260045260246000fd5b500490565b600067ffffffffffffffff821115613cf057613cf0613b2b565b5060051b60200190565b600082601f830112613d0b57600080fd5b81516020613d20613d1b83613cd6565b613b41565b82815260059290921b84018101918181019086841115613d3f57600080fd5b8286015b84811015613d63578051613d56816138e4565b8352918301918301613d43565b509695505050505050565b60008060408385031215613d8157600080fd5b825167ffffffffffffffff811115613d9857600080fd5b613da485828601613cfa565b925050602083015190509250929050565b60008219821115613dc857613dc8613c3b565b500190565b600082821015613ddf57613ddf613c3b565b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b80518015158114612ee257600080fd5b600060208284031215613e3257600080fd5b611da782613e10565b60008251613e4d81846020870161399a565b9190910192915050565b600080600060608486031215613e6c57600080fd5b835167ffffffffffffffff811115613e8357600080fd5b613e8f86828701613cfa565b93505060208401519150604084015190509250925092565b85815284602082015260a060408201526000613ec660a0830186613943565b6001600160a01b0394909416606083015250608001529392505050565b60006020808385031215613ef657600080fd5b825167ffffffffffffffff811115613f0d57600080fd5b8301601f81018513613f1e57600080fd5b8051613f2c613d1b82613cd6565b81815260059190911b82018301908381019087831115613f4b57600080fd5b928401925b8284101561324c57835182529284019290840190613f50565b6001600160e01b0319831681528151600090613f8c81600485016020870161399a565b919091016004019392505050565b600080600060608486031215613faf57600080fd5b8351925060208401519150613fc660408501613e10565b9050925092509256fea2646970667358221220b756d6cc5e7f6a659563f908895a7fd98d13a09c632440989c782b5294eae8da64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken()": {
        "details": "Approve all required tokens"
      },
      "claimRewards()": {
        "details": "Manually claim rewards from rewardDistributor by keeper"
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "migrateFusePool(uint256)": {
        "details": "Redeems cTokens from current fuse pool and mints cTokens of new Fuse Pool",
        "params": {
          "_newPoolId": "Fuse Pool ID"
        }
      },
      "rebalance()": {
        "details": "Rebalance profit, loss and investment of this strategy"
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "sweepERC20(address)": {
        "details": "sweep given token to feeCollector of strategy",
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "totalValue()": {
        "details": "Report total value in collateral token"
      },
      "totalValueCurrent()": {
        "details": "Report total value in collateral token"
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapManager(address)": {
        "params": {
          "_swapManager": "swap manager address"
        }
      },
      "withdraw(uint256)": {
        "details": "Withdraw collateral token from lending pool.",
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "title": "This strategy will deposit collateral token in a Rari Fuse Pool and earn interest.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "claimRewards()": {
        "notice": "Properly tests if reward claim works"
      },
      "isReservedToken(address)": {
        "notice": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "migrateFusePool(uint256)": {
        "notice": "Changes the underlying Fuse Pool to a new one"
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "token()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "totalValue()": {
        "notice": "Calculate total value using underlying token"
      },
      "totalValueCurrent()": {
        "notice": "Calculate total value of asset under management (in real-time)"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapManager(address)": {
        "notice": "Update swap manager address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13804,
        "contract": "contracts/strategies/rari-fuse/RariFuseStrategyAPE.sol:RariFuseStrategyAPE",
        "label": "WETH",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13809,
        "contract": "contracts/strategies/rari-fuse/RariFuseStrategyAPE.sol:RariFuseStrategyAPE",
        "label": "receiptToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 13815,
        "contract": "contracts/strategies/rari-fuse/RariFuseStrategyAPE.sol:RariFuseStrategyAPE",
        "label": "feeCollector",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 13818,
        "contract": "contracts/strategies/rari-fuse/RariFuseStrategyAPE.sol:RariFuseStrategyAPE",
        "label": "swapManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISwapManager)5430"
      },
      {
        "astId": 13821,
        "contract": "contracts/strategies/rari-fuse/RariFuseStrategyAPE.sol:RariFuseStrategyAPE",
        "label": "oraclePeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 13824,
        "contract": "contracts/strategies/rari-fuse/RariFuseStrategyAPE.sol:RariFuseStrategyAPE",
        "label": "oracleRouterIdx",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 13827,
        "contract": "contracts/strategies/rari-fuse/RariFuseStrategyAPE.sol:RariFuseStrategyAPE",
        "label": "swapSlippage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 13830,
        "contract": "contracts/strategies/rari-fuse/RariFuseStrategyAPE.sol:RariFuseStrategyAPE",
        "label": "_keepers",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(AddressSet)4399_storage"
      },
      {
        "astId": 22986,
        "contract": "contracts/strategies/rari-fuse/RariFuseStrategyAPE.sol:RariFuseStrategyAPE",
        "label": "NAME",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 22992,
        "contract": "contracts/strategies/rari-fuse/RariFuseStrategyAPE.sol:RariFuseStrategyAPE",
        "label": "cToken",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(CToken)5560"
      },
      {
        "astId": 22997,
        "contract": "contracts/strategies/rari-fuse/RariFuseStrategyAPE.sol:RariFuseStrategyAPE",
        "label": "rewardToken",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 36789,
        "contract": "contracts/strategies/rari-fuse/RariFuseStrategyAPE.sol:RariFuseStrategyAPE",
        "label": "fusePoolId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 36794,
        "contract": "contracts/strategies/rari-fuse/RariFuseStrategyAPE.sol:RariFuseStrategyAPE",
        "label": "rewardDistributor",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CToken)5560": {
        "encoding": "inplace",
        "label": "contract CToken",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapManager)5430": {
        "encoding": "inplace",
        "label": "contract ISwapManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)4399_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4398,
            "contract": "contracts/strategies/rari-fuse/RariFuseStrategyAPE.sol:RariFuseStrategyAPE",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4098_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4098_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4093,
            "contract": "contracts/strategies/rari-fuse/RariFuseStrategyAPE.sol:RariFuseStrategyAPE",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4097,
            "contract": "contracts/strategies/rari-fuse/RariFuseStrategyAPE.sol:RariFuseStrategyAPE",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}