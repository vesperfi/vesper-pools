{
  "language": "Solidity",
  "sources": {
    "contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/strategies/Strategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"../interfaces/bloq/ISwapManager.sol\";\nimport \"../interfaces/vesper/IStrategy.sol\";\nimport \"../interfaces/vesper/IVesperPool.sol\";\n\nabstract contract Strategy is IStrategy, Context {\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\n\n    // solhint-disable-next-line  var-name-mixedcase\n    address internal WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    IERC20 public immutable collateralToken;\n    address public receiptToken;\n    address public immutable override pool;\n    address public override feeCollector;\n    ISwapManager public swapManager;\n\n    uint256 public oraclePeriod = 3600; // 1h\n    uint256 public oracleRouterIdx = 0; // Uniswap V2\n    uint256 public swapSlippage = 10000; // 100% Don't use oracles by default\n\n    EnumerableSet.AddressSet private _keepers;\n\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\n    event UpdatedSwapSlippage(uint256 oldSwapSlippage, uint256 newSwapSlippage);\n    event UpdatedOracleConfig(uint256 oldPeriod, uint256 newPeriod, uint256 oldRouterIdx, uint256 newRouterIdx);\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _receiptToken\n    ) {\n        require(_pool != address(0), \"pool-address-is-zero\");\n        require(_swapManager != address(0), \"sm-address-is-zero\");\n        swapManager = ISwapManager(_swapManager);\n        pool = _pool;\n        collateralToken = IVesperPool(_pool).token();\n        receiptToken = _receiptToken;\n        require(_keepers.add(_msgSender()), \"add-keeper-failed\");\n    }\n\n    modifier onlyGovernor {\n        require(_msgSender() == IVesperPool(pool).governor(), \"caller-is-not-the-governor\");\n        _;\n    }\n\n    modifier onlyKeeper() {\n        require(_keepers.contains(_msgSender()), \"caller-is-not-a-keeper\");\n        _;\n    }\n\n    modifier onlyPool() {\n        require(_msgSender() == pool, \"caller-is-not-vesper-pool\");\n        _;\n    }\n\n    /**\n     * @notice Add given address in keepers list.\n     * @param _keeperAddress keeper address to add.\n     */\n    function addKeeper(address _keeperAddress) external onlyGovernor {\n        require(_keepers.add(_keeperAddress), \"add-keeper-failed\");\n    }\n\n    /// @notice Return list of keepers\n    function keepers() external view override returns (address[] memory) {\n        return _keepers.values();\n    }\n\n    /**\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\n     * @param _newStrategy Address of new strategy\n     */\n    function migrate(address _newStrategy) external virtual override onlyPool {\n        require(_newStrategy != address(0), \"new-strategy-address-is-zero\");\n        require(IStrategy(_newStrategy).pool() == pool, \"not-valid-new-strategy\");\n        _beforeMigration(_newStrategy);\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Remove given address from keepers list.\n     * @param _keeperAddress keeper address to remove.\n     */\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\n        require(_keepers.remove(_keeperAddress), \"remove-keeper-failed\");\n    }\n\n    /**\n     * @notice Update fee collector\n     * @param _feeCollector fee collector address\n     */\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\n        require(_feeCollector != address(0), \"fee-collector-address-is-zero\");\n        require(_feeCollector != feeCollector, \"fee-collector-is-same\");\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\n        feeCollector = _feeCollector;\n    }\n\n    /**\n     * @notice Update swap manager address\n     * @param _swapManager swap manager address\n     */\n    function updateSwapManager(address _swapManager) external onlyGovernor {\n        require(_swapManager != address(0), \"sm-address-is-zero\");\n        require(_swapManager != address(swapManager), \"sm-is-same\");\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\n        swapManager = ISwapManager(_swapManager);\n    }\n\n    function updateSwapSlippage(uint256 _newSwapSlippage) external onlyGovernor {\n        require(_newSwapSlippage <= 10000, \"invalid-slippage-value\");\n        emit UpdatedSwapSlippage(swapSlippage, _newSwapSlippage);\n        swapSlippage = _newSwapSlippage;\n    }\n\n    function updateOracleConfig(uint256 _newPeriod, uint256 _newRouterIdx) external onlyGovernor {\n        require(_newRouterIdx < swapManager.N_DEX(), \"invalid-router-index\");\n        if (_newPeriod == 0) _newPeriod = oraclePeriod;\n        require(_newPeriod > 59, \"invalid-oracle-period\");\n        emit UpdatedOracleConfig(oraclePeriod, _newPeriod, oracleRouterIdx, _newRouterIdx);\n        oraclePeriod = _newPeriod;\n        oracleRouterIdx = _newRouterIdx;\n    }\n\n    /// @dev Approve all required tokens\n    function approveToken() external onlyKeeper {\n        _approveToken(0);\n        _approveToken(MAX_UINT_VALUE);\n    }\n\n    function setupOracles() external onlyKeeper {\n        _setupOracles();\n    }\n\n    /**\n     * @dev Withdraw collateral token from lending pool.\n     * @param _amount Amount of collateral token\n     */\n    function withdraw(uint256 _amount) external override onlyPool {\n        _withdraw(_amount);\n    }\n\n    /**\n     * @dev Rebalance profit, loss and investment of this strategy\n     */\n    function rebalance() external virtual override onlyKeeper {\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\n        _reinvest();\n    }\n\n    /**\n     * @dev sweep given token to feeCollector of strategy\n     * @param _fromToken token address to sweep\n     */\n    function sweepERC20(address _fromToken) external override onlyKeeper {\n        require(feeCollector != address(0), \"fee-collector-not-set\");\n        require(_fromToken != address(collateralToken), \"not-allowed-to-sweep-collateral\");\n        require(!isReservedToken(_fromToken), \"not-allowed-to-sweep\");\n        if (_fromToken == ETH) {\n            Address.sendValue(payable(feeCollector), address(this).balance);\n        } else {\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\n        }\n    }\n\n    /// @notice Returns address of token correspond to collateral token\n    function token() external view override returns (address) {\n        return receiptToken;\n    }\n\n    /**\n     * @notice Calculate total value of asset under management\n     * @dev Report total value in collateral token\n     */\n    function totalValue() public view virtual override returns (uint256 _value);\n\n    /**\n     * @notice Calculate total value of asset under management (in real-time)\n     * @dev Report total value in collateral token\n     */\n    function totalValueCurrent() external virtual override returns (uint256) {\n        return totalValue();\n    }\n\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\n    function isReservedToken(address _token) public view virtual override returns (bool);\n\n    /**\n     * @notice some strategy may want to prepare before doing migration.\n        Example In Maker old strategy want to give vault ownership to new strategy\n     * @param _newStrategy .\n     */\n    function _beforeMigration(address _newStrategy) internal virtual;\n\n    /**\n     *  @notice Generate report for current profit and loss. Also liquidate asset to payback\n     * excess debt, if any.\n     * @return _profit Calculate any realized profit and convert it to collateral, if not already.\n     * @return _loss Calculate any loss that strategy has made on investment. Convert into collateral token.\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\n     */\n    function _generateReport()\n        internal\n        virtual\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _payback\n        )\n    {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\n        _profit = _realizeProfit(_totalDebt);\n        _loss = _realizeLoss(_totalDebt);\n        _payback = _liquidate(_excessDebt);\n    }\n\n    function _calcAmtOutAfterSlippage(uint256 _amount, uint256 _slippage) internal pure returns (uint256) {\n        return (_amount * (10000 - _slippage)) / (10000);\n    }\n\n    function _simpleOraclePath(address _from, address _to) internal view returns (address[] memory path) {\n        if (_from == WETH || _to == WETH) {\n            path = new address[](2);\n            path[0] = _from;\n            path[1] = _to;\n        } else {\n            path = new address[](3);\n            path[0] = _from;\n            path[1] = WETH;\n            path[2] = _to;\n        }\n    }\n\n    function _consultOracle(\n        address _from,\n        address _to,\n        uint256 _amt\n    ) internal returns (uint256, bool) {\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            (bool _success, bytes memory _returnData) =\n                address(swapManager).call(\n                    abi.encodePacked(swapManager.consult.selector, abi.encode(_from, _to, _amt, oraclePeriod, i))\n                );\n            if (_success) {\n                (uint256 rate, uint256 lastUpdate, ) = abi.decode(_returnData, (uint256, uint256, bool));\n                if ((lastUpdate > (block.timestamp - oraclePeriod)) && (rate != 0)) return (rate, true);\n                return (0, false);\n            }\n        }\n        return (0, false);\n    }\n\n    function _getOracleRate(address[] memory path, uint256 _amountIn) internal returns (uint256 amountOut) {\n        require(path.length > 1, \"invalid-oracle-path\");\n        amountOut = _amountIn;\n        bool isValid;\n        for (uint256 i = 0; i < path.length - 1; i++) {\n            (amountOut, isValid) = _consultOracle(path[i], path[i + 1], amountOut);\n            require(isValid, \"invalid-oracle-rate\");\n        }\n    }\n\n    /**\n     * @notice Safe swap via Uniswap / Sushiswap (better rate of the two)\n     * @dev There are many scenarios when token swap via Uniswap can fail, so this\n     * method will wrap Uniswap call in a 'try catch' to make it fail safe.\n     * however, this method will throw minAmountOut is not met\n     * @param _from address of from token\n     * @param _to address of to token\n     * @param _amountIn Amount to be swapped\n     * @param _minAmountOut minimum amount out\n     */\n    function _safeSwap(\n        address _from,\n        address _to,\n        uint256 _amountIn,\n        uint256 _minAmountOut\n    ) internal {\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\n            swapManager.bestOutputFixedInput(_from, _to, _amountIn);\n        if (_minAmountOut == 0) _minAmountOut = 1;\n        if (amountOut != 0) {\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\n                _amountIn,\n                _minAmountOut,\n                path,\n                address(this),\n                block.timestamp\n            );\n        }\n    }\n\n    // These methods can be implemented by the inheriting strategy.\n    /* solhint-disable no-empty-blocks */\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual {}\n\n    /**\n     * @notice Set up any oracles that are needed for this strategy.\n     */\n    function _setupOracles() internal virtual {}\n\n    /* solhint-enable */\n\n    // These methods must be implemented by the inheriting strategy\n    function _withdraw(uint256 _amount) internal virtual;\n\n    function _approveToken(uint256 _amount) internal virtual;\n\n    /**\n     * @notice Withdraw collateral to payback excess debt in pool.\n     * @param _excessDebt Excess debt of strategy in collateral token\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\n     */\n    function _liquidate(uint256 _excessDebt) internal virtual returns (uint256 _payback);\n\n    /**\n     * @notice Calculate earning and withdraw/convert it into collateral token.\n     * @param _totalDebt Total collateral debt of this strategy\n     * @return _profit Profit in collateral token\n     */\n    function _realizeProfit(uint256 _totalDebt) internal virtual returns (uint256 _profit);\n\n    /**\n     * @notice Calculate loss\n     * @param _totalDebt Total collateral debt of this strategy\n     * @return _loss Realized loss in collateral token\n     */\n    function _realizeLoss(uint256 _totalDebt) internal virtual returns (uint256 _loss);\n\n    /**\n     * @notice Reinvest collateral.\n     * @dev Once we file report back in pool, we might have some collateral in hand\n     * which we want to reinvest aka deposit in lender/provider.\n     */\n    function _reinvest() internal virtual;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/interfaces/bloq/ISwapManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\n/* solhint-disable func-name-mixedcase */\n\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\n\ninterface ISwapManager {\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\n\n    function N_DEX() external view returns (uint256);\n\n    function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\n\n    function bestOutputFixedInput(\n        address _from,\n        address _to,\n        uint256 _amountIn\n    )\n        external\n        view\n        returns (\n            address[] memory path,\n            uint256 amountOut,\n            uint256 rIdx\n        );\n\n    function bestPathFixedInput(\n        address _from,\n        address _to,\n        uint256 _amountIn,\n        uint256 _i\n    ) external view returns (address[] memory path, uint256 amountOut);\n\n    function bestInputFixedOutput(\n        address _from,\n        address _to,\n        uint256 _amountOut\n    )\n        external\n        view\n        returns (\n            address[] memory path,\n            uint256 amountIn,\n            uint256 rIdx\n        );\n\n    function bestPathFixedOutput(\n        address _from,\n        address _to,\n        uint256 _amountOut,\n        uint256 _i\n    ) external view returns (address[] memory path, uint256 amountIn);\n\n    function safeGetAmountsOut(\n        uint256 _amountIn,\n        address[] memory _path,\n        uint256 _i\n    ) external view returns (uint256[] memory result);\n\n    function unsafeGetAmountsOut(\n        uint256 _amountIn,\n        address[] memory _path,\n        uint256 _i\n    ) external view returns (uint256[] memory result);\n\n    function safeGetAmountsIn(\n        uint256 _amountOut,\n        address[] memory _path,\n        uint256 _i\n    ) external view returns (uint256[] memory result);\n\n    function unsafeGetAmountsIn(\n        uint256 _amountOut,\n        address[] memory _path,\n        uint256 _i\n    ) external view returns (uint256[] memory result);\n\n    function comparePathsFixedInput(\n        address[] memory pathA,\n        address[] memory pathB,\n        uint256 _amountIn,\n        uint256 _i\n    ) external view returns (address[] memory path, uint256 amountOut);\n\n    function comparePathsFixedOutput(\n        address[] memory pathA,\n        address[] memory pathB,\n        uint256 _amountOut,\n        uint256 _i\n    ) external view returns (address[] memory path, uint256 amountIn);\n\n    function ours(address a) external view returns (bool);\n\n    function oracleCount() external view returns (uint256);\n\n    function oracleAt(uint256 idx) external view returns (address);\n\n    function getOracle(\n        address _tokenA,\n        address _tokenB,\n        uint256 _period,\n        uint256 _i\n    ) external view returns (address);\n\n    function createOrUpdateOracle(\n        address _tokenA,\n        address _tokenB,\n        uint256 _period,\n        uint256 _i\n    ) external returns (address oracleAddr);\n\n    function consultForFree(\n        address _from,\n        address _to,\n        uint256 _amountIn,\n        uint256 _period,\n        uint256 _i\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\n\n    /// get the data we want and pay the gas to update\n    function consult(\n        address _from,\n        address _to,\n        uint256 _amountIn,\n        uint256 _period,\n        uint256 _i\n    )\n        external\n        returns (\n            uint256 amountOut,\n            uint256 lastUpdatedAt,\n            bool updated\n        );\n\n    function updateOracles() external returns (uint256 updated, uint256 expected);\n\n    function updateOracles(address[] memory _oracleAddrs) external returns (uint256 updated, uint256 expected);\n}\n"
    },
    "contracts/interfaces/vesper/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\ninterface IStrategy {\n    function rebalance() external;\n\n    function sweepERC20(address _fromToken) external;\n\n    function withdraw(uint256 _amount) external;\n\n    function feeCollector() external view returns (address);\n\n    function isReservedToken(address _token) external view returns (bool);\n\n    function keepers() external view returns (address[] memory);\n\n    function migrate(address _newStrategy) external;\n\n    function token() external view returns (address);\n\n    function totalValue() external view returns (uint256);\n\n    function totalValueCurrent() external returns (uint256);\n\n    function pool() external view returns (address);\n}\n"
    },
    "contracts/interfaces/vesper/IVesperPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IVesperPool is IERC20 {\n    function deposit() external payable;\n\n    function deposit(uint256 _share) external;\n\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\n\n    function excessDebt(address _strategy) external view returns (uint256);\n\n    function permit(\n        address,\n        address,\n        uint256,\n        uint256,\n        uint8,\n        bytes32,\n        bytes32\n    ) external;\n\n    function poolRewards() external returns (address);\n\n    function reportEarning(\n        uint256 _profit,\n        uint256 _loss,\n        uint256 _payback\n    ) external;\n\n    function reportLoss(uint256 _loss) external;\n\n    function resetApproval() external;\n\n    function sweepERC20(address _fromToken) external;\n\n    function withdraw(uint256 _amount) external;\n\n    function withdrawETH(uint256 _amount) external;\n\n    function whitelistedWithdraw(uint256 _amount) external;\n\n    function governor() external view returns (address);\n\n    function keepers() external view returns (address[] memory);\n\n    function isKeeper(address _address) external view returns (bool);\n\n    function maintainers() external view returns (address[] memory);\n\n    function isMaintainer(address _address) external view returns (bool);\n\n    function feeCollector() external view returns (address);\n\n    function pricePerShare() external view returns (uint256);\n\n    function strategy(address _strategy)\n        external\n        view\n        returns (\n            bool _active,\n            uint256 _interestFee,\n            uint256 _debtRate,\n            uint256 _lastRebalance,\n            uint256 _totalDebt,\n            uint256 _totalLoss,\n            uint256 _totalProfit,\n            uint256 _debtRatio\n        );\n\n    function stopEverything() external view returns (bool);\n\n    function token() external view returns (IERC20);\n\n    function tokensHere() external view returns (uint256);\n\n    function totalDebtOf(address _strategy) external view returns (uint256);\n\n    function totalValue() external view returns (uint256);\n\n    function withdrawFee() external view returns (uint256);\n\n    // Function to get pricePerShare from V2 pools\n    function getPricePerShare() external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/strategies/yearn/YearnStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\nimport \"../Strategy.sol\";\nimport \"../../interfaces/yearn/IYToken.sol\";\n\n/// @title This strategy will deposit collateral token in a Yearn vault and earn interest.\ncontract YearnStrategy is Strategy {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"4.0.0\";\n\n    IYToken internal immutable yToken;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _receiptToken,\n        string memory _name\n    ) Strategy(_pool, _swapManager, _receiptToken) {\n        require(_receiptToken != address(0), \"yToken-address-is-zero\");\n        yToken = IYToken(_receiptToken);\n        NAME = _name;\n    }\n\n    /**\n     * @notice Calculate total value using underlying yToken\n     * @dev Report total value in collateral token\n     */\n    function totalValue() public view override returns (uint256 _totalValue) {\n        _totalValue = _getCollateralBalance();\n    }\n\n    function isReservedToken(address _token) public view override returns (bool) {\n        return _token == address(yToken);\n    }\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override {\n        collateralToken.safeApprove(pool, _amount);\n        collateralToken.safeApprove(address(yToken), _amount);\n    }\n\n    /**\n     * @notice Before migration hook. no rewards, so empty implementation\n     * @param _newStrategy Address of new strategy.\n     */\n    //solhint-disable-next-line no-empty-blocks\n    function _beforeMigration(address _newStrategy) internal override {}\n\n    /// @notice Withdraw collateral to payback excess debt\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {\n        if (_excessDebt != 0) {\n            _payback = _safeWithdraw(_excessDebt);\n        }\n    }\n\n    /**\n     * @notice Calculate earning and withdraw it from Yearn.\n     * @param _totalDebt Total collateral debt of this strategy\n     * @return profit in collateral token\n     */\n    function _realizeProfit(uint256 _totalDebt) internal virtual override returns (uint256) {\n        uint256 _collateralBalance = _getCollateralBalance();\n        if (_collateralBalance > _totalDebt) {\n            _withdrawHere(_collateralBalance - _totalDebt);\n        }\n        return collateralToken.balanceOf(address(this));\n    }\n\n    /**\n     * @notice Calculate realized loss.\n     * @return _loss Realized loss in collateral token\n     */\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {\n        uint256 _collateralBalance = _getCollateralBalance();\n\n        if (_collateralBalance < _totalDebt) {\n            _loss = _totalDebt - _collateralBalance;\n        }\n    }\n\n    /// @notice Deposit collateral in Yearn vault\n    function _reinvest() internal virtual override {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n        if (_collateralBalance != 0) {\n            yToken.deposit(_collateralBalance);\n        }\n    }\n\n    /// @dev Withdraw collateral and transfer it to pool\n    function _withdraw(uint256 _amount) internal override {\n        _safeWithdraw(_amount);\n        collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Safe withdraw will make sure to check asking amount against available amount.\n     * @param _amount Amount of collateral to withdraw.\n     * @return Actual collateral withdrawn\n     */\n    function _safeWithdraw(uint256 _amount) internal returns (uint256) {\n        uint256 _collateralBalance = _getCollateralBalance();\n        // Get minimum of _amount and _collateralBalance\n        return _withdrawHere(_amount < _collateralBalance ? _amount : _collateralBalance);\n    }\n\n    /// @dev Withdraw collateral here. Do not transfer to pool\n    function _withdrawHere(uint256 _amount) internal returns (uint256) {\n        // Returns the exact collateral amount withdrawed from yVault\n        return yToken.withdraw(_convertToShares(_amount));\n    }\n\n    /// @dev Gets collateral balance into yVault\n    function _getCollateralBalance() internal view returns (uint256) {\n        return (yToken.balanceOf(address(this)) * yToken.pricePerShare()) / (10**yToken.decimals());\n    }\n\n    /// @dev Converts a collateral amount in its relative shares for yVault\n    function _convertToShares(uint256 _collateralAmount) internal view returns (uint256) {\n        return (_collateralAmount * (10**yToken.decimals())) / yToken.pricePerShare();\n    }\n}\n"
    },
    "contracts/interfaces/yearn/IYToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface IYToken {\n    function balanceOf(address user) external view returns (uint256);\n\n    function pricePerShare() external view returns (uint256);\n\n    function deposit(uint256 amount) external returns (uint256);\n\n    function deposit() external returns (uint256);\n\n    function withdraw(uint256 shares) external returns (uint256);\n\n    function token() external returns (address);\n\n    function totalAssets() external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function availableDepositLimit() external view returns (uint256);\n\n    function decimals() external view returns (uint8);\n\n    function withdrawalQueue(uint256 index) external view returns (address);\n\n    function maxAvailableShares() external view returns (uint256);\n}\n"
    },
    "contracts/strategies/yearn/earn/EarnYearnStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../YearnStrategy.sol\";\nimport \"../../Earn.sol\";\n\n/// @title This strategy will deposit collateral token in Yearn and earn drip in an another token.\ncontract EarnYearnStrategy is YearnStrategy, Earn {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable no-empty-blocks\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _receiptToken,\n        address _dripToken,\n        string memory _name\n    ) YearnStrategy(_pool, _swapManager, _receiptToken, _name) Earn(_dripToken) {}\n\n    function _realizeProfit(uint256 _totalDebt) internal virtual override(Strategy, YearnStrategy) returns (uint256) {\n        uint256 _collateralBalance = _getCollateralBalance();\n        if (_collateralBalance > _totalDebt) {\n            _withdrawHere(_collateralBalance - _totalDebt);\n        }\n        _convertCollateralToDrip();\n        _forwardEarning();\n        return 0;\n    }\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal override(Strategy, YearnStrategy) {\n        YearnStrategy._approveToken(_amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            collateralToken.safeApprove(address(swapManager.ROUTERS(i)), _amount);\n        }\n    }\n}\n"
    },
    "contracts/strategies/Earn.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/vesper/IEarnDrip.sol\";\nimport \"../interfaces/vesper/IVesperPool.sol\";\nimport \"./Strategy.sol\";\n\nabstract contract Earn is Strategy {\n    using SafeERC20 for IERC20;\n\n    address public immutable dripToken;\n\n    uint256 public dripPeriod = 48 hours;\n    uint256 public totalEarned; // accounting total stable coin earned. This amount is not reported to pool.\n\n    event DripPeriodUpdated(uint256 oldDripPeriod, uint256 newDripPeriod);\n\n    constructor(address _dripToken) {\n        require(_dripToken != address(0), \"dripToken-zero\");\n        dripToken = _dripToken;\n    }\n\n    /**\n     * @notice Update update period of distribution of earning done in one rebalance\n     * @dev _dripPeriod in seconds\n     */\n    function updateDripPeriod(uint256 _dripPeriod) external onlyGovernor {\n        require(_dripPeriod != 0, \"dripPeriod-zero\");\n        require(_dripPeriod != dripPeriod, \"same-dripPeriod\");\n        emit DripPeriodUpdated(dripPeriod, _dripPeriod);\n        dripPeriod = _dripPeriod;\n    }\n\n    /// @dev Approves EarnDrip' Grow token to spend dripToken\n    function approveGrowToken() external onlyKeeper {\n        address _dripContract = IVesperPool(pool).poolRewards();\n        address _growPool = IEarnDrip(_dripContract).growToken();\n        // Checks that the Grow Pool supports dripToken as underlying\n        if (_growPool != address(0)) {\n            require(address(IVesperPool(_growPool).token()) == dripToken, \"invalid-grow-pool\");\n            IERC20(dripToken).safeApprove(_growPool, 0);\n            IERC20(dripToken).safeApprove(_growPool, MAX_UINT_VALUE);\n        }\n    }\n\n    /// @notice Converts excess collateral earned to drip token\n    function _convertCollateralToDrip() internal {\n        uint256 _collateralAmount = collateralToken.balanceOf(address(this));\n        _convertCollateralToDrip(_collateralAmount);\n    }\n\n    function _convertCollateralToDrip(uint256 _collateralAmount) internal {\n        if (_collateralAmount != 0) {\n            uint256 minAmtOut =\n                (swapSlippage != 10000)\n                    ? _calcAmtOutAfterSlippage(\n                        _getOracleRate(_simpleOraclePath(address(collateralToken), dripToken), _collateralAmount),\n                        swapSlippage\n                    )\n                    : 1;\n            _safeSwap(address(collateralToken), dripToken, _collateralAmount, minAmtOut);\n        }\n    }\n\n    /**\n     * @notice Send this earning to drip contract.\n     */\n    function _forwardEarning() internal virtual {\n        (, uint256 _interestFee, , , , , , ) = IVesperPool(pool).strategy(address(this));\n        address _dripContract = IVesperPool(pool).poolRewards();\n        uint256 _earned = IERC20(dripToken).balanceOf(address(this));\n        if (_earned != 0) {\n            // Fetches which rewardToken collects the drip\n            address _growPool = IEarnDrip(_dripContract).growToken();\n            totalEarned += _earned;\n            // Checks that the Grow Pool supports dripToken as underlying\n            if (_growPool != address(0) && address(IVesperPool(_growPool).token()) == dripToken) {\n                uint256 _growPoolBalanceBefore = IERC20(_growPool).balanceOf(address(this));\n                IVesperPool(_growPool).deposit(_earned);\n                uint256 _growPoolShares = IERC20(_growPool).balanceOf(address(this)) - _growPoolBalanceBefore;\n                uint256 _fee = (_growPoolShares * _interestFee) / 10000;\n                if (_fee != 0) {\n                    IERC20(_growPool).safeTransfer(feeCollector, _fee);\n                    _growPoolShares -= _fee;\n                }\n                IERC20(_growPool).safeTransfer(_dripContract, _growPoolShares);\n                IEarnDrip(_dripContract).notifyRewardAmount(_growPool, _growPoolShares, dripPeriod);\n            } else {\n                // If no growToken is set for dripContract, forward the dripToken directly\n                // Minus interestFee that goes to feeCollector\n                uint256 _fee = (_earned * _interestFee) / 10000;\n                if (_fee != 0) {\n                    IERC20(dripToken).safeTransfer(feeCollector, _fee);\n                    _earned -= _fee;\n                }\n                IERC20(dripToken).safeTransfer(_dripContract, _earned);\n                IEarnDrip(_dripContract).notifyRewardAmount(dripToken, _earned, dripPeriod);\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/vesper/IEarnDrip.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./IPoolRewards.sol\";\n\ninterface IEarnDrip is IPoolRewards {\n    function rewardTokens(uint256 _index) external view returns (address);\n\n    function growToken() external view returns (address);\n}\n"
    },
    "contracts/interfaces/vesper/IPoolRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\ninterface IPoolRewards {\n    /// Emitted after reward added\n    event RewardAdded(address indexed rewardToken, uint256 reward, uint256 rewardDuration);\n    /// Emitted whenever any user claim rewards\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\n    /// Emitted after adding new rewards token into rewardTokens array\n    event RewardTokenAdded(address indexed rewardToken, address[] existingRewardTokens);\n\n    function claimReward(address) external;\n\n    function notifyRewardAmount(\n        address _rewardToken,\n        uint256 _rewardAmount,\n        uint256 _rewardDuration\n    ) external;\n\n    function notifyRewardAmount(\n        address[] memory _rewardTokens,\n        uint256[] memory _rewardAmounts,\n        uint256[] memory _rewardDurations\n    ) external;\n\n    function updateReward(address) external;\n\n    function claimable(address _account)\n        external\n        view\n        returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts);\n\n    function lastTimeRewardApplicable(address _rewardToken) external view returns (uint256);\n\n    function rewardForDuration()\n        external\n        view\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration);\n\n    function rewardPerToken()\n        external\n        view\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate);\n}\n"
    },
    "contracts/strategies/vesper/earn/EarnVesperStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\nimport \"../../Earn.sol\";\nimport \"../VesperStrategy.sol\";\nimport \"../../../interfaces/vesper/IVesperPool.sol\";\n\n/// @title This Earn strategy will deposit collateral token in a Vesper Grow Pool\n/// and converts the yield to another Drip Token\n// solhint-disable no-empty-blocks\ncontract EarnVesperStrategy is VesperStrategy, Earn {\n    using SafeERC20 for IERC20;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _receiptToken,\n        address _dripToken,\n        address _vsp,\n        string memory _name\n    ) VesperStrategy(_pool, _swapManager, _receiptToken, _vsp, _name) Earn(_dripToken) {}\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override(VesperStrategy, Strategy) {\n        collateralToken.safeApprove(pool, _amount);\n        collateralToken.safeApprove(address(vToken), _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            IERC20(vsp).safeApprove(address(swapManager.ROUTERS(i)), _amount);\n            collateralToken.safeApprove(address(swapManager.ROUTERS(i)), _amount);\n        }\n    }\n\n    /**\n     * @notice Calculate earning and withdraw it from Vesper Grow.\n     * @param _totalDebt Total collateral debt of this strategy\n     * @return profit in collateral token\n     */\n    function _realizeProfit(uint256 _totalDebt) internal virtual override(VesperStrategy, Strategy) returns (uint256) {\n        _claimRewardsAndConvertTo(address(dripToken));\n        uint256 _collateralBalance = _getCollateralBalance();\n        if (_collateralBalance > _totalDebt) {\n            _withdrawHere(_collateralBalance - _totalDebt);\n        }\n        _convertCollateralToDrip();\n        _forwardEarning();\n        return 0;\n    }\n\n    /// @notice Claim VSP rewards in underlying Grow Pool, if any\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override(VesperStrategy, Strategy) {\n        VesperStrategy._claimRewardsAndConvertTo(_toToken);\n    }\n}\n"
    },
    "contracts/strategies/vesper/VesperStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\nimport \"../../interfaces/vesper/IVesperPool.sol\";\nimport \"../Strategy.sol\";\n\n/// @title This Strategy will deposit collateral token in a Vesper Grow Pool\nabstract contract VesperStrategy is Strategy {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"4.0.1\";\n\n    address internal immutable vsp;\n    IVesperPool internal immutable vToken;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _receiptToken,\n        address _vsp,\n        string memory _name\n    ) Strategy(_pool, _swapManager, _receiptToken) {\n        require(_receiptToken != address(0), \"vToken-address-is-zero\");\n        vToken = IVesperPool(_receiptToken);\n        NAME = _name;\n        vsp = _vsp;\n    }\n\n    /**\n     * @notice Calculate total value using underlying vToken\n     * @dev Report total value in collateral token\n     */\n    function totalValue() public view override returns (uint256 _totalValue) {\n        _totalValue = _getCollateralBalance();\n    }\n\n    function isReservedToken(address _token) public view override returns (bool) {\n        return _token == address(vToken);\n    }\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override {\n        collateralToken.safeApprove(pool, _amount);\n        collateralToken.safeApprove(address(vToken), _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            IERC20(vsp).safeApprove(address(swapManager.ROUTERS(i)), _amount);\n        }\n    }\n\n    /**\n     * @notice Before migration hook.\n     * @param _newStrategy Address of new strategy.\n     */\n    //solhint-disable-next-line no-empty-blocks\n    function _beforeMigration(address _newStrategy) internal override {}\n\n    /// @notice Withdraw collateral to payback excess debt\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {\n        if (_excessDebt != 0) {\n            _payback = _safeWithdraw(_excessDebt);\n        }\n    }\n\n    /**\n     * @notice Calculate earning and withdraw it from Vesper Grow.\n     * @param _totalDebt Total collateral debt of this strategy\n     * @return profit in collateral token\n     */\n    function _realizeProfit(uint256 _totalDebt) internal virtual override returns (uint256) {\n        _claimRewardsAndConvertTo(address(collateralToken));\n        uint256 _collateralBalance = _getCollateralBalance();\n        if (_collateralBalance > _totalDebt) {\n            _withdrawHere(_collateralBalance - _totalDebt);\n        }\n        return collateralToken.balanceOf(address(this));\n    }\n\n    /// @notice Claim VSP rewards in underlying Grow Pool, if any\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\n        uint256 _vspAmount = IERC20(vsp).balanceOf(address(this));\n        if (_vspAmount != 0) {\n            _safeSwap(vsp, _toToken, _vspAmount, 1);\n        }\n    }\n\n    /**\n     * @notice Calculate realized loss.\n     * @return _loss Realized loss in collateral token\n     */\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {\n        uint256 _collateralBalance = _getCollateralBalance();\n\n        if (_collateralBalance < _totalDebt) {\n            _loss = _totalDebt - _collateralBalance;\n        }\n    }\n\n    /// @notice Deposit collateral in Vesper Grow\n    function _reinvest() internal virtual override {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n        if (_collateralBalance != 0) {\n            vToken.deposit(_collateralBalance);\n        }\n    }\n\n    /// @dev Withdraw collateral and transfer it to pool\n    function _withdraw(uint256 _amount) internal override {\n        _safeWithdraw(_amount);\n        collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Safe withdraw will make sure to check asking amount against available amount.\n     * @param _amount Amount of collateral to withdraw.\n     * @return Actual collateral withdrawn\n     */\n    function _safeWithdraw(uint256 _amount) internal returns (uint256) {\n        uint256 _collateralBalance = _getCollateralBalance();\n        // Get minimum of _amount and _collateralBalance\n        return _withdrawHere(_amount < _collateralBalance ? _amount : _collateralBalance);\n    }\n\n    /// @dev Withdraw collateral here. Do not transfer to pool\n    function _withdrawHere(uint256 _amount) internal returns (uint256) {\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\n        vToken.whitelistedWithdraw(_convertToShares(_amount));\n        return collateralToken.balanceOf(address(this)) - _collateralBefore;\n    }\n\n    /// @dev Gets collateral balance deposited into Vesper Grow Pool\n    function _getCollateralBalance() internal view returns (uint256) {\n        uint256 _totalSupply = vToken.totalSupply();\n        // avoids division by zero error when pool is empty\n        return (_totalSupply != 0) ? (vToken.totalValue() * vToken.balanceOf(address(this))) / _totalSupply : 0;\n    }\n\n    /// @dev Converts a collateral amount in its relative shares for Vesper Grow Pool\n    function _convertToShares(uint256 _collateralAmount) internal view returns (uint256) {\n        uint256 _totalValue = vToken.totalValue();\n        return (_totalValue != 0) ? (_collateralAmount * vToken.totalSupply()) / _totalValue : 0;\n    }\n}\n"
    },
    "contracts/strategies/vesper/earn/EarnVesperStrategyVSPDrip.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./EarnVesperStrategy.sol\";\n\n// solhint-disable no-empty-blocks\n/// @title Earn Vesper Strategy adjusted for vVSP timelock\ncontract EarnVesperStrategyVSPDrip is EarnVesperStrategy {\n    using SafeERC20 for IERC20;\n\n    bool public transferToDripContract = false;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _receiptToken,\n        address _dripToken,\n        address _vsp,\n        string memory _name\n    ) EarnVesperStrategy(_pool, _swapManager, _receiptToken, _dripToken, _vsp, _name) {}\n\n    /**\n     * @notice Empty implementation, VSP rewards don't need to be converted.\n     */\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {}\n\n    /**\n     * @notice Send this earning to drip contract.\n     */\n    function _forwardEarning() internal override {\n        address _dripContract = IVesperPool(pool).poolRewards();\n        uint256 _earned = IERC20(dripToken).balanceOf(address(this));\n        // Fetches which rewardToken collects the drip\n        address _growPool = IEarnDrip(_dripContract).growToken();\n        // Checks that the Grow Pool supports dripToken as underlying\n        require(address(IVesperPool(_growPool).token()) == dripToken, \"invalid-grow-pool\");\n\n        if (!transferToDripContract && _earned != 0) {\n            totalEarned += _earned;\n            IVesperPool(_growPool).deposit(_earned);\n\n            // Next rebalance call will transfer to dripContract\n            transferToDripContract = true;\n        } else if (transferToDripContract) {\n            (, uint256 _interestFee, , , , , , ) = IVesperPool(pool).strategy(address(this));\n            uint256 _growPoolShares = IERC20(_growPool).balanceOf(address(this));\n            uint256 _fee = (_growPoolShares * _interestFee) / 10000;\n\n            if (_fee != 0) {\n                IERC20(_growPool).safeTransfer(feeCollector, _fee);\n                _growPoolShares -= _fee;\n            }\n            IERC20(_growPool).safeTransfer(_dripContract, _growPoolShares);\n            IEarnDrip(_dripContract).notifyRewardAmount(_growPool, _growPoolShares, dripPeriod);\n\n            // Next rebalance call will deposit VSP to vVSP Pool\n            transferToDripContract = false;\n        }\n    }\n}\n"
    },
    "contracts/utils/BuyBack.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../pool/Errors.sol\";\nimport \"../interfaces/bloq/IAddressList.sol\";\nimport \"../interfaces/bloq/IAddressListFactory.sol\";\nimport \"../interfaces/vesper/IVesperPool.sol\";\nimport \"./UsingSwapManager.sol\";\nimport \"./Batchable.sol\";\n\ncontract BuyBack is UsingSwapManager, Batchable {\n    using SafeERC20 for IERC20;\n\n    IERC20 public vsp;\n    IVesperPool public vVSP; // vVSP pool will received buyed back VSPs\n    address public keepers; // sol-address-list address which contains addresses of keepers\n\n    event MigratedAsset(IERC20 asset, uint256 amount);\n    event VspBoughtBack(address assetIn, uint256 amountIn, uint256 vspBought);\n\n    constructor(\n        address _governor,\n        address _weth,\n        IVesperPool _vVSP,\n        IAddressListFactory _listFactory,\n        ISwapManager _swapManager\n    ) UsingSwapManager(_weth, _swapManager) {\n        require(address(_vVSP) != address(0), \"vvsp-is-null\");\n        require(address(_listFactory) != address(0), \"address-list-factory-is-null\");\n\n        governor = _governor;\n        vVSP = _vVSP;\n        vsp = vVSP.token();\n        keepers = _listFactory.createList();\n        require(IAddressList(keepers).add(_msgSender()), Errors.ADD_IN_LIST_FAILED);\n    }\n\n    modifier onlyKeeper() {\n        require(IAddressList(keepers).contains(_msgSender()), \"not-a-keeper\");\n        _;\n    }\n\n    ////////////////////////////// Only Governor //////////////////////////////\n\n    /**\n     * @notice Migrate assets to a new contract\n     * @dev The caller has to set the addresses list since we don't maintain a list of them\n     * @param _assets List of assets' address to transfer from\n     * @param _to Assets recipient\n     */\n    function migrateAssets(address[] memory _assets, address _to) external onlyGovernor {\n        require(_assets.length > 0, \"assets-list-is-empty\");\n        require(_to != address(this), \"new-contract-is-invalid\");\n\n        for (uint256 i = 0; i < _assets.length; ++i) {\n            IERC20 _asset = IERC20(_assets[i]);\n            uint256 _balance = _asset.balanceOf(address(this));\n            _asset.safeTransfer(_to, _balance);\n            emit MigratedAsset(_asset, _balance);\n        }\n    }\n\n    ///////////////////////////// Only Keeper ///////////////////////////////\n\n    /// @notice Perform a slippage-protected swap for VSP\n    /// @dev The vVVSP is the beneficiary of the swap\n    /// @dev Have to check allowance to routers before calling this\n    function swapForVspAndTransferToVVSP(address _tokenIn, uint256 _amountIn) external onlyKeeper {\n        if (_amountIn > 0) {\n            uint256 _minAmtOut =\n                (swapSlippage != 10000)\n                    ? _calcAmtOutAfterSlippage(\n                        _getOracleRate(_simpleOraclePath(_tokenIn, address(vsp)), _amountIn),\n                        swapSlippage\n                    )\n                    : 1;\n            uint256 _vspBefore = vsp.balanceOf(address(vVSP));\n            _safeSwap(_tokenIn, address(vsp), _amountIn, _minAmtOut, address(vVSP));\n            uint256 _amountOut = vsp.balanceOf(address(vVSP)) - _vspBefore;\n            emit VspBoughtBack(_tokenIn, _amountIn, _amountOut);\n        }\n    }\n\n    /// @notice Deposit vPool tokens and unwrap them\n    function depositAndUnwrap(IVesperPool _vPool, uint256 _amount) external onlyKeeper {\n        _vPool.transferFrom(_msgSender(), address(this), _amount);\n        _vPool.withdraw(_amount);\n    }\n\n    /// @notice Withdraw (a.k.a. unwrap) underlying token from vPool\n    function unwrap(IVesperPool _vPool, uint256 _amount) public onlyKeeper {\n        _vPool.withdraw(_amount);\n    }\n\n    /// @notice Withdraw (a.k.a. unwrap) underlying token from vPool\n    /// @dev Uses all held vPool tokens\n    function unwrapAll(IVesperPool _vPool) external onlyKeeper {\n        unwrap(_vPool, _vPool.balanceOf(address(this)));\n    }\n\n    /// @notice Transfer VSP tokens to vVSP\n    function transferVspToVVSP(uint256 _amount) public onlyKeeper {\n        vsp.safeTransfer(address(vVSP), _amount);\n    }\n\n    /// @notice Transfer VSP tokens to vVSP\n    /// @dev Uses all held VSP tokens\n    function transferAllVspToVVSP() external onlyKeeper {\n        transferVspToVVSP(vsp.balanceOf(address(this)));\n    }\n\n    /// @notice Approve SwapManager routers if needed\n    function doInfinityApproval(IERC20 _unwrapped) external onlyKeeper {\n        _doInfinityApprovalIfNeeded(_unwrapped, type(uint256).max);\n    }\n\n    /**\n     * @notice Add given address in provided address list.\n     * @dev Use it to add keeper in keepers list and to add address in feeWhitelist\n     * @param _addressToAdd address which we want to add in AddressList.\n     */\n    function addInKeepersList(address _addressToAdd) external onlyKeeper {\n        require(IAddressList(keepers).add(_addressToAdd), Errors.ADD_IN_LIST_FAILED);\n    }\n\n    /**\n     * @notice Remove given address from provided address list.\n     * @dev Use it to remove keeper from keepers list and to remove address from feeWhitelist\n     * @param _addressToRemove address which we want to remove from AddressList.\n     */\n    function removeFromKeepersList(address _addressToRemove) external onlyKeeper {\n        require(IAddressList(keepers).remove(_addressToRemove), Errors.REMOVE_FROM_LIST_FAILED);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n}\n"
    },
    "contracts/pool/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.3;\n\n/// @title Errors library\nlibrary Errors {\n    string public constant INVALID_COLLATERAL_AMOUNT = \"1\"; // Collateral must be greater than 0\n    string public constant INVALID_SHARE_AMOUNT = \"2\"; // Share must be greater than 0\n    string public constant INVALID_INPUT_LENGTH = \"3\"; // Input array length must be greater than 0\n    string public constant INPUT_LENGTH_MISMATCH = \"4\"; // Input array length mismatch with another array length\n    string public constant NOT_WHITELISTED_ADDRESS = \"5\"; // Caller is not whitelisted to withdraw without fee\n    string public constant MULTI_TRANSFER_FAILED = \"6\"; // Multi transfer of tokens has failed\n    string public constant FEE_COLLECTOR_NOT_SET = \"7\"; // Fee Collector is not set\n    string public constant NOT_ALLOWED_TO_SWEEP = \"8\"; // Token is not allowed to sweep\n    string public constant INSUFFICIENT_BALANCE = \"9\"; // Insufficient balance to performs operations to follow\n    string public constant INPUT_ADDRESS_IS_ZERO = \"10\"; // Input address is zero\n    string public constant FEE_LIMIT_REACHED = \"11\"; // Fee must be less than MAX_BPS\n    string public constant ALREADY_INITIALIZED = \"12\"; // Data structure, contract, or logic already initialized and can not be called again\n    string public constant ADD_IN_LIST_FAILED = \"13\"; // Cannot add address in address list\n    string public constant REMOVE_FROM_LIST_FAILED = \"14\"; // Cannot remove address from address list\n    string public constant STRATEGY_IS_ACTIVE = \"15\"; // Strategy is already active, an inactive strategy is required\n    string public constant STRATEGY_IS_NOT_ACTIVE = \"16\"; // Strategy is not active, an active strategy is required\n    string public constant INVALID_STRATEGY = \"17\"; // Given strategy is not a strategy of this pool\n    string public constant DEBT_RATIO_LIMIT_REACHED = \"18\"; // Debt ratio limit reached. It must be less than MAX_BPS\n    string public constant TOTAL_DEBT_IS_NOT_ZERO = \"19\"; // Strategy total debt must be 0\n    string public constant LOSS_TOO_HIGH = \"20\"; // Strategy reported loss must be less than current debt\n    string public constant INVALID_MAX_BORROW_LIMIT = \"21\"; // Max borrow limit is beyond range.\n    string public constant MAX_LIMIT_LESS_THAN_MIN = \"22\"; // Max limit should be greater than min limit.\n    string public constant INVALID_SLIPPAGE = \"23\"; // Slippage should be less than MAX_BPS\n    string public constant WRONG_RECEIPT_TOKEN = \"24\"; // Wrong receipt token address\n    string public constant AAVE_FLASH_LOAN_NOT_ACTIVE = \"25\"; // aave flash loan is not active\n    string public constant DYDX_FLASH_LOAN_NOT_ACTIVE = \"26\"; // DYDX flash loan is not active\n    string public constant INVALID_FLASH_LOAN = \"27\"; // invalid-flash-loan\n    string public constant INVALID_INITIATOR = \"28\"; // \"invalid-initiator\"\n    string public constant INCORRECT_WITHDRAW_AMOUNT = \"29\"; // withdrawn amount is not correct\n    string public constant NO_MARKET_ID_FOUND = \"30\"; // dydx flash loan no marketId found for token\n}\n"
    },
    "contracts/interfaces/bloq/IAddressList.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\ninterface IAddressList {\n    function add(address a) external returns (bool);\n\n    function addValue(address a, uint256 v) external returns (bool);\n\n    function addMulti(address[] calldata addrs) external returns (uint256);\n\n    function addValueMulti(address[] calldata addrs, uint256[] calldata values) external returns (uint256);\n\n    function remove(address a) external returns (bool);\n\n    function removeMulti(address[] calldata addrs) external returns (uint256);\n\n    function get(address a) external view returns (uint256);\n\n    function contains(address a) external view returns (bool);\n\n    function at(uint256 index) external view returns (address, uint256);\n\n    function length() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/bloq/IAddressListFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\ninterface IAddressListFactory {\n    function ours(address a) external view returns (bool);\n\n    function listCount() external view returns (uint256);\n\n    function listAt(uint256 idx) external view returns (address);\n\n    function createList() external returns (address listaddr);\n}\n"
    },
    "contracts/utils/UsingSwapManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../Governed.sol\";\nimport \"../interfaces/bloq/ISwapManager.sol\";\n\nabstract contract UsingSwapManager is Governed {\n    using SafeERC20 for IERC20;\n\n    address weth; // Native token\n    ISwapManager public swapManager;\n    uint256 public oraclePeriod = 3600; // 1h;\n    uint256 public oracleRouterIdx = 0; // Uniswap V2;\n    uint256 public swapSlippage = 1000; // 10%\n\n    event UpdatedSwapManager(address indexed oldSwapManager, address indexed newSwapManager);\n    event UpdatedSwapSlippage(uint256 oldSwapSlippage, uint256 newSwapSlippage);\n    event UpdatedOracleConfig(uint256 oldPeriod, uint256 newPeriod, uint256 oldRouterIdx, uint256 newRouterIdx);\n\n    constructor(address _weth, ISwapManager _swapManager) {\n        require(address(_weth) != address(0), \"weth-is-null\");\n        require(address(_swapManager) != address(0), \"swap-manager-is-null\");\n\n        weth = _weth;\n        swapManager = _swapManager;\n    }\n\n    ////////////////////////////// Only Governor //////////////////////////////\n\n    /**\n     * @notice Update swap manager address\n     * @param _swapManager swap manager address\n     */\n    function updateSwapManager(address _swapManager) external onlyGovernor {\n        require(_swapManager != address(0), \"sm-address-is-zero\");\n        require(_swapManager != address(swapManager), \"sm-is-same\");\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\n        swapManager = ISwapManager(_swapManager);\n    }\n\n    /**\n     * @notice Update swap slippage value\n     * @param _newSwapSlippage new swap slippage\n     */\n    function updateSwapSlippage(uint256 _newSwapSlippage) external onlyGovernor {\n        require(_newSwapSlippage <= 10000, \"invalid-slippage-value\");\n        emit UpdatedSwapSlippage(swapSlippage, _newSwapSlippage);\n        swapSlippage = _newSwapSlippage;\n    }\n\n    function updateOracleConfig(uint256 _newPeriod, uint256 _newRouterIdx) external onlyGovernor {\n        require(_newRouterIdx < swapManager.N_DEX(), \"invalid-router-index\");\n        if (_newPeriod == 0) _newPeriod = oraclePeriod;\n        require(_newPeriod > 59, \"invalid-oracle-period\");\n        emit UpdatedOracleConfig(oraclePeriod, _newPeriod, oracleRouterIdx, _newRouterIdx);\n        oraclePeriod = _newPeriod;\n        oracleRouterIdx = _newRouterIdx;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @notice Safe swap via Uniswap / Sushiswap (better rate of the two)\n     * @dev There are many scenarios when token swap via Uniswap can fail, so this\n     * method will wrap Uniswap call in a 'try catch' to make it fail safe.\n     * however, this method will throw minAmountOut is not met\n     * @param _tokenIn address of from token\n     * @param _tokenOut address of to token\n     * @param _amountIn Amount to be swapped\n     * @param _minAmountOut minimum amount out\n     */\n    function _safeSwap(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn,\n        uint256 _minAmountOut,\n        address _to\n    ) internal {\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\n            swapManager.bestOutputFixedInput(_tokenIn, _tokenOut, _amountIn);\n        if (_minAmountOut == 0) _minAmountOut = 1;\n        if (amountOut != 0) {\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(_amountIn, _minAmountOut, path, _to, block.timestamp);\n        }\n    }\n\n    function _calcAmtOutAfterSlippage(uint256 _amount, uint256 _slippage) internal pure returns (uint256) {\n        return (_amount * (10000 - _slippage)) / (10000);\n    }\n\n    function _getOracleRate(address[] memory path, uint256 _amountIn) internal returns (uint256 amountOut) {\n        require(path.length > 1, \"invalid-oracle-path\");\n        amountOut = _amountIn;\n        bool isValid;\n        for (uint256 i = 0; i < path.length - 1; i++) {\n            (amountOut, isValid) = _consultOracle(path[i], path[i + 1], amountOut);\n            require(isValid, \"invalid-oracle-rate\");\n        }\n    }\n\n    function _simpleOraclePath(address _from, address _to) internal view returns (address[] memory path) {\n        if (_from == weth || _to == weth) {\n            path = new address[](2);\n            path[0] = _from;\n            path[1] = _to;\n        } else {\n            path = new address[](3);\n            path[0] = _from;\n            path[1] = weth;\n            path[2] = _to;\n        }\n    }\n\n    function _consultOracle(\n        address _from,\n        address _to,\n        uint256 _amt\n    ) internal returns (uint256, bool) {\n        // from, to, amountIn, period, router\n        (uint256 rate, uint256 lastUpdate, ) = swapManager.consult(_from, _to, _amt, oraclePeriod, oracleRouterIdx);\n        // We're looking at a TWAP ORACLE with a 1 hr Period that has been updated within the last hour\n        if ((lastUpdate > (block.timestamp - oraclePeriod)) && (rate != 0)) return (rate, true);\n        return (0, false);\n    }\n\n    function _doInfinityApprovalIfNeeded(IERC20 _asset, uint256 _amountToSwap) internal {\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            uint256 _allowance = IERC20(_asset).allowance(address(this), address(swapManager.ROUTERS(i)));\n            if (_allowance < _amountToSwap) {\n                IERC20(_asset).safeApprove(address(swapManager.ROUTERS(i)), 0);\n                IERC20(_asset).safeApprove(address(swapManager.ROUTERS(i)), type(uint256).max);\n            }\n        }\n    }\n}\n"
    },
    "contracts/utils/Batchable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\n/// @dev Based on https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/BoringBatchable.sol\n/// @dev WARNING!!! Combining Batchable with `msg.value` can cause double spending issues\ncontract Batchable {\n    /// @dev Helper function to extract a useful revert message from a failed call.\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\n\n        assembly {\n            // Slice the sighash.\n            _returnData := add(_returnData, 0x04)\n        }\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\n    }\n\n    /// @notice Allows batched call to self (this contract).\n    /// @param calls An array of inputs for each call.\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\n    // C3: The length of the loop is fully under user control, so can't be exploited\n    // C7: Delegatecall is only used on the same contract, so it's safe\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable {\n        for (uint256 i = 0; i < calls.length; i++) {\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\n            if (!success && revertOnFail) {\n                revert(_getRevertMsg(result));\n            }\n        }\n    }\n}\n"
    },
    "contracts/Governed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (governor) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the governor account will be the one that deploys the contract. This\n * can later be changed with {transferGovernorship}.\n *\n */\ncontract Governed is Context, Initializable {\n    address public governor;\n    address private proposedGovernor;\n\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial governor.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        governor = msgSender;\n        emit UpdatedGovernor(address(0), msgSender);\n    }\n\n    /**\n     * @dev If inheriting child is using proxy then child contract can use\n     * _initializeGoverned() function to initialization this contract\n     */\n    function _initializeGoverned() internal initializer {\n        address msgSender = _msgSender();\n        governor = msgSender;\n        emit UpdatedGovernor(address(0), msgSender);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the governor.\n     */\n    modifier onlyGovernor {\n        require(governor == _msgSender(), \"not-the-governor\");\n        _;\n    }\n\n    /**\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\n     * Can only be called by the current owner.\n     */\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\n        require(_proposedGovernor != address(0), \"proposed-governor-is-zero\");\n        proposedGovernor = _proposedGovernor;\n    }\n\n    /**\n     * @dev Allows new governor to accept governorship of the contract.\n     */\n    function acceptGovernorship() external {\n        require(proposedGovernor == _msgSender(), \"not-the-proposed-governor\");\n        emit UpdatedGovernor(governor, proposedGovernor);\n        governor = proposedGovernor;\n        proposedGovernor = address(0);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/strategies/maker/CollateralManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../Governed.sol\";\nimport \"../../interfaces//maker/IMakerDAO.sol\";\nimport \"../../interfaces/vesper/ICollateralManager.sol\";\n\ncontract DSMath {\n    uint256 internal constant RAY = 10**27;\n    uint256 internal constant WAD = 10**18;\n\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = ((x * y) + (WAD / 2)) / WAD;\n    }\n\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = ((x * WAD) + (y / 2)) / y;\n    }\n\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = ((x * y) + (RAY / 2)) / RAY;\n    }\n\n    function toRad(uint256 wad) internal pure returns (uint256 rad) {\n        rad = wad * RAY;\n    }\n\n    /// @notice It will work only if _dec < 18\n    function convertTo18(uint256 _dec, uint256 _amt) internal pure returns (uint256 amt) {\n        amt = _amt * 10**(18 - _dec);\n    }\n}\n\ncontract CollateralManager is ICollateralManager, DSMath, ReentrancyGuard, Governed {\n    using SafeERC20 for IERC20;\n\n    // Vault number to collateral type\n    mapping(uint256 => bytes32) public collateralType;\n    // Vault owner to vault num mapping\n    mapping(address => uint256) public override vaultNum;\n    // Collateral type to Gem join address of that type\n    mapping(bytes32 => address) public mcdGemJoin;\n\n    address public constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address public override mcdManager = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\n    address public mcdDaiJoin = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\n    address public mcdSpot = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\n    address public mcdJug = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\n    address public treasury;\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\n\n    event AddedGemJoin(address indexed gemJoin, bytes32 ilk);\n    event CreatedVault(address indexed owner, uint256 indexed vaultNum, bytes32 indexed collateralType);\n    event TransferredVaultOwnership(uint256 indexed vaultNum, address indexed previousOwner, address indexed newOwner);\n    event UpdatedMCDAddresses(address mcdManager, address mcdDaiJoin, address mcdSpot, address mcdJug);\n    event UpdatedTreasury(address indexed previousTreasury, address indexed newTreasury);\n\n    modifier onlyVaultOwner() {\n        require(vaultNum[msg.sender] != 0, \"caller-doesn't-own-any-vault\");\n        _;\n    }\n\n    /**\n     * @dev Add gemJoin adapter address from Maker in mapping\n     * @param _gemJoins Array of gem join addresses\n     */\n    function addGemJoin(address[] calldata _gemJoins) external override onlyGovernor {\n        require(_gemJoins.length != 0, \"no-gemJoin-address\");\n        for (uint256 i; i < _gemJoins.length; i++) {\n            address gemJoin = _gemJoins[i];\n            bytes32 ilk = GemJoinLike(gemJoin).ilk();\n            mcdGemJoin[ilk] = gemJoin;\n            emit AddedGemJoin(gemJoin, ilk);\n        }\n    }\n\n    /**\n     * @notice Create new Maker vault\n     * @dev Store caller of this function as vault owner.\n     * @param _collateralType Collateral type for Maker vault\n     * @return _vaultNum Newly created vault number\n     */\n    function createVault(bytes32 _collateralType) external override returns (uint256 _vaultNum) {\n        require(vaultNum[msg.sender] == 0, \"caller-owns-another-vault\");\n        ManagerLike manager = ManagerLike(mcdManager);\n        _vaultNum = manager.open(_collateralType, address(this));\n        manager.cdpAllow(_vaultNum, address(this), 1);\n\n        vaultNum[msg.sender] = _vaultNum;\n        collateralType[_vaultNum] = _collateralType;\n        emit CreatedVault(msg.sender, _vaultNum, _collateralType);\n    }\n\n    /**\n     * @notice Transfer vault ownership to another address/strategy\n     * @param _newOwner Address of new owner of vault\n     */\n    function transferVaultOwnership(address _newOwner) external override onlyVaultOwner {\n        _transferVaultOwnership(vaultNum[msg.sender], msg.sender, _newOwner);\n    }\n\n    /**\n     * @notice Transfer vault ownership to another address/strategy\n     * @param _vaultNum Number of vault being transferred\n     * @param _owner Address of owner of vault\n     * @param _newOwner Address of new owner of vault\n     */\n    function transferVaultOwnership(\n        uint256 _vaultNum,\n        address _owner,\n        address _newOwner\n    ) external onlyGovernor {\n        require(_vaultNum != 0, \"vault-number-is-zero\");\n        require(_owner != address(0), \"owner-address-zero\");\n        _transferVaultOwnership(_vaultNum, _owner, _newOwner);\n    }\n\n    /**\n     * @dev Update MCD addresses.\n     */\n    function updateMCDAddresses(\n        address _mcdManager,\n        address _mcdDaiJoin,\n        address _mcdSpot,\n        address _mcdJug\n    ) external onlyGovernor {\n        require(_mcdManager != address(0), \"mcdManager-address-is-zero\");\n        require(_mcdDaiJoin != address(0), \"mcdDaiJoin-address-is-zero\");\n        require(_mcdSpot != address(0), \"mcdSpot-address-is-zero\");\n        require(_mcdJug != address(0), \"mcdJug-address-is-zero\");\n        mcdManager = _mcdManager;\n        mcdDaiJoin = _mcdDaiJoin;\n        mcdSpot = _mcdSpot;\n        mcdJug = _mcdJug;\n        emit UpdatedMCDAddresses(_mcdManager, _mcdDaiJoin, _mcdSpot, _mcdJug);\n    }\n\n    /**\n     * @notice Update treasure address\n     */\n    function updateTreasury(address _treasury) external onlyGovernor {\n        require(_treasury != address(0), \"treasury-address-is-zero\");\n        emit UpdatedTreasury(treasury, _treasury);\n        treasury = _treasury;\n    }\n\n    /**\n     * @dev Deposit ERC20 collateral.\n     * @param _amount ERC20 amount to deposit.\n     */\n    function depositCollateral(uint256 _amount) external override nonReentrant onlyVaultOwner {\n        uint256 _vaultNum = vaultNum[msg.sender];\n        // Receives Gem amount, approve and joins it into the vat.\n        // Also convert amount to 18 decimal\n        _amount = _joinGem(mcdGemJoin[collateralType[_vaultNum]], _amount);\n\n        ManagerLike manager = ManagerLike(mcdManager);\n        // Locks Gem amount into the CDP\n        VatLike(manager.vat()).frob(\n            collateralType[_vaultNum],\n            manager.urns(_vaultNum),\n            address(this),\n            address(this),\n            int256(_amount),\n            0\n        );\n    }\n\n    /**\n     * @dev Withdraw collateral.\n     * @param _amount Collateral amount to withdraw.\n     */\n    function withdrawCollateral(uint256 _amount) external override nonReentrant onlyVaultOwner {\n        uint256 _vaultNum = vaultNum[msg.sender];\n        ManagerLike manager = ManagerLike(mcdManager);\n        GemJoinLike gemJoin = GemJoinLike(mcdGemJoin[collateralType[_vaultNum]]);\n        uint256 amount18 = convertTo18(gemJoin.dec(), _amount);\n        // Unlocks Gem amount18 from the CDP\n        manager.frob(_vaultNum, -int256(amount18), 0);\n        // Moves Gem amount18 from the CDP urn to this address\n        manager.flux(_vaultNum, address(this), amount18);\n        // Exits Gem amount to this address as a token\n        gemJoin.exit(address(this), _amount);\n        // Send Gem to pool's address\n        IERC20(gemJoin.gem()).safeTransfer(msg.sender, _amount);\n    }\n\n    /**\n     * @dev Payback borrowed DAI.\n     * @param _amount Dai amount to payback.\n     */\n    function payback(uint256 _amount) external override onlyVaultOwner {\n        uint256 _vaultNum = vaultNum[msg.sender];\n        ManagerLike manager = ManagerLike(mcdManager);\n        address urn = manager.urns(_vaultNum);\n        address vat = manager.vat();\n        bytes32 ilk = collateralType[_vaultNum];\n        // Calculate dai debt\n        uint256 _daiDebt = _getVaultDebt(ilk, urn, vat);\n        require(_daiDebt >= _amount, \"paying-excess-debt\");\n        // Approve and join dai in vat\n        _joinDai(urn, _amount);\n        manager.frob(_vaultNum, 0, _getWipeAmount(ilk, urn, vat));\n    }\n\n    /**\n     * @notice Borrow DAI.\n     * @dev In edge case, when we hit DAI mint limit, we might end up borrowing\n     * less than what is being asked.\n     * @param _amount Dai amount to borrow. Actual borrow amount may be less than \"amount\"\n     */\n    function borrow(uint256 _amount) external override onlyVaultOwner {\n        uint256 _vaultNum = vaultNum[msg.sender];\n        ManagerLike manager = ManagerLike(mcdManager);\n        address vat = manager.vat();\n        // Safety check in scenario where current debt and request borrow will exceed max dai limit\n        uint256 _maxAmount = _maxAvailableDai(vat, collateralType[_vaultNum]);\n        if (_amount > _maxAmount) {\n            _amount = _maxAmount;\n        }\n\n        // Generates debt in the CDP\n        manager.frob(_vaultNum, 0, _getBorrowAmount(vat, manager.urns(_vaultNum), _vaultNum, _amount));\n        // Moves the DAI amount (balance in the vat in rad) to pool's address\n        manager.move(_vaultNum, address(this), toRad(_amount));\n        // Allows adapter to access to pool's DAI balance in the vat\n        if (VatLike(vat).can(address(this), mcdDaiJoin) == 0) {\n            VatLike(vat).hope(mcdDaiJoin);\n        }\n        // Exits DAI as a token to user's address\n        DaiJoinLike(mcdDaiJoin).exit(msg.sender, _amount);\n    }\n\n    /// @dev sweep given ERC20 token to treasury pool\n    function sweepErc20(address _fromToken) external {\n        require(treasury != address(0), \"treasury-not-set\");\n        uint256 amount = IERC20(_fromToken).balanceOf(address(this));\n        IERC20(_fromToken).safeTransfer(treasury, amount);\n    }\n\n    /**\n     * @dev Get current dai debt of vault.\n     * @param _vaultOwner Address of vault owner\n     */\n    function getVaultDebt(address _vaultOwner) external view override returns (uint256 daiDebt) {\n        uint256 _vaultNum = vaultNum[_vaultOwner];\n        require(_vaultNum != 0, \"invalid-vault-number\");\n        address _urn = ManagerLike(mcdManager).urns(_vaultNum);\n        address _vat = ManagerLike(mcdManager).vat();\n        bytes32 _ilk = collateralType[_vaultNum];\n        daiDebt = _getVaultDebt(_ilk, _urn, _vat);\n    }\n\n    /**\n     * @dev Get current collateral balance of vault.\n     * @param _vaultOwner Address of vault owner\n     */\n    function getVaultBalance(address _vaultOwner) external view override returns (uint256 collateralLocked) {\n        uint256 _vaultNum = vaultNum[_vaultOwner];\n        require(_vaultNum != 0, \"invalid-vault-number\");\n        address _vat = ManagerLike(mcdManager).vat();\n        address _urn = ManagerLike(mcdManager).urns(_vaultNum);\n        (collateralLocked, ) = VatLike(_vat).urns(collateralType[_vaultNum], _urn);\n    }\n\n    /**\n     * @dev Calculate state based on withdraw amount.\n     * @param _vaultOwner Address of vault owner\n     * @param _amount Collateral amount to withdraw.\n     */\n    function whatWouldWithdrawDo(address _vaultOwner, uint256 _amount)\n        external\n        view\n        override\n        returns (\n            uint256 collateralLocked,\n            uint256 daiDebt,\n            uint256 collateralUsdRate,\n            uint256 collateralRatio,\n            uint256 minimumDebt\n        )\n    {\n        uint256 _vaultNum = vaultNum[_vaultOwner];\n        require(_vaultNum != 0, \"invalid-vault-number\");\n        (collateralLocked, daiDebt, collateralUsdRate, collateralRatio, minimumDebt) = getVaultInfo(_vaultOwner);\n\n        GemJoinLike _gemJoin = GemJoinLike(mcdGemJoin[collateralType[_vaultNum]]);\n        uint256 _amount18 = convertTo18(_gemJoin.dec(), _amount);\n        require(_amount18 <= collateralLocked, \"insufficient-collateral-locked\");\n        collateralLocked = collateralLocked - _amount18;\n        collateralRatio = _getCollateralRatio(collateralLocked, collateralUsdRate, daiDebt);\n    }\n\n    /**\n     * @dev Get vault info\n     * @param _vaultOwner Address of vault owner\n     */\n    function getVaultInfo(address _vaultOwner)\n        public\n        view\n        override\n        returns (\n            uint256 collateralLocked,\n            uint256 daiDebt,\n            uint256 collateralUsdRate,\n            uint256 collateralRatio,\n            uint256 minimumDebt\n        )\n    {\n        uint256 _vaultNum = vaultNum[_vaultOwner];\n        require(_vaultNum != 0, \"invalid-vault-number\");\n        (collateralLocked, collateralUsdRate, daiDebt, minimumDebt) = _getVaultInfo(_vaultNum);\n        collateralRatio = _getCollateralRatio(collateralLocked, collateralUsdRate, daiDebt);\n    }\n\n    /**\n     * @notice Get max available DAI safe to borrow for given collateral type.\n     * @param _collateralType Collateral type.\n     */\n    function maxAvailableDai(bytes32 _collateralType) public view returns (uint256) {\n        return _maxAvailableDai(ManagerLike(mcdManager).vat(), _collateralType);\n    }\n\n    /**\n     * @notice Get max available DAI safe to borrow\n     * @dev Calculation based on current DAI debt and DAI limit for given collateral type.\n     * @param _vat Vat address\n     * @param _collateralType Vault collateral type.\n     */\n    function _maxAvailableDai(address _vat, bytes32 _collateralType) internal view returns (uint256) {\n        // Get stable coin Art(debt) [wad], rate [ray], line [rad]\n        //solhint-disable-next-line var-name-mixedcase\n        (uint256 Art, uint256 rate, , uint256 line, ) = VatLike(_vat).ilks(_collateralType);\n        // Calculate total issued debt is Art * rate [rad]\n        // Calculate total available dai [wad]\n        uint256 _totalAvailableDai = (line - (Art * rate)) / RAY;\n        // For safety reason, return 99% of available\n        return (_totalAvailableDai * 99) / 100;\n    }\n\n    function _joinDai(address _urn, uint256 _amount) internal {\n        DaiJoinLike _daiJoin = DaiJoinLike(mcdDaiJoin);\n        // Transfer Dai from strategy or pool to here\n        IERC20(DAI).safeTransferFrom(msg.sender, address(this), _amount);\n        // Approves adapter to move dai.\n        IERC20(DAI).safeApprove(mcdDaiJoin, 0);\n        IERC20(DAI).safeApprove(mcdDaiJoin, _amount);\n        // Joins DAI into the vat\n        _daiJoin.join(_urn, _amount);\n    }\n\n    function _joinGem(address _adapter, uint256 _amount) internal returns (uint256) {\n        GemJoinLike gemJoin = GemJoinLike(_adapter);\n\n        IERC20 token = IERC20(gemJoin.gem());\n        // Transfer token from strategy or pool to here\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n        // Approves adapter to take the Gem amount\n        token.safeApprove(_adapter, 0);\n        token.safeApprove(_adapter, _amount);\n        // Joins Gem collateral into the vat\n        gemJoin.join(address(this), _amount);\n        // Convert amount to 18 decimal\n        return convertTo18(gemJoin.dec(), _amount);\n    }\n\n    /**\n     * @dev Get borrow dai amount.\n     */\n    function _getBorrowAmount(\n        address _vat,\n        address _urn,\n        uint256 _vaultNum,\n        uint256 _wad\n    ) internal returns (int256 amount) {\n        // Updates stability fee rate\n        uint256 rate = JugLike(mcdJug).drip(collateralType[_vaultNum]);\n        // Gets DAI balance of the urn in the vat\n        uint256 dai = VatLike(_vat).dai(_urn);\n        // If there was already enough DAI in the vat balance, just exits it without adding more debt\n        if (dai < _wad * RAY) {\n            // Calculates the needed amt so together with the existing dai in the vat is enough to exit wad amount of DAI tokens\n            amount = int256(((_wad * RAY) - dai) / rate);\n            // This is needed due lack of precision. It might need to sum an extra amt wei (for the given DAI wad amount)\n            amount = (uint256(amount) * rate) < (_wad * RAY) ? amount + 1 : amount;\n        }\n    }\n\n    /// @notice Transfer vault ownership\n    function _transferVaultOwnership(\n        uint256 _vaultNum,\n        address _owner,\n        address _newOwner\n    ) internal {\n        require(_newOwner != address(0), \"new-owner-address-is-zero\");\n        require(vaultNum[_owner] == _vaultNum, \"invalid-vault-num\");\n        require(vaultNum[_newOwner] == 0, \"new-owner-owns-another-vault\");\n\n        vaultNum[_newOwner] = _vaultNum;\n        vaultNum[_owner] = 0;\n        emit TransferredVaultOwnership(_vaultNum, _owner, _newOwner);\n    }\n\n    /**\n     * @dev Get Vault Debt Amount.\n     */\n    function _getVaultDebt(\n        bytes32 _ilk,\n        address _urn,\n        address _vat\n    ) internal view returns (uint256 wad) {\n        // Get normalized debt [wad]\n        (, uint256 art) = VatLike(_vat).urns(_ilk, _urn);\n        // Get stable coin rate [ray]\n        (, uint256 rate, , , ) = VatLike(_vat).ilks(_ilk);\n        // Get balance from vat [rad]\n        uint256 dai = VatLike(_vat).dai(_urn);\n        wad = _getVaultDebt(art, rate, dai);\n    }\n\n    function _getVaultInfo(uint256 _vaultNum)\n        internal\n        view\n        returns (\n            uint256 collateralLocked,\n            uint256 collateralUsdRate,\n            uint256 daiDebt,\n            uint256 minimumDebt\n        )\n    {\n        address _urn = ManagerLike(mcdManager).urns(_vaultNum);\n        address _vat = ManagerLike(mcdManager).vat();\n        bytes32 _ilk = collateralType[_vaultNum];\n        // Get minimum liquidation ratio [ray]\n        (, uint256 mat) = SpotterLike(mcdSpot).ilks(_ilk);\n        // Get collateral locked and normalized debt [wad] [wad]\n        (uint256 ink, uint256 art) = VatLike(_vat).urns(_ilk, _urn);\n        // Get stable coin and collateral rate  and min debt [ray] [ray] [rad]\n        (, uint256 rate, uint256 spot, , uint256 dust) = VatLike(_vat).ilks(_ilk);\n\n        collateralLocked = ink;\n        daiDebt = _getVaultDebt(art, rate, VatLike(_vat).dai(_urn));\n        minimumDebt = dust / RAY;\n        // Calculate collateral rate in 18 decimals\n        collateralUsdRate = rmul(mat, spot) / 10**9;\n    }\n\n    /**\n     * @dev Get Payback amount.\n     * @notice We need to fetch latest art, rate and dai to calculate payback amount.\n     */\n    function _getWipeAmount(\n        bytes32 _ilk,\n        address _urn,\n        address _vat\n    ) internal view returns (int256 amount) {\n        // Get normalize debt, rate and dai balance from Vat\n        (, uint256 _art) = VatLike(_vat).urns(_ilk, _urn);\n        (, uint256 _rate, , , ) = VatLike(_vat).ilks(_ilk);\n        uint256 _dai = VatLike(_vat).dai(_urn);\n\n        // Uses the whole dai balance in the vat to reduce the debt\n        amount = int256(_dai / _rate);\n        // Checks the calculated amt is not higher than urn.art (total debt), otherwise uses its value\n        amount = uint256(amount) <= _art ? -amount : -int256(_art);\n    }\n\n    /// @notice Get collateral ratio\n    function _getCollateralRatio(\n        uint256 _collateralLocked,\n        uint256 _collateralRate,\n        uint256 _daiDebt\n    ) internal pure returns (uint256) {\n        if (_collateralLocked == 0) {\n            return 0;\n        }\n\n        if (_daiDebt == 0) {\n            return MAX_UINT_VALUE;\n        }\n\n        require(_collateralRate != 0, \"collateral-rate-is-zero\");\n        return wdiv(wmul(_collateralLocked, _collateralRate), _daiDebt);\n    }\n\n    /// @notice Get vault debt\n    function _getVaultDebt(\n        uint256 _art,\n        uint256 _rate,\n        uint256 _dai\n    ) internal pure returns (uint256 wad) {\n        if (_dai < (_art * _rate)) {\n            uint256 rad = ((_art * _rate) - _dai);\n            wad = rad / RAY;\n            wad = (wad * RAY) < rad ? wad + 1 : wad;\n        } else {\n            wad = 0;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/maker/IMakerDAO.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\ninterface ManagerLike {\n    function cdpCan(\n        address,\n        uint256,\n        address\n    ) external view returns (uint256);\n\n    function ilks(uint256) external view returns (bytes32);\n\n    function owns(uint256) external view returns (address);\n\n    function urns(uint256) external view returns (address);\n\n    function vat() external view returns (address);\n\n    function open(bytes32, address) external returns (uint256);\n\n    function give(uint256, address) external;\n\n    function cdpAllow(\n        uint256,\n        address,\n        uint256\n    ) external;\n\n    function urnAllow(address, uint256) external;\n\n    function frob(\n        uint256,\n        int256,\n        int256\n    ) external;\n\n    function flux(\n        uint256,\n        address,\n        uint256\n    ) external;\n\n    function move(\n        uint256,\n        address,\n        uint256\n    ) external;\n\n    function exit(\n        address,\n        uint256,\n        address,\n        uint256\n    ) external;\n\n    function quit(uint256, address) external;\n\n    function enter(address, uint256) external;\n\n    function shift(uint256, uint256) external;\n}\n\ninterface VatLike {\n    function can(address, address) external view returns (uint256);\n\n    function ilks(bytes32)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function dai(address) external view returns (uint256);\n\n    function urns(bytes32, address) external view returns (uint256, uint256);\n\n    function frob(\n        bytes32,\n        address,\n        address,\n        address,\n        int256,\n        int256\n    ) external;\n\n    function hope(address) external;\n\n    function nope(address) external;\n\n    function move(\n        address,\n        address,\n        uint256\n    ) external;\n}\n\ninterface GemJoinLike {\n    function dec() external view returns (uint256);\n\n    function gem() external view returns (address);\n\n    function ilk() external view returns (bytes32);\n\n    function join(address, uint256) external payable;\n\n    function exit(address, uint256) external;\n}\n\ninterface DaiJoinLike {\n    function vat() external returns (VatLike);\n\n    function dai() external view returns (address);\n\n    function join(address, uint256) external payable;\n\n    function exit(address, uint256) external;\n}\n\ninterface JugLike {\n    function drip(bytes32) external returns (uint256);\n}\n\ninterface SpotterLike {\n    function ilks(bytes32) external view returns (address, uint256);\n}\n"
    },
    "contracts/interfaces/vesper/ICollateralManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\ninterface ICollateralManager {\n    function addGemJoin(address[] calldata _gemJoins) external;\n\n    function borrow(uint256 _amount) external;\n\n    function createVault(bytes32 _collateralType) external returns (uint256 _vaultNum);\n\n    function depositCollateral(uint256 _amount) external;\n\n    function payback(uint256 _amount) external;\n\n    function transferVaultOwnership(address _newOwner) external;\n\n    function withdrawCollateral(uint256 _amount) external;\n\n    function getVaultBalance(address _vaultOwner) external view returns (uint256 collateralLocked);\n\n    function getVaultDebt(address _vaultOwner) external view returns (uint256 daiDebt);\n\n    function getVaultInfo(address _vaultOwner)\n        external\n        view\n        returns (\n            uint256 collateralLocked,\n            uint256 daiDebt,\n            uint256 collateralUsdRate,\n            uint256 collateralRatio,\n            uint256 minimumDebt\n        );\n\n    function mcdManager() external view returns (address);\n\n    function vaultNum(address _vaultOwner) external view returns (uint256 _vaultNum);\n\n    function whatWouldWithdrawDo(address _vaultOwner, uint256 _amount)\n        external\n        view\n        returns (\n            uint256 collateralLocked,\n            uint256 daiDebt,\n            uint256 collateralUsdRate,\n            uint256 collateralRatio,\n            uint256 minimumDebt\n        );\n}\n"
    },
    "contracts/strategies/maker/MakerStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../Strategy.sol\";\nimport \"../../interfaces/vesper/ICollateralManager.sol\";\n\n/// @dev This strategy will deposit collateral token in Maker, borrow Dai and\n/// deposit borrowed DAI in other lending pool to earn interest.\nabstract contract MakerStrategy is Strategy {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"4.0.0\";\n\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    ICollateralManager public immutable cm;\n    bytes32 public immutable collateralType;\n    uint256 public highWater;\n    uint256 public lowWater;\n    uint256 public decimalConversionFactor;\n    uint256 private constant WAT = 10**16;\n\n    constructor(\n        address _pool,\n        address _cm,\n        address _swapManager,\n        address _receiptToken,\n        bytes32 _collateralType,\n        string memory _name\n    ) Strategy(_pool, _swapManager, _receiptToken) {\n        require(_cm != address(0), \"cm-address-is-zero\");\n        collateralType = _collateralType;\n        cm = ICollateralManager(_cm);\n        // Assuming token supports 18 or less decimals.\n        uint256 _decimals = IERC20Metadata(address(IVesperPool(_pool).token())).decimals();\n        decimalConversionFactor = 10**(18 - _decimals);\n        NAME = _name;\n    }\n\n    /// @notice Create new Maker vault\n    function createVault() external onlyGovernor {\n        cm.createVault(collateralType);\n    }\n\n    /**\n     * @dev If pool is underwater this function will resolve underwater condition.\n     * If Debt in Maker is greater than Dai balance in lender then pool is underwater.\n     * Lowering DAI debt in Maker will resolve underwater condition.\n     * Resolve: Calculate required collateral token to lower DAI debt. Withdraw required\n     * collateral token from Maker and convert those to DAI via Uniswap.\n     * Finally payback debt in Maker using DAI.\n     * @dev Also report loss in pool.\n     */\n    function resurface() external onlyKeeper {\n        _resurface();\n    }\n\n    /**\n     * @notice Update balancing factors aka high water and low water values.\n     * Water mark values represent Collateral Ratio in Maker. For example 300 as high water\n     * means 300% collateral ratio.\n     * @param _highWater Value for high water mark.\n     * @param _lowWater Value for low water mark.\n     */\n    function updateBalancingFactor(uint256 _highWater, uint256 _lowWater) external onlyGovernor {\n        require(_lowWater != 0, \"lowWater-is-zero\");\n        require(_highWater > _lowWater, \"highWater-less-than-lowWater\");\n        highWater = _highWater * WAT;\n        lowWater = _lowWater * WAT;\n    }\n\n    /// @dev Convert from 18 decimals to token defined decimals.\n    function convertFrom18(uint256 _amount) public view returns (uint256) {\n        return _amount / decimalConversionFactor;\n    }\n\n    /**\n     * @notice Report total value of this strategy\n     * @dev Make sure to return value in collateral token and in order to do that\n     * we are using Uniswap to get collateral amount for earned DAI.\n     */\n    function totalValue() public view virtual override returns (uint256 _totalValue) {\n        uint256 _daiBalance = _getDaiBalance();\n        uint256 _debt = cm.getVaultDebt(address(this));\n        if (_daiBalance > _debt) {\n            uint256 _daiEarned = _daiBalance - _debt;\n            (, _totalValue) = swapManager.bestPathFixedInput(DAI, address(collateralToken), _daiEarned, 0);\n        }\n        _totalValue += convertFrom18(cm.getVaultBalance(address(this)));\n    }\n\n    function vaultNum() external view returns (uint256) {\n        return cm.vaultNum(address(this));\n    }\n\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\n    function isReservedToken(address _token) public view virtual override returns (bool) {\n        return _token == receiptToken;\n    }\n\n    /**\n     * @notice Returns true if pool is underwater.\n     * @notice Underwater - If debt is greater than (earning of pool + DAI in pool + some wei buffer).\n     * @notice Earning - Sum of DAI balance and DAI from accrued reward, if any, in lending pool.\n     */\n    function isUnderwater() public view virtual returns (bool) {\n        return cm.getVaultDebt(address(this)) > (_getDaiBalance() + IERC20(DAI).balanceOf(address(this)) + 1_000);\n    }\n\n    /**\n     * @notice Before migration hook. It will be called during migration\n     * @dev Transfer Maker vault ownership to new strategy\n     * @param _newStrategy Address of new strategy.\n     */\n    function _beforeMigration(address _newStrategy) internal virtual override {\n        require(MakerStrategy(_newStrategy).collateralType() == collateralType, \"collateral-type-must-be-the-same\");\n        cm.transferVaultOwnership(_newStrategy);\n    }\n\n    function _approveToken(uint256 _amount) internal virtual override {\n        IERC20(DAI).safeApprove(address(cm), _amount);\n        collateralToken.safeApprove(address(cm), _amount);\n        collateralToken.safeApprove(pool, _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            collateralToken.safeApprove(address(swapManager.ROUTERS(i)), _amount);\n            IERC20(DAI).safeApprove(address(swapManager.ROUTERS(i)), _amount);\n        }\n    }\n\n    function _moveDaiToMaker(uint256 _amount) internal {\n        if (_amount != 0) {\n            _withdrawDaiFromLender(_amount);\n            cm.payback(_amount);\n        }\n    }\n\n    function _moveDaiFromMaker(uint256 _amount) internal virtual {\n        cm.borrow(_amount);\n        _amount = IERC20(DAI).balanceOf(address(this));\n        _depositDaiToLender(_amount);\n    }\n\n    /**\n     * @notice Withdraw collateral to payback excess debt in pool.\n     * @param _excessDebt Excess debt of strategy in collateral token\n     * @return payback amount in collateral token. Usually it is equal to excess debt.\n     */\n    function _liquidate(uint256 _excessDebt) internal virtual override returns (uint256) {\n        _withdrawHere(_excessDebt);\n        return _excessDebt;\n    }\n\n    /**\n     * @notice Calculate earning and convert it to collateral token\n     * @dev Also claim rewards if available.\n     *      Withdraw excess DAI from lender.\n     *      Swap net earned DAI to collateral token\n     * @return profit in collateral token\n     */\n    function _realizeProfit(\n        uint256 /*_totalDebt*/\n    ) internal virtual override returns (uint256) {\n        _claimRewardsAndConvertTo(DAI);\n        _rebalanceDaiInLender();\n        uint256 _daiBalance = IERC20(DAI).balanceOf(address(this));\n        if (_daiBalance != 0) {\n            _safeSwap(DAI, address(collateralToken), _daiBalance, 1);\n        }\n        return collateralToken.balanceOf(address(this));\n    }\n\n    /**\n     * @notice Calculate collateral loss from resurface, if any\n     * @dev Difference of total debt of strategy in pool and collateral locked\n     *      in Maker vault is the loss.\n     * @return loss in collateral token\n     */\n    function _realizeLoss(uint256 _totalDebt) internal virtual override returns (uint256) {\n        uint256 _collateralLocked = convertFrom18(cm.getVaultBalance(address(this)));\n        return _totalDebt > _collateralLocked ? _totalDebt - _collateralLocked : 0;\n    }\n\n    /**\n     * @notice Deposit collateral in Maker and rebalance collateral and debt in Maker.\n     * @dev Based on defined risk parameter either borrow more DAI from Maker or\n     * payback some DAI in Maker. It will try to mitigate risk of liquidation.\n     */\n    function _reinvest() internal virtual override {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n        if (_collateralBalance != 0) {\n            cm.depositCollateral(_collateralBalance);\n        }\n\n        (\n            uint256 _collateralLocked,\n            uint256 _currentDebt,\n            uint256 _collateralUsdRate,\n            uint256 _collateralRatio,\n            uint256 _minimumAllowedDebt\n        ) = cm.getVaultInfo(address(this));\n        uint256 _maxDebt = (_collateralLocked * _collateralUsdRate) / highWater;\n        if (_maxDebt < _minimumAllowedDebt) {\n            // Dusting Scenario:: Based on collateral locked, if our max debt is less\n            // than Maker defined minimum debt then payback whole debt and wind up.\n            _moveDaiToMaker(_currentDebt);\n        } else {\n            if (_collateralRatio > highWater) {\n                require(!isUnderwater(), \"pool-is-underwater\");\n                // Safe to borrow more DAI\n                _moveDaiFromMaker(_maxDebt - _currentDebt);\n            } else if (_collateralRatio < lowWater) {\n                // Being below low water brings risk of liquidation in Maker.\n                // Withdraw DAI from Lender and deposit in Maker\n                _moveDaiToMaker(_currentDebt - _maxDebt);\n            }\n        }\n    }\n\n    function _resurface() internal virtual {\n        require(isUnderwater(), \"pool-is-above-water\");\n        uint256 _daiNeeded = cm.getVaultDebt(address(this)) - _getDaiBalance();\n        (address[] memory _path, uint256 _collateralNeeded, uint256 rIdx) =\n            swapManager.bestInputFixedOutput(address(collateralToken), DAI, _daiNeeded);\n        if (_collateralNeeded != 0) {\n            cm.withdrawCollateral(_collateralNeeded);\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\n                _collateralNeeded,\n                1,\n                _path,\n                address(this),\n                block.timestamp\n            );\n            cm.payback(IERC20(DAI).balanceOf(address(this)));\n            IVesperPool(pool).reportLoss(_collateralNeeded);\n        }\n    }\n\n    function _withdraw(uint256 _amount) internal override {\n        _withdrawHere(_amount);\n        collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)));\n    }\n\n    // TODO do we need a safe withdraw\n    function _withdrawHere(uint256 _amount) internal {\n        (\n            uint256 collateralLocked,\n            uint256 debt,\n            uint256 collateralUsdRate,\n            uint256 collateralRatio,\n            uint256 minimumDebt\n        ) = cm.whatWouldWithdrawDo(address(this), _amount);\n        if (debt != 0 && collateralRatio < lowWater) {\n            // If this withdraw results in Low Water scenario.\n            uint256 maxDebt = (collateralLocked * collateralUsdRate) / highWater;\n            if (maxDebt < minimumDebt) {\n                // This is Dusting scenario\n                _moveDaiToMaker(debt);\n            } else if (maxDebt < debt) {\n                _moveDaiToMaker(debt - maxDebt);\n            }\n        }\n        cm.withdrawCollateral(_amount);\n    }\n\n    function _depositDaiToLender(uint256 _amount) internal virtual;\n\n    function _rebalanceDaiInLender() internal virtual;\n\n    function _withdrawDaiFromLender(uint256 _amount) internal virtual;\n\n    function _getDaiBalance() internal view virtual returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/strategies/maker/VesperMakerStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./MakerStrategy.sol\";\nimport \"../../interfaces/vesper/IPoolRewards.sol\";\n\n/// @dev This strategy will deposit collateral token in Maker, borrow Dai and\n/// deposit borrowed DAI in Vesper DAI pool to earn interest.\ncontract VesperMakerStrategy is MakerStrategy {\n    using SafeERC20 for IERC20;\n    address internal constant VSP = 0x1b40183EFB4Dd766f11bDa7A7c3AD8982e998421;\n\n    constructor(\n        address _pool,\n        address _cm,\n        address _swapManager,\n        address _vPool,\n        bytes32 _collateralType,\n        string memory _name\n    ) MakerStrategy(_pool, _cm, _swapManager, _vPool, _collateralType, _name) {\n        require(address(IVesperPool(_vPool).token()) == DAI, \"not-a-valid-dai-pool\");\n    }\n\n    function _approveToken(uint256 _amount) internal override {\n        super._approveToken(_amount);\n        IERC20(DAI).safeApprove(address(receiptToken), _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            IERC20(VSP).safeApprove(address(swapManager.ROUTERS(i)), _amount);\n        }\n    }\n\n    function _getDaiBalance() internal view override returns (uint256) {\n        return (IVesperPool(receiptToken).pricePerShare() * IVesperPool(receiptToken).balanceOf(address(this))) / 1e18;\n    }\n\n    function _depositDaiToLender(uint256 _amount) internal override {\n        IVesperPool(receiptToken).deposit(_amount);\n    }\n\n    function _withdrawDaiFromLender(uint256 _amount) internal override {\n        uint256 _pricePerShare = IVesperPool(receiptToken).pricePerShare();\n        uint256 _share = (_amount * 1e18) / _pricePerShare;\n        // Should not withdraw less than requested amount\n        _share = _amount > ((_share * _pricePerShare) / 1e18) ? _share + 1 : _share;\n        IVesperPool(receiptToken).whitelistedWithdraw(_share);\n    }\n\n    function _rebalanceDaiInLender() internal virtual override {\n        uint256 _daiDebt = cm.getVaultDebt(address(this));\n        uint256 _daiBalance = _getDaiBalance();\n        if (_daiBalance > _daiDebt) {\n            _withdrawDaiFromLender(_daiBalance - _daiDebt);\n        }\n    }\n\n    /// @notice Claim rewardToken from lender and convert it into DAI\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\n        uint256 _vspAmount = IERC20(VSP).balanceOf(address(this));\n        if (_vspAmount > 0) {\n            _safeSwap(VSP, _toToken, _vspAmount, 1);\n        }\n    }\n}\n"
    },
    "contracts/strategies/maker/earn/EarnCompoundMakerStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../MakerStrategy.sol\";\nimport \"../../Earn.sol\";\nimport \"../CompoundMakerStrategy.sol\";\nimport \"../../aave/AaveCore.sol\";\nimport \"../../../interfaces/vesper/IPoolRewards.sol\";\n\n/// @dev This strategy will deposit collateral token in Maker, borrow Dai and\n/// deposit borrowed DAI in Aave to earn interest.\ncontract EarnCompoundMakerStrategy is CompoundMakerStrategy, Earn {\n    //solhint-disable no-empty-blocks\n    constructor(\n        address _pool,\n        address _cm,\n        address _swapManager,\n        address _receiptToken,\n        bytes32 _collateralType,\n        address _dripToken,\n        string memory _name\n    ) CompoundMakerStrategy(_pool, _cm, _swapManager, _receiptToken, _collateralType, _name) Earn(_dripToken) {}\n\n    function totalValueCurrent() public override(Strategy, CompoundMakerStrategy) returns (uint256 _totalValue) {\n        _claimComp();\n        _totalValue = _calculateTotalValue(IERC20(COMP).balanceOf(address(this)));\n    }\n\n    function _claimRewardsAndConvertTo(address _toToken) internal override(Strategy, CompoundMakerStrategy) {\n        CompoundMakerStrategy._claimRewardsAndConvertTo(_toToken);\n    }\n\n    /**\n     * @notice Calculate earning and convert it to collateral token\n     * @dev Also claim rewards if available.\n     *      Withdraw excess DAI from lender.\n     *      Swap net earned DAI to collateral token\n     * @return profit in collateral token\n     */\n    function _realizeProfit(\n        uint256 /*_totalDebt*/\n    ) internal virtual override(Strategy, MakerStrategy) returns (uint256) {\n        _claimRewardsAndConvertTo(dripToken);\n        _rebalanceDaiInLender();\n        _forwardEarning();\n        return collateralToken.balanceOf(address(this));\n    }\n}\n"
    },
    "contracts/strategies/maker/CompoundMakerStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./MakerStrategy.sol\";\nimport \"../../interfaces/compound/ICompound.sol\";\n\n/// @dev This strategy will deposit collateral token in Maker, borrow Dai and\n/// deposit borrowed DAI in Compound to earn interest.\ncontract CompoundMakerStrategy is MakerStrategy {\n    using SafeERC20 for IERC20;\n\n    address internal constant COMP = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\n    CToken internal immutable cToken;\n    Comptroller internal constant COMPTROLLER = Comptroller(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\n\n    constructor(\n        address _pool,\n        address _cm,\n        address _swapManager,\n        address _receiptToken,\n        bytes32 _collateralType,\n        string memory _name\n    ) MakerStrategy(_pool, _cm, _swapManager, _receiptToken, _collateralType, _name) {\n        require(_receiptToken != address(0), \"cToken-address-is-zero\");\n        cToken = CToken(_receiptToken);\n    }\n\n    /**\n     * @notice Report total value of this strategy\n     * @dev Make sure to return value in collateral token.\n     * @dev Total value = DAI earned + COMP earned + Collateral locked in Maker\n     */\n    function totalValue() public view virtual override returns (uint256 _totalValue) {\n        _totalValue = _calculateTotalValue(COMPTROLLER.compAccrued(address(this)));\n    }\n\n    function totalValueCurrent() public virtual override returns (uint256 _totalValue) {\n        _claimComp();\n        _totalValue = _calculateTotalValue(IERC20(COMP).balanceOf(address(this)));\n    }\n\n    function _calculateTotalValue(uint256 _compAccrued) internal view returns (uint256 _totalValue) {\n        uint256 _daiBalance = _getDaiBalance();\n        uint256 _debt = cm.getVaultDebt(address(this));\n        if (_daiBalance > _debt) {\n            uint256 _daiEarned = _daiBalance - _debt;\n            (, _totalValue) = swapManager.bestPathFixedInput(DAI, address(collateralToken), _daiEarned, 0);\n        }\n\n        if (_compAccrued != 0) {\n            (, uint256 _compAsCollateral) =\n                swapManager.bestPathFixedInput(COMP, address(collateralToken), _compAccrued, 0);\n            _totalValue += _compAsCollateral;\n        }\n        _totalValue += convertFrom18(cm.getVaultBalance(address(this)));\n    }\n\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\n    function isReservedToken(address _token) public view override returns (bool) {\n        return _token == receiptToken || _token == COMP;\n    }\n\n    /**\n     * @notice Returns true if pool is underwater.\n     * @notice Underwater - If debt is greater than earning of pool.\n     * @notice Earning - Sum of DAI balance and DAI from accrued reward, if any, in lending pool.\n     * @dev There can be a scenario when someone calls claimComp() periodically which will\n     * leave compAccrued = 0 and pool might be underwater. Call rebalance() to liquidate COMP.\n     */\n    function isUnderwater() public view override returns (bool) {\n        uint256 _compAccrued = COMPTROLLER.compAccrued(address(this));\n        uint256 _daiEarned;\n        if (_compAccrued != 0) {\n            (, _daiEarned) = swapManager.bestPathFixedInput(COMP, DAI, _compAccrued, 0);\n        }\n        return cm.getVaultDebt(address(this)) > (_getDaiBalance() + _daiEarned);\n    }\n\n    function _approveToken(uint256 _amount) internal override {\n        super._approveToken(_amount);\n        IERC20(DAI).safeApprove(address(receiptToken), _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            IERC20(COMP).safeApprove(address(swapManager.ROUTERS(i)), _amount);\n        }\n    }\n\n    /// @notice Claim rewardToken from lender and convert it into DAI\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\n        _claimComp();\n        uint256 _compAmount = IERC20(COMP).balanceOf(address(this));\n        if (_compAmount > 0) {\n            _safeSwap(COMP, _toToken, _compAmount, 1);\n        }\n    }\n\n    function _claimComp() internal {\n        address[] memory _markets = new address[](1);\n        _markets[0] = address(cToken);\n        COMPTROLLER.claimComp(address(this), _markets);\n    }\n\n    function _depositDaiToLender(uint256 _amount) internal override {\n        if (_amount != 0) {\n            require(cToken.mint(_amount) == 0, \"deposit-in-compound-failed\");\n        }\n    }\n\n    function _getDaiBalance() internal view override returns (uint256) {\n        return (cToken.balanceOf(address(this)) * cToken.exchangeRateStored()) / 1e18;\n    }\n\n    /**\n     * @dev Rebalance DAI in lender. If lender has more DAI than DAI debt in Maker\n     * then withdraw excess DAI from lender. If lender is short on DAI, underwater,\n     * then deposit DAI to lender.\n     * @dev There may be a scenario where we do not have enough DAI to deposit to\n     * lender, in that case pool will be underwater even after rebalanceDai.\n     */\n    function _rebalanceDaiInLender() internal override {\n        uint256 _daiDebtInMaker = cm.getVaultDebt(address(this));\n        uint256 _daiInLender = _getDaiBalance();\n        if (_daiInLender > _daiDebtInMaker) {\n            _withdrawDaiFromLender(_daiInLender - _daiDebtInMaker);\n        } else if (_daiInLender < _daiDebtInMaker) {\n            // We have more DAI debt in Maker than DAI in lender\n            uint256 _daiNeeded = _daiDebtInMaker - _daiInLender;\n            uint256 _daiBalanceHere = IERC20(DAI).balanceOf(address(this));\n            if (_daiBalanceHere > _daiNeeded) {\n                _depositDaiToLender(_daiNeeded);\n            } else {\n                _depositDaiToLender(_daiBalanceHere);\n            }\n        }\n    }\n\n    function _withdrawDaiFromLender(uint256 _amount) internal override {\n        require(cToken.redeemUnderlying(_amount) == 0, \"withdraw-from-compound-failed\");\n    }\n}\n"
    },
    "contracts/strategies/aave/AaveCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../../interfaces/aave/IAave.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"../../pool/Errors.sol\";\n\n/// @title This contract provide core operations for Aave\nabstract contract AaveCore {\n    //solhint-disable-next-line const-name-snakecase\n    StakedAave public constant stkAAVE = StakedAave(0x4da27a545c0c5B758a6BA100e3a049001de870f5);\n    address public constant AAVE = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\n\n    AaveLendingPool public immutable aaveLendingPool;\n    AaveProtocolDataProvider public aaveProtocolDataProvider;\n    AaveIncentivesController public immutable aaveIncentivesController;\n\n    AToken internal immutable aToken;\n    bytes32 private constant AAVE_PROVIDER_ID = 0x0100000000000000000000000000000000000000000000000000000000000000;\n\n    constructor(address _receiptToken) {\n        require(_receiptToken != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n        aToken = AToken(_receiptToken);\n        // If there is no AAVE incentive then below call will fail\n        try AToken(_receiptToken).getIncentivesController() returns (address _aaveIncentivesController) {\n            aaveIncentivesController = AaveIncentivesController(_aaveIncentivesController);\n        } catch {} //solhint-disable no-empty-blocks\n        AaveLendingPoolAddressesProvider aaveAddressesProvider =\n            AaveLendingPoolAddressesProvider(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5);\n        aaveLendingPool = AaveLendingPool(aaveAddressesProvider.getLendingPool());\n        aaveProtocolDataProvider = AaveProtocolDataProvider(aaveAddressesProvider.getAddress(AAVE_PROVIDER_ID));\n    }\n\n    ///////////////////////// External access functions /////////////////////////\n\n    /**\n     * @notice Initiate cooldown to unstake aave.\n     * @dev We only want to call this function when cooldown is expired and\n     * that's the reason we have 'if' condition.\n     * @dev Child contract should expose this function as external and onlyKeeper\n     */\n    function _startCooldown() internal returns (bool) {\n        if (canStartCooldown()) {\n            stkAAVE.cooldown();\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @notice Unstake Aave from stakedAave contract\n     * @dev We want to unstake as soon as favorable condition exit\n     * @dev No guarding condition thus this call can fail, if we can't unstake.\n     * @dev Child contract should expose this function as external and onlyKeeper\n     */\n    function _unstakeAave() internal {\n        stkAAVE.redeem(address(this), type(uint256).max);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    /// @notice Returns true if Aave can be unstaked\n    function canUnstake() external view returns (bool) {\n        (, uint256 _cooldownEnd, uint256 _unstakeEnd) = cooldownData();\n        return _canUnstake(_cooldownEnd, _unstakeEnd);\n    }\n\n    /// @notice Returns true if we should start cooldown\n    function canStartCooldown() public view returns (bool) {\n        (uint256 _cooldownStart, , uint256 _unstakeEnd) = cooldownData();\n        return _canStartCooldown(_cooldownStart, _unstakeEnd);\n    }\n\n    /// @notice Return cooldown related timestamps\n    function cooldownData()\n        public\n        view\n        returns (\n            uint256 _cooldownStart,\n            uint256 _cooldownEnd,\n            uint256 _unstakeEnd\n        )\n    {\n        _cooldownStart = stkAAVE.stakersCooldowns(address(this));\n        _cooldownEnd = _cooldownStart + stkAAVE.COOLDOWN_SECONDS();\n        _unstakeEnd = _cooldownEnd + stkAAVE.UNSTAKE_WINDOW();\n    }\n\n    /**\n     * @notice Claim Aave. Also unstake all Aave if favorable condition exits or start cooldown.\n     * @dev If we unstake all Aave, we can't start cooldown because it requires StakedAave balance.\n     * @dev DO NOT convert 'if else' to 2 'if's as we are reading cooldown state once to save gas.\n     * @dev Not all collateral token has aave incentive\n     */\n    function _claimAave() internal returns (uint256) {\n        if (address(aaveIncentivesController) == address(0)) {\n            return 0;\n        }\n        (uint256 _cooldownStart, uint256 _cooldownEnd, uint256 _unstakeEnd) = cooldownData();\n        if (_cooldownStart == 0 || block.timestamp > _unstakeEnd) {\n            // claim stkAave when its first rebalance or unstake period passed.\n            aaveIncentivesController.claimRewards(getAssets(), type(uint256).max, address(this));\n        }\n        // Fetch and check again for next action.\n        (_cooldownStart, _cooldownEnd, _unstakeEnd) = cooldownData();\n        if (_canUnstake(_cooldownEnd, _unstakeEnd)) {\n            stkAAVE.redeem(address(this), type(uint256).max);\n        } else if (_canStartCooldown(_cooldownStart, _unstakeEnd)) {\n            stkAAVE.cooldown();\n        }\n\n        stkAAVE.claimRewards(address(this), type(uint256).max);\n        return IERC20(AAVE).balanceOf(address(this));\n    }\n\n    /// @notice Deposit asset into Aave\n    function _deposit(address _asset, uint256 _amount) internal {\n        if (_amount != 0) {\n            aaveLendingPool.deposit(_asset, _amount, address(this), 0);\n        }\n    }\n\n    function getAssets() internal view returns (address[] memory) {\n        address[] memory _assets = new address[](1);\n        _assets[0] = address(aToken);\n        return _assets;\n    }\n\n    /**\n     * @notice Safe withdraw will make sure to check asking amount against available amount.\n     * @dev Check we have enough aToken and liquidity to support this withdraw\n     * @param _asset Address of asset to withdraw\n     * @param _to Address that will receive collateral token.\n     * @param _amount Amount of collateral to withdraw.\n     * @return Actual collateral withdrawn\n     */\n    function _safeWithdraw(\n        address _asset,\n        address _to,\n        uint256 _amount\n    ) internal returns (uint256) {\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\n        // If Vesper becomes large liquidity provider in Aave(This happened in past in vUSDC 1.0)\n        // In this case we might have more aToken compare to available liquidity in Aave and any\n        // withdraw asking more than available liquidity will fail. To do safe withdraw, check\n        // _amount against available liquidity.\n        (uint256 _availableLiquidity, , , , , , , , , ) = aaveProtocolDataProvider.getReserveData(_asset);\n        // Get minimum of _amount, _aTokenBalance and _availableLiquidity\n        return _withdraw(_asset, _to, Math.min(_amount, Math.min(_aTokenBalance, _availableLiquidity)));\n    }\n\n    /**\n     * @notice Withdraw given amount of collateral from Aave to given address\n     * @param _asset Address of asset to withdraw\n     * @param _to Address that will receive collateral token.\n     * @param _amount Amount of collateral to withdraw.\n     * @return Actual collateral withdrawn\n     */\n    function _withdraw(\n        address _asset,\n        address _to,\n        uint256 _amount\n    ) internal returns (uint256) {\n        if (_amount != 0) {\n            require(aaveLendingPool.withdraw(_asset, _amount, _to) == _amount, Errors.INCORRECT_WITHDRAW_AMOUNT);\n        }\n        return _amount;\n    }\n\n    /**\n     * @dev Return true, only if we have StakedAave balance and either cooldown expired or cooldown is zero\n     * @dev If we are in cooldown period we cannot unstake Aave. But our cooldown is still valid so we do\n     * not want to reset/start cooldown.\n     */\n    function _canStartCooldown(uint256 _cooldownStart, uint256 _unstakeEnd) internal view returns (bool) {\n        return stkAAVE.balanceOf(address(this)) != 0 && (_cooldownStart == 0 || block.timestamp > _unstakeEnd);\n    }\n\n    /// @dev Return true, if cooldown is over and we are in unstake window.\n    function _canUnstake(uint256 _cooldownEnd, uint256 _unstakeEnd) internal view returns (bool) {\n        return block.timestamp > _cooldownEnd && block.timestamp <= _unstakeEnd;\n    }\n\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\n    function _isReservedToken(address _token) internal view returns (bool) {\n        return _token == address(aToken) || _token == AAVE || _token == address(stkAAVE);\n    }\n\n    /**\n     * @notice Return total AAVE incentive allocated to this address\n     * @dev Aave and StakedAave are 1:1\n     * @dev Not all collateral token has aave incentive\n     */\n    function _totalAave() internal view returns (uint256) {\n        if (address(aaveIncentivesController) == address(0)) {\n            return 0;\n        }\n        // TotalAave = Get current StakedAave rewards from controller +\n        //             StakedAave balance here +\n        //             Aave rewards by staking Aave in StakedAave contract\n        return\n            aaveIncentivesController.getRewardsBalance(getAssets(), address(this)) +\n            stkAAVE.balanceOf(address(this)) +\n            stkAAVE.getTotalRewardsBalance(address(this));\n    }\n}\n"
    },
    "contracts/interfaces/compound/ICompound.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\ninterface CToken {\n    function accrueInterest() external returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function balanceOfUnderlying(address owner) external returns (uint256);\n\n    function borrowBalanceCurrent(address account) external returns (uint256);\n\n    function borrowBalanceStored(address account) external view returns (uint256);\n\n    function exchangeRateCurrent() external returns (uint256);\n\n    function exchangeRateStored() external view returns (uint256);\n\n    function getAccountSnapshot(address account)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function borrow(uint256 borrowAmount) external returns (uint256);\n\n    function mint() external payable; // For ETH\n\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    function repayBorrow() external payable; // For ETH\n\n    function repayBorrow(uint256 repayAmount) external returns (uint256); // For ERC20\n\n    function transfer(address user, uint256 amount) external returns (bool);\n\n    function getCash() external view returns (uint256);\n\n    function transferFrom(\n        address owner,\n        address user,\n        uint256 amount\n    ) external returns (bool);\n\n    function underlying() external view returns (address);\n}\n\ninterface Comptroller {\n    function claimComp(address holder, address[] memory) external;\n\n    function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\n\n    function exitMarket(address cToken) external returns (uint256);\n\n    function compAccrued(address holder) external view returns (uint256);\n\n    function getAccountLiquidity(address account)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function markets(address market)\n        external\n        view\n        returns (\n            bool isListed,\n            uint256 collateralFactorMantissa,\n            bool isCompted\n        );\n}\n"
    },
    "contracts/interfaces/aave/IAave.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface AaveLendingPoolAddressesProvider {\n    function getLendingPool() external view returns (address);\n\n    function getAddress(bytes32 id) external view returns (address);\n}\n\ninterface AToken is IERC20 {\n    /**\n     * @dev Returns the address of the incentives controller contract\n     **/\n    function getIncentivesController() external view returns (address);\n\n    function mint(\n        address user,\n        uint256 amount,\n        uint256 index\n    ) external returns (bool);\n\n    function burn(\n        address user,\n        address receiverOfUnderlying,\n        uint256 amount,\n        uint256 index\n    ) external;\n}\n\ninterface AaveIncentivesController {\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\n\n    function claimRewards(\n        address[] calldata assets,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n}\n\ninterface AaveLendingPool {\n    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    function flashLoan(\n        address receiverAddress,\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata modes,\n        address onBehalfOf,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n\n    function borrow(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        uint16 referralCode,\n        address onBehalfOf\n    ) external;\n\n    function repay(\n        address asset,\n        uint256 amount,\n        uint256 rateMode,\n        address onBehalfOf\n    ) external;\n}\n\ninterface AaveProtocolDataProvider {\n    function getReserveTokensAddresses(address asset)\n        external\n        view\n        returns (\n            address aTokenAddress,\n            address stableDebtTokenAddress,\n            address variableDebtTokenAddress\n        );\n\n    function getReserveData(address asset)\n        external\n        view\n        returns (\n            uint256 availableLiquidity,\n            uint256 totalStableDebt,\n            uint256 totalVariableDebt,\n            uint256 liquidityRate,\n            uint256 variableBorrowRate,\n            uint256 stableBorrowRate,\n            uint256 averageStableBorrowRate,\n            uint256 liquidityIndex,\n            uint256 variableBorrowIndex,\n            uint40 lastUpdateTimestamp\n        );\n\n    function getReserveConfigurationData(address asset)\n        external\n        view\n        returns (\n            uint256 decimals,\n            uint256 ltv,\n            uint256 liquidationThreshold,\n            uint256 liquidationBonus,\n            uint256 reserveFactor,\n            bool usageAsCollateralEnabled,\n            bool borrowingEnabled,\n            bool stableBorrowRateEnabled,\n            bool isActive,\n            bool isFrozen\n        );\n}\n\n//solhint-disable func-name-mixedcase\ninterface StakedAave is IERC20 {\n    function claimRewards(address to, uint256 amount) external;\n\n    function cooldown() external;\n\n    function stake(address onBehalfOf, uint256 amount) external;\n\n    function redeem(address to, uint256 amount) external;\n\n    function getTotalRewardsBalance(address staker) external view returns (uint256);\n\n    function stakersCooldowns(address staker) external view returns (uint256);\n\n    function COOLDOWN_SECONDS() external view returns (uint256);\n\n    function UNSTAKE_WINDOW() external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "contracts/strategies/maker/earn/EarnAaveMakerStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../MakerStrategy.sol\";\nimport \"../../Earn.sol\";\nimport \"../AaveMakerStrategy.sol\";\nimport \"../../aave/AaveCore.sol\";\nimport \"../../../interfaces/vesper/IPoolRewards.sol\";\n\n/// @dev This strategy will deposit collateral token in Maker, borrow Dai and\n/// deposit borrowed DAI in Aave to earn interest.\ncontract EarnAaveMakerStrategy is AaveMakerStrategy, Earn {\n    //solhint-disable no-empty-blocks\n    constructor(\n        address _pool,\n        address _cm,\n        address _swapManager,\n        address _receiptToken,\n        bytes32 _collateralType,\n        address _dripToken,\n        string memory _name\n    ) AaveMakerStrategy(_pool, _cm, _swapManager, _receiptToken, _collateralType, _name) Earn(_dripToken) {}\n\n    //solhint-enable no-empty-blocks\n\n    function _claimRewardsAndConvertTo(address _toToken) internal override(Strategy, AaveMakerStrategy) {\n        AaveMakerStrategy._claimRewardsAndConvertTo(_toToken);\n    }\n\n    /**\n     * @notice Calculate earning and convert it to collateral token\n     * @dev Also claim rewards if available.\n     *      Withdraw excess DAI from lender.\n     *      Swap net earned DAI to collateral token\n     * @return profit in collateral token\n     */\n    function _realizeProfit(\n        uint256 /*_totalDebt*/\n    ) internal virtual override(Strategy, MakerStrategy) returns (uint256) {\n        _claimRewardsAndConvertTo(dripToken);\n        _rebalanceDaiInLender();\n        _forwardEarning();\n        return collateralToken.balanceOf(address(this));\n    }\n}\n"
    },
    "contracts/strategies/maker/AaveMakerStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./MakerStrategy.sol\";\nimport \"../aave/AaveCore.sol\";\n\n/// @dev This strategy will deposit collateral token in Maker, borrow Dai and\n/// deposit borrowed DAI in Aave to earn interest.\ncontract AaveMakerStrategy is MakerStrategy, AaveCore {\n    using SafeERC20 for IERC20;\n\n    //solhint-disable no-empty-blocks\n    constructor(\n        address _pool,\n        address _cm,\n        address _swapManager,\n        address _receiptToken,\n        bytes32 _collateralType,\n        string memory _name\n    ) MakerStrategy(_pool, _cm, _swapManager, _receiptToken, _collateralType, _name) AaveCore(_receiptToken) {}\n\n    /// @notice Initiate cooldown to unstake aave.\n    function startCooldown() external onlyKeeper returns (bool) {\n        return _startCooldown();\n    }\n\n    /// @notice Unstake Aave from stakedAave contract\n    function unstakeAave() external onlyKeeper {\n        _unstakeAave();\n    }\n\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\n    function isReservedToken(address _token) public view virtual override returns (bool) {\n        return _isReservedToken(_token);\n    }\n\n    function _approveToken(uint256 _amount) internal override {\n        super._approveToken(_amount);\n        IERC20(DAI).safeApprove(address(aaveLendingPool), _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            IERC20(AAVE).safeApprove(address(swapManager.ROUTERS(i)), _amount);\n        }\n    }\n\n    /**\n     * @notice Transfer StakeAave to newStrategy\n     * @param _newStrategy Address of newStrategy\n     */\n    function _beforeMigration(address _newStrategy) internal override {\n        super._beforeMigration(_newStrategy);\n        IERC20(stkAAVE).safeTransfer(_newStrategy, stkAAVE.balanceOf(address(this)));\n    }\n\n    /// @notice Claim Aave rewards and convert to _toToken.\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\n        uint256 _aaveAmount = _claimAave();\n        if (_aaveAmount > 0) {\n            _safeSwap(AAVE, _toToken, _aaveAmount, 1);\n        }\n    }\n\n    function _depositDaiToLender(uint256 _amount) internal override {\n        aaveLendingPool.deposit(DAI, _amount, address(this), 0);\n    }\n\n    function _rebalanceDaiInLender() internal override {\n        uint256 _daiDebt = cm.getVaultDebt(address(this));\n        uint256 _daiBalance = _getDaiBalance();\n        if (_daiBalance > _daiDebt) {\n            _withdrawDaiFromLender(_daiBalance - _daiDebt);\n        }\n    }\n\n    function _withdrawDaiFromLender(uint256 _amount) internal override {\n        _safeWithdraw(DAI, address(this), _amount);\n    }\n\n    function _getDaiBalance() internal view override returns (uint256) {\n        return aToken.balanceOf(address(this));\n    }\n}\n"
    },
    "contracts/test/AaveMakerStrategyETH_C.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../strategies/maker/AaveMakerStrategy.sol\";\n\n//solhint-disable no-empty-blocks, contract-name-camelcase\ncontract AaveMakerStrategyETH_C is AaveMakerStrategy {\n    // aDAI = 0x028171bCA77440897B824Ca71D1c56caC55b68A3\n    constructor(\n        address _pool,\n        address _cm,\n        address _swapManager\n    )\n        AaveMakerStrategy(\n            _pool,\n            _cm,\n            _swapManager,\n            0x028171bCA77440897B824Ca71D1c56caC55b68A3,\n            \"ETH-C\",\n            \"AaveMakerStrategyETH_C\"\n        )\n    {}\n}\n"
    },
    "contracts/test/AaveMakerStrategyETH_A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../strategies/maker/AaveMakerStrategy.sol\";\n\n//solhint-disable no-empty-blocks, contract-name-camelcase\ncontract AaveMakerStrategyETH_A is AaveMakerStrategy {\n    // aDAI = 0x028171bCA77440897B824Ca71D1c56caC55b68A3\n    constructor(\n        address _pool,\n        address _cm,\n        address _swapManager\n    )\n        AaveMakerStrategy(\n            _pool,\n            _cm,\n            _swapManager,\n            0x028171bCA77440897B824Ca71D1c56caC55b68A3,\n            \"ETH-A\",\n            \"AaveMakerStrategyETH_A\"\n        )\n    {}\n}\n"
    },
    "contracts/strategies/aave/AaveStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./AaveCore.sol\";\nimport \"../Strategy.sol\";\n\n/// @dev This strategy will deposit collateral token in Aave and earn interest.\ncontract AaveStrategy is Strategy, AaveCore {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"4.0.0\";\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _receiptToken,\n        string memory _name\n    ) Strategy(_pool, _swapManager, _receiptToken) AaveCore(_receiptToken) {\n        NAME = _name;\n    }\n\n    //solhint-enable\n\n    /// @notice Initiate cooldown to unstake aave.\n    function startCooldown() external onlyKeeper returns (bool) {\n        return _startCooldown();\n    }\n\n    /// @notice Unstake Aave from stakedAave contract\n    function unstakeAave() external onlyKeeper {\n        _unstakeAave();\n    }\n\n    function _setupOracles() internal virtual override {\n        swapManager.createOrUpdateOracle(AAVE, WETH, oraclePeriod, oracleRouterIdx);\n        if (address(collateralToken) != WETH) {\n            swapManager.createOrUpdateOracle(AAVE, address(collateralToken), oraclePeriod, oracleRouterIdx);\n        }\n    }\n\n    /**\n     * @notice Report total value\n     * @dev aToken and collateral are 1:1\n     */\n    function totalValue() public view virtual override returns (uint256) {\n        uint256 _totalAaveAmt = _totalAave();\n        if (_totalAaveAmt == 0) {\n            // As there is no AAVE balance return aToken balance as totalValue.\n            return aToken.balanceOf(address(this));\n        }\n        // Get collateral value of total aave rewards\n        (, uint256 _aaveAsCollateral, ) =\n            swapManager.bestOutputFixedInput(AAVE, address(collateralToken), _totalAaveAmt);\n        // Total value = aave as collateral + aToken balance\n        return _aaveAsCollateral + aToken.balanceOf(address(this));\n    }\n\n    function isReservedToken(address _token) public view override returns (bool) {\n        return _isReservedToken(_token);\n    }\n\n    /// @notice Large approval of token\n    function _approveToken(uint256 _amount) internal virtual override {\n        collateralToken.safeApprove(pool, _amount);\n        collateralToken.safeApprove(address(aaveLendingPool), _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            IERC20(AAVE).safeApprove(address(swapManager.ROUTERS(i)), _amount);\n        }\n    }\n\n    /**\n     * @notice Transfer StakeAave to newStrategy\n     * @param _newStrategy Address of newStrategy\n     */\n    function _beforeMigration(address _newStrategy) internal override {\n        uint256 _stkAaveAmount = stkAAVE.balanceOf(address(this));\n        if (_stkAaveAmount != 0) {\n            IERC20(stkAAVE).safeTransfer(_newStrategy, _stkAaveAmount);\n        }\n    }\n\n    /// @notice Claim Aave rewards and convert to _toToken.\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\n        uint256 _aaveAmount = _claimAave();\n        if (_aaveAmount > 0) {\n            uint256 minAmtOut =\n                (swapSlippage != 10000)\n                    ? _calcAmtOutAfterSlippage(\n                        _getOracleRate(_simpleOraclePath(AAVE, _toToken), _aaveAmount),\n                        swapSlippage\n                    )\n                    : 1;\n            _safeSwap(AAVE, _toToken, _aaveAmount, minAmtOut);\n        }\n    }\n\n    /// @notice Withdraw collateral to payback excess debt\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {\n        if (_excessDebt != 0) {\n            _payback = _safeWithdraw(address(collateralToken), address(this), _excessDebt);\n        }\n    }\n\n    /**\n     * @notice Calculate earning and withdraw it from Aave.\n     * @dev If somehow we got some collateral token in strategy then we want to\n     *  include those in profit. That's why we used 'return' outside 'if' condition.\n     * @param _totalDebt Total collateral debt of this strategy\n     * @return profit in collateral token\n     */\n    function _realizeProfit(uint256 _totalDebt) internal virtual override returns (uint256) {\n        _claimRewardsAndConvertTo(address(collateralToken));\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\n        if (_aTokenBalance > _totalDebt) {\n            _withdraw(address(collateralToken), address(this), _aTokenBalance - _totalDebt);\n        }\n        return collateralToken.balanceOf(address(this));\n    }\n\n    /**\n     * @notice Calculate realized loss.\n     * @return _loss Realized loss in collateral token\n     */\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\n        if (_aTokenBalance < _totalDebt) {\n            _loss = _totalDebt - _aTokenBalance;\n        }\n    }\n\n    /// @notice Deposit collateral in Aave\n    function _reinvest() internal override {\n        _deposit(address(collateralToken), collateralToken.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Withdraw given amount of collateral from Aave to pool\n     * @param _amount Amount of collateral to withdraw.\n     */\n    function _withdraw(uint256 _amount) internal override {\n        _safeWithdraw(address(collateralToken), pool, _amount);\n    }\n}\n"
    },
    "contracts/strategies/aave/earn/EarnAaveStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../AaveStrategy.sol\";\nimport \"../../Earn.sol\";\nimport \"../../../interfaces/vesper/IPoolRewards.sol\";\n\n/// @title This strategy will deposit collateral token in Aave and earn drip in an another token.\ncontract EarnAaveStrategy is AaveStrategy, Earn {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable no-empty-blocks\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _receiptToken,\n        address _dripToken,\n        string memory _strategyName\n    ) AaveStrategy(_pool, _swapManager, _receiptToken, _strategyName) Earn(_dripToken) {}\n\n    // solhint-enable no-empty-blocks\n\n    function _setupOracles() internal override(Strategy, AaveStrategy) {\n        AaveStrategy._setupOracles();\n    }\n\n    function _claimRewardsAndConvertTo(address _toToken) internal override(Strategy, AaveStrategy) {\n        AaveStrategy._claimRewardsAndConvertTo(_toToken);\n    }\n\n    function _realizeProfit(uint256 _totalDebt) internal virtual override(Strategy, AaveStrategy) returns (uint256) {\n        _claimRewardsAndConvertTo(address(dripToken));\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\n        if (_aTokenBalance > _totalDebt) {\n            _withdraw(address(collateralToken), address(this), _aTokenBalance - _totalDebt);\n        }\n        _convertCollateralToDrip();\n        _forwardEarning();\n        return 0;\n    }\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override(Strategy, AaveStrategy) {\n        collateralToken.safeApprove(pool, _amount);\n        collateralToken.safeApprove(address(aaveLendingPool), _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            IERC20(AAVE).safeApprove(address(swapManager.ROUTERS(i)), _amount);\n            collateralToken.safeApprove(address(swapManager.ROUTERS(i)), _amount);\n        }\n    }\n}\n"
    },
    "contracts/strategies/aave/AaveLeverageStrategy.sol": {
      "content": "// SPDX-License-Identifier: GNU LGPLv3\n// Copied from CompoundLeverageStrategy.sol\n\npragma solidity 0.8.3;\n\nimport \"../Strategy.sol\";\nimport \"../../interfaces/aave/IAave.sol\";\nimport \"../../interfaces/oracle/IUniswapV3Oracle.sol\";\nimport \"../../FlashLoanHelper.sol\";\nimport \"../../pool/Errors.sol\";\nimport \"./AaveCore.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n/// @title This strategy will deposit collateral token in Aave and based on position\n/// it will borrow same collateral token. It will use borrowed asset as supply and borrow again.\ncontract AaveLeverageStrategy is Strategy, AaveCore, FlashLoanHelper {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"4.0.0\";\n\n    uint256 internal constant MAX_BPS = 10_000; //100%\n    uint256 public minBorrowRatio = 5_000; // 50%\n    uint256 public maxBorrowRatio = 6_000; // 60%\n    uint256 public slippage = 1_000; // 10%\n    IUniswapV3Oracle internal constant ORACLE = IUniswapV3Oracle(0x0F1f5A87f99f0918e6C81F16E59F3518698221Ff);\n    uint32 internal constant TWAP_PERIOD = 3600;\n    address public rewardToken;\n    AToken public vdToken; // Variable Debt Token\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _rewardToken,\n        address _aaveAddressesProvider,\n        address _receiptToken,\n        string memory _name\n    ) Strategy(_pool, _swapManager, _receiptToken) FlashLoanHelper(_aaveAddressesProvider) AaveCore(_receiptToken) {\n        NAME = _name;\n        rewardToken = _rewardToken;\n        (, , address _vdToken) =\n            aaveProtocolDataProvider.getReserveTokensAddresses(address(IVesperPool(_pool).token()));\n        vdToken = AToken(_vdToken);\n    }\n\n    /**\n     * @notice Update upper, lower borrow  and slippage.\n     * @dev It is possible to set 0 as _minBorrowRatio to not borrow anything\n     * @param _minBorrowRatio Minimum % we want to borrow\n     * @param _maxBorrowRatio Maximum % we want to borrow\n     * @param _slippage slippage for collateral factor\n     */\n    function updateLeverageConfig(\n        uint256 _minBorrowRatio,\n        uint256 _maxBorrowRatio,\n        uint256 _slippage\n    ) external onlyGovernor {\n        require(_maxBorrowRatio < _getCollateralFactor(), Errors.INVALID_MAX_BORROW_LIMIT);\n        require(_maxBorrowRatio > _minBorrowRatio, Errors.MAX_LIMIT_LESS_THAN_MIN);\n        require(_slippage <= MAX_BPS, Errors.INVALID_SLIPPAGE);\n        minBorrowRatio = _minBorrowRatio;\n        maxBorrowRatio = _maxBorrowRatio;\n        slippage = _slippage;\n    }\n\n    function updateFlashLoanStatus(bool _dydxStatus, bool _aaveStatus) external virtual onlyGovernor {\n        _updateDyDxStatus(_dydxStatus, address(collateralToken));\n        _updateAaveStatus(_aaveStatus);\n    }\n\n    /**\n     * @notice Get Collateral Factor (Loan to Value Ratio). The ltvRatio/_collateralFactor is in 1e4 decimals.\n     */\n    function _getCollateralFactor() internal view virtual returns (uint256 _collateralFactor) {\n        (, uint256 ltvRatio, , , , , , , , ) =\n            aaveProtocolDataProvider.getReserveConfigurationData(address(collateralToken));\n        _collateralFactor = (ltvRatio * (MAX_BPS - slippage)) / MAX_BPS;\n    }\n\n    /**\n     * @notice Current borrow ratio, calculated as current borrow divide by max allowed borrow\n     * Return value is based on basis points, i.e. 7500 = 75% ratio\n     */\n    function currentBorrowRatio() external view returns (uint256) {\n        (uint256 _supply, uint256 _borrow) = getPosition();\n        return _borrow == 0 ? 0 : (_borrow * MAX_BPS) / _supply;\n    }\n\n    /**\n     * @notice Calculate total value using rewardToken accrued, supply and borrow position\n     */\n    function totalValue() public view virtual override returns (uint256 _totalValue) {\n        _totalValue = _calculateTotalValue(_totalAave());\n    }\n\n    /**\n     * @notice Calculate current position using claimed rewardToken and current borrow.\n     */\n    function isLossMaking() external view returns (bool) {\n        // It's loss making if _totalValue < totalDebt\n        return totalValue() < IVesperPool(pool).totalDebtOf(address(this));\n    }\n\n    function isReservedToken(address _token) public view virtual override returns (bool) {\n        return _isReservedToken(_token) || address(collateralToken) == _token;\n    }\n\n    /// @notice Return supply and borrow position. Position may return few block old value\n    function getPosition() public view returns (uint256 _supply, uint256 _borrow) {\n        _supply = aToken.balanceOf(address(this));\n        _borrow = vdToken.balanceOf(address(this));\n    }\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override {\n        collateralToken.safeApprove(pool, _amount);\n        collateralToken.safeApprove(address(aToken), _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            IERC20(rewardToken).safeApprove(address(swapManager.ROUTERS(i)), _amount);\n        }\n        FlashLoanHelper._approveToken(address(collateralToken), _amount);\n    }\n\n    /**\n     * @notice Claim rewardToken and transfer to new strategy\n     * @param _newStrategy Address of new strategy.\n     */\n    function _beforeMigration(address _newStrategy) internal virtual override {\n        require(IStrategy(_newStrategy).token() == address(aToken), Errors.WRONG_RECEIPT_TOKEN);\n        minBorrowRatio = 0;\n        // It will calculate amount to repay based on borrow limit and payback all\n        _reinvest();\n    }\n\n    /**\n     * @notice Calculate borrow position based on borrow ratio, current supply, borrow, amount\n     * being deposited or withdrawn.\n     * @param _amount Collateral amount\n     * @param _isDeposit Flag indicating whether we are depositing _amount or withdrawing\n     * @return _position Amount of borrow that need to be adjusted\n     * @return _shouldRepay Flag indicating whether _position is borrow amount or repay amount\n     */\n    function _calculateDesiredPosition(uint256 _amount, bool _isDeposit)\n        internal\n        view\n        returns (uint256 _position, bool _shouldRepay)\n    {\n        uint256 _totalSupply = aToken.balanceOf(address(this));\n        uint256 _totalBorrow = vdToken.balanceOf(address(this));\n\n        // If minimum borrow limit set to 0 then repay borrow\n        if (minBorrowRatio == 0) {\n            return (_totalBorrow, true);\n        }\n\n        uint256 _supply = _totalSupply > _totalBorrow ? _totalSupply - _totalBorrow : 0;\n\n        // In case of withdraw, _amount can be greater than _supply\n        uint256 _newSupply = _isDeposit ? _supply + _amount : _supply > _amount ? _supply - _amount : 0;\n\n        // (supply * borrowRatio)/(BPS - borrowRatio)\n        uint256 _borrowUpperBound = (_newSupply * maxBorrowRatio) / (MAX_BPS - maxBorrowRatio);\n        uint256 _borrowLowerBound = (_newSupply * minBorrowRatio) / (MAX_BPS - minBorrowRatio);\n\n        // If our current borrow is greater than max borrow allowed, then we will have to repay\n        // some to achieve safe position else borrow more.\n        if (_totalBorrow > _borrowUpperBound) {\n            _shouldRepay = true;\n            // If borrow > upperBound then it is greater than lowerBound too.\n            _position = _totalBorrow - _borrowLowerBound;\n        } else if (_totalBorrow < _borrowLowerBound) {\n            _shouldRepay = false;\n            // We can borrow more.\n            _position = _borrowLowerBound - _totalBorrow;\n        }\n    }\n\n    /**\n     * @dev rewardToken is converted to collateral and if we have some borrow interest to pay,\n     * it will go come from collateral.\n     * @dev Report total value in collateral token\n     */\n    function _calculateTotalValue(uint256 _rewardAccrued) internal view returns (uint256 _totalValue) {\n        uint256 _aaveAsCollateral;\n        if (_rewardAccrued != 0) {\n            (, _aaveAsCollateral, ) = swapManager.bestOutputFixedInput(\n                rewardToken,\n                address(collateralToken),\n                _rewardAccrued\n            );\n        }\n        (uint256 _supply, uint256 _borrow) = getPosition();\n        _totalValue = _aaveAsCollateral + collateralToken.balanceOf(address(this)) + _supply - _borrow;\n    }\n\n    /// @notice Claim aave rewards\n    function _claimRewards() internal virtual {\n        _claimAave();\n    }\n\n    /// @notice Claim Aave rewards and convert to _toToken.\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\n        uint256 _aaveAmount = _claimAave();\n        if (_aaveAmount > 0) {\n            _safeSwap(rewardToken, _toToken, _aaveAmount, 1);\n        }\n    }\n\n    /**\n     * @notice Generate report for pools accounting and also send profit and any payback to pool.\n     * @dev Claim rewardToken and convert to collateral.\n     */\n    function _generateReport()\n        internal\n        override\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _payback\n        )\n    {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        (, , , , uint256 _totalDebt, , , uint256 _debtRatio) = IVesperPool(pool).strategy(address(this));\n\n        // Claim rewardToken and convert to collateral token\n        _claimRewardsAndConvertTo(address(collateralToken));\n\n        uint256 _supply = aToken.balanceOf(address(this));\n        uint256 _borrow = vdToken.balanceOf(address(this));\n\n        uint256 _investedCollateral = _supply - _borrow;\n\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        uint256 _totalCollateral = _investedCollateral + _collateralHere;\n\n        if (_totalCollateral > _totalDebt) {\n            _profit = _totalCollateral - _totalDebt;\n        } else {\n            _loss = _totalDebt - _totalCollateral;\n        }\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\n        if (_collateralHere < _profitAndExcessDebt) {\n            uint256 _totalAmountToWithdraw = Math.min((_profitAndExcessDebt - _collateralHere), _investedCollateral);\n            if (_totalAmountToWithdraw > 0) {\n                _withdrawHere(_totalAmountToWithdraw);\n                _collateralHere = collateralToken.balanceOf(address(this));\n            }\n        }\n\n        if (_excessDebt > 0) {\n            _payback = Math.min(_collateralHere, _excessDebt);\n        }\n\n        // Handle scenario if debtRatio is zero and some supply left.\n        // Remaining tokens, after payback withdrawal, are profit\n        (_supply, _borrow) = getPosition();\n        if (_debtRatio == 0 && _supply > 0 && _borrow == 0) {\n            _redeemUnderlying(_supply);\n            _profit += _supply;\n        }\n    }\n\n    /**\n     *  Adjust position by normal leverage and deleverage.\n     * @param _adjustBy Amount by which we want to increase or decrease _borrow\n     * @param _shouldRepay True indicate we want to deleverage\n     * @return amount Actual adjusted amount\n     */\n    function _adjustPosition(uint256 _adjustBy, bool _shouldRepay) internal returns (uint256 amount) {\n        // We can get position via view function, as this function will be called after _calculateDesiredPosition\n        (uint256 _supply, uint256 _borrow) = getPosition();\n\n        // If no borrow then there is nothing to deleverage\n        if (_borrow == 0 && _shouldRepay) {\n            return 0;\n        }\n\n        if (_shouldRepay) {\n            amount = _normalDeleverage(_adjustBy, _supply, _borrow, _getCollateralFactor());\n        } else {\n            amount = _normalLeverage(_adjustBy, _supply, _borrow, _getCollateralFactor());\n        }\n    }\n\n    /**\n     * Deleverage: Reduce borrow to achieve safe position\n     * @param _maxDeleverage Reduce borrow by this amount\n     * @return _deleveragedAmount Amount we actually reduced\n     */\n    function _normalDeleverage(\n        uint256 _maxDeleverage,\n        uint256 _supply,\n        uint256 _borrow,\n        uint256 _collateralFactor\n    ) internal returns (uint256 _deleveragedAmount) {\n        uint256 _theoreticalSupply;\n        if (_collateralFactor != 0) {\n            // Calculate minimum supply required to support _borrow\n            _theoreticalSupply = (_borrow * MAX_BPS) / _collateralFactor;\n        }\n        _deleveragedAmount = _supply - _theoreticalSupply;\n        if (_deleveragedAmount >= _borrow) {\n            _deleveragedAmount = _borrow;\n        }\n        if (_deleveragedAmount >= _maxDeleverage) {\n            _deleveragedAmount = _maxDeleverage;\n        }\n        _redeemUnderlying(_deleveragedAmount);\n        _repayBorrow(_deleveragedAmount);\n    }\n\n    /**\n     * Leverage: Borrow more\n     * @param _maxLeverage Max amount to borrow\n     * @return _leveragedAmount Amount we actually borrowed\n     */\n    function _normalLeverage(\n        uint256 _maxLeverage,\n        uint256 _supply,\n        uint256 _borrow,\n        uint256 _collateralFactor\n    ) internal returns (uint256 _leveragedAmount) {\n        // Calculate maximum we can borrow at current _supply\n        _leveragedAmount = ((_supply * _collateralFactor) / MAX_BPS) - _borrow;\n        if (_leveragedAmount >= _maxLeverage) {\n            _leveragedAmount = _maxLeverage;\n        }\n        _borrowCollateral(_leveragedAmount);\n        _mint(collateralToken.balanceOf(address(this)));\n    }\n\n    /// @notice Deposit collateral in Aave and adjust borrow position\n    function _reinvest() internal virtual override {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n        (uint256 _position, bool _shouldRepay) = _calculateDesiredPosition(_collateralBalance, true);\n        // Supply collateral to aave.\n        _mint(_collateralBalance);\n\n        // During reinvest, _shouldRepay will be false which indicate that we will borrow more.\n        _position -= _doFlashLoan(_position, _shouldRepay);\n\n        uint256 i = 0;\n        while (_position > 0 && i <= 6) {\n            _position -= _adjustPosition(_position, _shouldRepay);\n            i++;\n        }\n    }\n\n    /// @dev Withdraw collateral and transfer it to pool\n    function _withdraw(uint256 _amount) internal override {\n        collateralToken.safeTransfer(pool, _withdrawHere(_amount));\n    }\n\n    /// @dev Withdraw collateral here. Do not transfer to pool\n    function _withdrawHere(uint256 _amount) internal returns (uint256) {\n        (uint256 _position, bool _shouldRepay) = _calculateDesiredPosition(_amount, false);\n        if (_shouldRepay) {\n            // Do deleverage by flash loan\n            _position -= _doFlashLoan(_position, _shouldRepay);\n\n            // If we still have _position to deleverage do it via normal deleverage\n            uint256 i = 0;\n            while (_position > 0 && i <= 10) {\n                _position -= _adjustPosition(_position, true);\n                i++;\n            }\n\n            // There may be scenario where we are not able to deleverage enough\n            if (_position != 0) {\n                // Calculate redeemable at current borrow and supply.\n                (uint256 _supply, uint256 _borrow) = getPosition();\n\n                uint256 _supplyToSupportBorrow;\n                if (maxBorrowRatio != 0) {\n                    _supplyToSupportBorrow = (_borrow * MAX_BPS) / maxBorrowRatio;\n                }\n                // Current supply minus supply required to support _borrow at _maxBorrowRatio\n                uint256 _redeemable = _supply - _supplyToSupportBorrow;\n                if (_amount > _redeemable) {\n                    _amount = _redeemable;\n                }\n            }\n        }\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\n\n        // If we do not have enough collateral, try to get some via AAVE\n        // This scenario is rare and will happen during last withdraw\n        if (_amount > aToken.balanceOf(address(this))) {\n            // Use all collateral for withdraw\n            _collateralBefore = 0;\n            _claimRewardsAndConvertTo(address(collateralToken));\n            // Updated amount\n            _amount = _amount - collateralToken.balanceOf(address(this));\n        }\n        _redeemUnderlying(_amount);\n        return collateralToken.balanceOf(address(this)) - _collateralBefore;\n    }\n\n    /**\n     * @dev Aave flash is used only for withdrawal due to high fee compare to DyDx\n     * @param _flashAmount Amount for flash loan\n     * @param _shouldRepay Flag indicating we want to leverage or deleverage\n     * @return Total amount we leverage or deleverage using flash loan\n     */\n    function _doFlashLoan(uint256 _flashAmount, bool _shouldRepay) internal returns (uint256) {\n        uint256 _totalFlashAmount;\n        // Due to less fee DyDx is our primary flash loan provider\n        if (isDyDxActive && _flashAmount > 0) {\n            _totalFlashAmount = _doDyDxFlashLoan(\n                address(collateralToken),\n                _flashAmount,\n                abi.encode(_flashAmount, _shouldRepay)\n            );\n            _flashAmount -= _totalFlashAmount;\n        }\n        if (isAaveActive && _shouldRepay && _flashAmount > 0) {\n            _totalFlashAmount += _doAaveFlashLoan(\n                address(collateralToken),\n                _flashAmount,\n                abi.encode(_flashAmount, _shouldRepay)\n            );\n        }\n        return _totalFlashAmount;\n    }\n\n    /**\n     * @notice This function will be called by flash loan\n     * @dev In case of borrow, DyDx is preferred as fee is so low that it does not effect\n     * our collateralRatio and liquidation risk.\n     */\n    function _flashLoanLogic(bytes memory _data, uint256 _repayAmount) internal override {\n        (uint256 _amount, bool _deficit) = abi.decode(_data, (uint256, bool));\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        require(_collateralHere >= _amount, \"FLASH_FAILED\"); // to stop malicious calls\n\n        //if in deficit we repay amount and then withdraw\n        if (_deficit) {\n            _repayBorrow(_amount);\n            //if we are withdrawing we take more to cover fee\n            _redeemUnderlying(_repayAmount);\n        } else {\n            _mint(_collateralHere);\n            //borrow more to cover fee\n            _borrowCollateral(_repayAmount);\n        }\n    }\n\n    /**\n     * @dev If swap slippage is defined then use oracle to get amountOut and calculate minAmountOut\n     */\n    function _safeSwap(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn\n    ) internal virtual {\n        uint256 _minAmountOut =\n            swapSlippage != 10000\n                ? _calcAmtOutAfterSlippage(\n                    ORACLE.assetToAsset(_tokenIn, _amountIn, _tokenOut, TWAP_PERIOD),\n                    swapSlippage\n                )\n                : 1;\n        _safeSwap(_tokenIn, _tokenOut, _amountIn, _minAmountOut);\n    }\n\n    //////////////////// Aave wrapper functions //////////////////////////////\n    /**\n     * @dev Aave support WETH as collateral.\n     */\n    function _mint(uint256 _amount) internal virtual {\n        _deposit(address(collateralToken), _amount);\n    }\n\n    function _redeemUnderlying(uint256 _amount) internal virtual {\n        _withdraw(address(collateralToken), address(this), _amount);\n    }\n\n    function _borrowCollateral(uint256 _amount) internal virtual {\n        // 2 for variable rate borrow, 0 for referralCode\n        aaveLendingPool.borrow(address(collateralToken), _amount, 2, 0, address(this));\n    }\n\n    function _repayBorrow(uint256 _amount) internal virtual {\n        aaveLendingPool.repay(address(collateralToken), _amount, 2, address(this));\n    }\n\n    //////////////////////////////////////////////////////////////////////////////\n\n    /* solhint-disable no-empty-blocks */\n\n    // We overridden _generateReport which eliminates need of below function.\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {}\n\n    function _realizeProfit(uint256 _totalDebt) internal virtual override returns (uint256) {}\n\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {}\n\n    /* solhint-enable no-empty-blocks */\n}\n"
    },
    "contracts/interfaces/oracle/IUniswapV3Oracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.3;\n\n// Interface to use 3rd party Uniswap V3 oracle utility contract deployed at https://etherscan.io/address/0x0f1f5a87f99f0918e6c81f16e59f3518698221ff#code\n\n/// @title UniswapV3 oracle with ability to query across an intermediate liquidity pool\ninterface IUniswapV3Oracle {\n    function assetToEth(\n        address _tokenIn,\n        uint256 _amountIn,\n        uint32 _twapPeriod\n    ) external view returns (uint256 ethAmountOut);\n\n    function ethToAsset(\n        uint256 _ethAmountIn,\n        address _tokenOut,\n        uint32 _twapPeriod\n    ) external view returns (uint256 amountOut);\n\n    function assetToAsset(\n        address _tokenIn,\n        uint256 _amountIn,\n        address _tokenOut,\n        uint32 _twapPeriod\n    ) external view returns (uint256 amountOut);\n\n    function assetToAssetThruRoute(\n        address _tokenIn,\n        uint256 _amountIn,\n        address _tokenOut,\n        uint32 _twapPeriod,\n        address _routeThruToken,\n        uint24[2] memory _poolFees\n    ) external view returns (uint256 amountOut);\n}\n"
    },
    "contracts/FlashLoanHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/vesper/IVesperPool.sol\";\nimport \"./interfaces/aave/IAave.sol\";\nimport \"./interfaces/dydx/ISoloMargin.sol\";\nimport \"./pool/Errors.sol\";\n\n/**\n * @title FlashLoanHelper:: This contract does all heavy lifting to get flash loan via Aave and DyDx.\n * @dev End user has to override _flashLoanLogic() function to perform logic after flash loan is done.\n *      Also needs to approve token to aave and dydx via _approveToken function.\n *      2 utility internal functions are also provided to activate/deactivate flash loan providers.\n *      Utility function are provided as internal so that end user can choose controlled access via public functions.\n */\nabstract contract FlashLoanHelper {\n    using SafeERC20 for IERC20;\n\n    AaveLendingPoolAddressesProvider internal aaveAddressesProvider;\n\n    address internal constant SOLO = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n    uint256 public dyDxMarketId;\n    bytes32 private constant AAVE_PROVIDER_ID = 0x0100000000000000000000000000000000000000000000000000000000000000;\n    bool public isAaveActive = false;\n    bool public isDyDxActive = false;\n\n    constructor(address _aaveAddressesProvider) {\n        require(_aaveAddressesProvider != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n\n        aaveAddressesProvider = AaveLendingPoolAddressesProvider(_aaveAddressesProvider);\n    }\n\n    function _updateAaveStatus(bool _status) internal {\n        isAaveActive = _status;\n    }\n\n    function _updateDyDxStatus(bool _status, address _token) internal {\n        if (_status) {\n            dyDxMarketId = _getMarketIdFromTokenAddress(SOLO, _token);\n        }\n        isDyDxActive = _status;\n    }\n\n    /// @notice Approve all required tokens for flash loan\n    function _approveToken(address _token, uint256 _amount) internal {\n        IERC20(_token).safeApprove(SOLO, _amount);\n        IERC20(_token).safeApprove(aaveAddressesProvider.getLendingPool(), _amount);\n    }\n\n    /// @dev Override this function to execute logic which uses flash loan amount\n    function _flashLoanLogic(bytes memory _data, uint256 _repayAmount) internal virtual;\n\n    /***************************** Aave flash loan functions ***********************************/\n\n    bool private awaitingFlash = false;\n\n    /**\n     * @notice This is entry point for Aave flash loan\n     * @param _token Token for which we are taking flash loan\n     * @param _amountDesired Flash loan amount\n     * @param _data This will be passed downstream for processing. It can be empty.\n     */\n    function _doAaveFlashLoan(\n        address _token,\n        uint256 _amountDesired,\n        bytes memory _data\n    ) internal returns (uint256 _amount) {\n        require(isAaveActive, Errors.AAVE_FLASH_LOAN_NOT_ACTIVE);\n        AaveLendingPool _aaveLendingPool = AaveLendingPool(aaveAddressesProvider.getLendingPool());\n        AaveProtocolDataProvider _aaveProtocolDataProvider =\n            AaveProtocolDataProvider(aaveAddressesProvider.getAddress(AAVE_PROVIDER_ID));\n        // Check token liquidity in Aave\n        (uint256 _availableLiquidity, , , , , , , , , ) = _aaveProtocolDataProvider.getReserveData(_token);\n        if (_amountDesired > _availableLiquidity) {\n            _amountDesired = _availableLiquidity;\n        }\n\n        address[] memory assets = new address[](1);\n        assets[0] = _token;\n\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = _amountDesired;\n\n        // 0 = no debt, 1 = stable, 2 = variable\n        uint256[] memory modes = new uint256[](1);\n        modes[0] = 0;\n\n        // Anyone can call aave flash loan to us, so we need some protection\n        awaitingFlash = true;\n\n        // function params: receiver, assets, amounts, modes, onBehalfOf, data, referralCode\n        _aaveLendingPool.flashLoan(address(this), assets, amounts, modes, address(this), _data, 0);\n        _amount = _amountDesired;\n        awaitingFlash = false;\n    }\n\n    /// @dev Aave will call this function after doing flash loan\n    function executeOperation(\n        address[] calldata, /*_assets*/\n        uint256[] calldata _amounts,\n        uint256[] calldata _premiums,\n        address _initiator,\n        bytes calldata _data\n    ) external returns (bool) {\n        require(msg.sender == aaveAddressesProvider.getLendingPool(), \"!aave-pool\");\n        require(awaitingFlash, Errors.INVALID_FLASH_LOAN);\n        require(_initiator == address(this), Errors.INVALID_INITIATOR);\n\n        // Flash loan amount + flash loan fee\n        uint256 _repayAmount = _amounts[0] + _premiums[0];\n        _flashLoanLogic(_data, _repayAmount);\n        return true;\n    }\n\n    /***************************** Aave flash loan functions ends ***********************************/\n\n    /***************************** DyDx flash loan functions ***************************************/\n\n    /**\n     * @notice This is entry point for DyDx flash loan\n     * @param _token Token for which we are taking flash loan\n     * @param _amountDesired Flash loan amount\n     * @param _data This will be passed downstream for processing. It can be empty.\n     */\n    function _doDyDxFlashLoan(\n        address _token,\n        uint256 _amountDesired,\n        bytes memory _data\n    ) internal returns (uint256 _amount) {\n        require(isDyDxActive, Errors.DYDX_FLASH_LOAN_NOT_ACTIVE);\n\n        // Check token liquidity in DyDx\n        uint256 amountInSolo = IERC20(_token).balanceOf(SOLO);\n        if (_amountDesired > amountInSolo) {\n            _amountDesired = amountInSolo;\n        }\n        // Repay amount, amount with fee, can be 2 wei higher. Consider 2 wei as fee\n        uint256 repayAmount = _amountDesired + 2;\n\n        // Encode custom data for callFunction\n        bytes memory _callData = abi.encode(_data, repayAmount);\n\n        // 1. Withdraw _token\n        // 2. Call callFunction(...) which will call loanLogic\n        // 3. Deposit _token back\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\n\n        operations[0] = _getWithdrawAction(dyDxMarketId, _amountDesired);\n        operations[1] = _getCallAction(_callData);\n        operations[2] = _getDepositAction(dyDxMarketId, repayAmount);\n\n        Account.Info[] memory accountInfos = new Account.Info[](1);\n        accountInfos[0] = _getAccountInfo();\n\n        ISoloMargin(SOLO).operate(accountInfos, operations);\n        _amount = _amountDesired;\n    }\n\n    /// @dev DyDx calls this function after doing flash loan\n    function callFunction(\n        address _sender,\n        Account.Info memory, /* _account */\n        bytes memory _callData\n    ) external {\n        (bytes memory _data, uint256 _repayAmount) = abi.decode(_callData, (bytes, uint256));\n        require(msg.sender == SOLO, \"!solo\");\n        require(_sender == address(this), Errors.INVALID_INITIATOR);\n        _flashLoanLogic(_data, _repayAmount);\n    }\n\n    /********************************* DyDx helper functions *********************************/\n    function _getAccountInfo() internal view returns (Account.Info memory) {\n        return Account.Info({owner: address(this), number: 1});\n    }\n\n    function _getMarketIdFromTokenAddress(address _solo, address token) internal view returns (uint256) {\n        ISoloMargin solo = ISoloMargin(_solo);\n\n        uint256 numMarkets = solo.getNumMarkets();\n\n        address curToken;\n        for (uint256 i = 0; i < numMarkets; i++) {\n            curToken = solo.getMarketTokenAddress(i);\n\n            if (curToken == token) {\n                return i;\n            }\n        }\n\n        revert(Errors.NO_MARKET_ID_FOUND);\n    }\n\n    function _getWithdrawAction(uint256 marketId, uint256 amount) internal view returns (Actions.ActionArgs memory) {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Withdraw,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: false,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: amount\n                }),\n                primaryMarketId: marketId,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: \"\"\n            });\n    }\n\n    function _getCallAction(bytes memory data) internal view returns (Actions.ActionArgs memory) {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Call,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: false,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: 0\n                }),\n                primaryMarketId: 0,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: data\n            });\n    }\n\n    function _getDepositAction(uint256 marketId, uint256 amount) internal view returns (Actions.ActionArgs memory) {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Deposit,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: true,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: amount\n                }),\n                primaryMarketId: marketId,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: \"\"\n            });\n    }\n\n    /***************************** DyDx flash loan functions end *****************************/\n}\n"
    },
    "contracts/interfaces/dydx/ISoloMargin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\n/** In order to keep code/files short, all libraries and interfaces are trimmed as per Vesper need */\n\nlibrary Account {\n    enum Status {Normal, Liquid, Vapor}\n    struct Info {\n        address owner; // The address that owns the account\n        uint256 number; // A nonce that allows a single address to control many accounts\n    }\n}\n\nlibrary Actions {\n    enum ActionType {\n        Deposit, // supply tokens\n        Withdraw, // borrow tokens\n        Transfer, // transfer balance between accounts\n        Buy, // buy an amount of some token (publicly)\n        Sell, // sell an amount of some token (publicly)\n        Trade, // trade tokens against another account\n        Liquidate, // liquidate an undercollateralized or expiring account\n        Vaporize, // use excess tokens to zero-out a completely negative account\n        Call // send arbitrary data to an address\n    }\n\n    struct ActionArgs {\n        ActionType actionType;\n        uint256 accountId;\n        Types.AssetAmount amount;\n        uint256 primaryMarketId;\n        uint256 secondaryMarketId;\n        address otherAddress;\n        uint256 otherAccountId;\n        bytes data;\n    }\n}\n\nlibrary Types {\n    enum AssetDenomination {\n        Wei, // the amount is denominated in wei\n        Par // the amount is denominated in par\n    }\n\n    enum AssetReference {\n        Delta, // the amount is given as a delta from the current value\n        Target // the amount is given as an exact number to end up at\n    }\n\n    struct AssetAmount {\n        bool sign; // true if positive\n        AssetDenomination denomination;\n        AssetReference ref;\n        uint256 value;\n    }\n}\n\ninterface ISoloMargin {\n    function getMarketTokenAddress(uint256 marketId) external view returns (address);\n\n    function getNumMarkets() external view returns (uint256);\n\n    function operate(Account.Info[] memory accounts, Actions.ActionArgs[] memory actions) external;\n}\n\n/**\n * @title ICallee\n * @author dYdX\n *\n * Interface that Callees for Solo must implement in order to ingest data.\n */\ninterface ICallee {\n    // ============ Public Functions ============\n\n    /**\n     * Allows users to send this contract arbitrary data.\n     *\n     * @param  sender       The msg.sender to Solo\n     * @param  accountInfo  The account from which the data is being sent\n     * @param  data         Arbitrary data given by the sender\n     */\n    function callFunction(\n        address sender,\n        Account.Info memory accountInfo,\n        bytes memory data\n    ) external;\n}\n"
    },
    "contracts/pool/VPoolBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./Errors.sol\";\nimport \"./PoolShareToken.sol\";\nimport \"../interfaces/vesper/IStrategy.sol\";\n\nabstract contract VPoolBase is PoolShareToken {\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\n    event UpdatedPoolRewards(address indexed previousPoolRewards, address indexed newPoolRewards);\n    event UpdatedWithdrawFee(uint256 previousWithdrawFee, uint256 newWithdrawFee);\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _token // solhint-disable-next-line no-empty-blocks\n    ) PoolShareToken(_name, _symbol, _token) {}\n\n    /// @dev Equivalent to constructor for proxy. It can be called only once per proxy.\n    function _initializeBase(\n        string memory _name,\n        string memory _symbol,\n        address _token,\n        address _poolAccountant\n    ) internal initializer {\n        require(_poolAccountant != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n        _initializePool(_name, _symbol, _token);\n        _initializeGoverned();\n        require(_keepers.add(_msgSender()), Errors.ADD_IN_LIST_FAILED);\n        require(_maintainers.add(_msgSender()), Errors.ADD_IN_LIST_FAILED);\n        poolAccountant = _poolAccountant;\n    }\n\n    modifier onlyKeeper() {\n        require(governor == _msgSender() || _keepers.contains(_msgSender()), \"not-a-keeper\");\n        _;\n    }\n\n    modifier onlyMaintainer() {\n        require(governor == _msgSender() || _maintainers.contains(_msgSender()), \"not-a-maintainer\");\n        _;\n    }\n\n    ////////////////////////////// Only Governor //////////////////////////////\n\n    /**\n     * @notice Migrate existing strategy to new strategy.\n     * @dev Migrating strategy aka old and new strategy should be of same type.\n     * @param _old Address of strategy being migrated\n     * @param _new Address of new strategy\n     */\n    function migrateStrategy(address _old, address _new) external onlyGovernor {\n        require(\n            IStrategy(_new).pool() == address(this) && IStrategy(_old).pool() == address(this),\n            Errors.INVALID_STRATEGY\n        );\n        IPoolAccountant(poolAccountant).migrateStrategy(_old, _new);\n        IStrategy(_old).migrate(_new);\n    }\n\n    /**\n     * @notice Update fee collector address for this pool\n     * @param _newFeeCollector new fee collector address\n     */\n    function updateFeeCollector(address _newFeeCollector) external onlyGovernor {\n        require(_newFeeCollector != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n        emit UpdatedFeeCollector(feeCollector, _newFeeCollector);\n        feeCollector = _newFeeCollector;\n    }\n\n    /**\n     * @notice Update pool rewards address for this pool\n     * @param _newPoolRewards new pool rewards address\n     */\n    function updatePoolRewards(address _newPoolRewards) external onlyGovernor {\n        require(_newPoolRewards != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n        emit UpdatedPoolRewards(poolRewards, _newPoolRewards);\n        poolRewards = _newPoolRewards;\n    }\n\n    /**\n     * @notice Update withdraw fee for this pool\n     * @dev Format: 1500 = 15% fee, 100 = 1%\n     * @param _newWithdrawFee new withdraw fee\n     */\n    function updateWithdrawFee(uint256 _newWithdrawFee) external onlyGovernor {\n        require(feeCollector != address(0), Errors.FEE_COLLECTOR_NOT_SET);\n        require(_newWithdrawFee <= MAX_BPS, Errors.FEE_LIMIT_REACHED);\n        emit UpdatedWithdrawFee(withdrawFee, _newWithdrawFee);\n        withdrawFee = _newWithdrawFee;\n    }\n\n    ///////////////////////////// Only Keeper ///////////////////////////////\n    function pause() external onlyKeeper {\n        _pause();\n    }\n\n    function unpause() external onlyKeeper {\n        _unpause();\n    }\n\n    function shutdown() external onlyKeeper {\n        _shutdown();\n    }\n\n    function open() external onlyKeeper {\n        _open();\n    }\n\n    /// @notice Return list of whitelisted addresses\n    function feeWhitelist() external view returns (address[] memory) {\n        return _feeWhitelist.values();\n    }\n\n    function isFeeWhitelisted(address _address) external view returns (bool) {\n        return _feeWhitelist.contains(_address);\n    }\n\n    /**\n     * @notice Add given address in feeWhitelist.\n     * @param _addressToAdd Address to add in feeWhitelist.\n     */\n    function addToFeeWhitelist(address _addressToAdd) external onlyKeeper {\n        require(_feeWhitelist.add(_addressToAdd), Errors.ADD_IN_LIST_FAILED);\n    }\n\n    /**\n     * @notice Remove given address from feeWhitelist.\n     * @param _addressToRemove Address to remove from feeWhitelist.\n     */\n    function removeFromFeeWhitelist(address _addressToRemove) external onlyKeeper {\n        require(_feeWhitelist.remove(_addressToRemove), Errors.REMOVE_FROM_LIST_FAILED);\n    }\n\n    /// @notice Return list of keepers\n    function keepers() external view returns (address[] memory) {\n        return _keepers.values();\n    }\n\n    function isKeeper(address _address) external view returns (bool) {\n        return _keepers.contains(_address);\n    }\n\n    /**\n     * @notice Add given address in keepers list.\n     * @param _keeperAddress keeper address to add.\n     */\n    function addKeeper(address _keeperAddress) external onlyKeeper {\n        require(_keepers.add(_keeperAddress), Errors.ADD_IN_LIST_FAILED);\n    }\n\n    /**\n     * @notice Remove given address from keepers list.\n     * @param _keeperAddress keeper address to remove.\n     */\n    function removeKeeper(address _keeperAddress) external onlyKeeper {\n        require(_keepers.remove(_keeperAddress), Errors.REMOVE_FROM_LIST_FAILED);\n    }\n\n    /// @notice Return list of maintainers\n    function maintainers() external view returns (address[] memory) {\n        return _maintainers.values();\n    }\n\n    function isMaintainer(address _address) external view returns (bool) {\n        return _maintainers.contains(_address);\n    }\n\n    /**\n     * @notice Add given address in maintainers list.\n     * @param _maintainerAddress maintainer address to add.\n     */\n    function addMaintainer(address _maintainerAddress) external onlyKeeper {\n        require(_maintainers.add(_maintainerAddress), Errors.ADD_IN_LIST_FAILED);\n    }\n\n    /**\n     * @notice Remove given address from maintainers list.\n     * @param _maintainerAddress maintainer address to remove.\n     */\n    function removeMaintainer(address _maintainerAddress) external onlyKeeper {\n        require(_maintainers.remove(_maintainerAddress), Errors.REMOVE_FROM_LIST_FAILED);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @dev Strategy call this in regular interval.\n     * @param _profit yield generated by strategy. Strategy get performance fee on this amount\n     * @param _loss  Reduce debt ,also reduce debtRatio, increase loss in record.\n     * @param _payback strategy willing to payback outstanding above debtLimit. no performance fee on this amount.\n     *  when governance has reduced debtRatio of strategy, strategy will report profit and payback amount separately.\n     */\n    function reportEarning(\n        uint256 _profit,\n        uint256 _loss,\n        uint256 _payback\n    ) public virtual {\n        (uint256 _actualPayback, uint256 _creditLine, uint256 _interestFee) =\n            IPoolAccountant(poolAccountant).reportEarning(_msgSender(), _profit, _loss, _payback);\n        uint256 _totalPayback = _profit + _actualPayback;\n        // After payback, if strategy has credit line available then send more fund to strategy\n        // If payback is more than available credit line then get fund from strategy\n        if (_totalPayback < _creditLine) {\n            token.safeTransfer(_msgSender(), _creditLine - _totalPayback);\n        } else if (_totalPayback > _creditLine) {\n            token.safeTransferFrom(_msgSender(), address(this), _totalPayback - _creditLine);\n        }\n        // Mint interest fee worth shares at feeCollector address\n        if (_interestFee != 0) {\n            _mint(IStrategy(_msgSender()).feeCollector(), _calculateShares(_interestFee));\n        }\n    }\n\n    /**\n     * @notice Report loss outside of rebalance activity.\n     * @dev Some strategies pay deposit fee thus realizing loss at deposit.\n     * For example: Curve's 3pool has some slippage due to deposit of one asset in 3pool.\n     * Strategy may want report this loss instead of waiting for next rebalance.\n     * @param _loss Loss that strategy want to report\n     */\n    function reportLoss(uint256 _loss) external {\n        if (_loss != 0) {\n            IPoolAccountant(poolAccountant).reportLoss(_msgSender(), _loss);\n        }\n    }\n\n    /**\n     * @dev Transfer given ERC20 token to feeCollector\n     * @param _fromToken Token address to sweep\n     */\n    function sweepERC20(address _fromToken) external virtual onlyKeeper {\n        require(_fromToken != address(token), Errors.NOT_ALLOWED_TO_SWEEP);\n        require(feeCollector != address(0), Errors.FEE_COLLECTOR_NOT_SET);\n        IERC20(_fromToken).safeTransfer(feeCollector, IERC20(_fromToken).balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Get available credit limit of strategy. This is the amount strategy can borrow from pool\n     * @dev Available credit limit is calculated based on current debt of pool and strategy, current debt limit of pool and strategy.\n     * credit available = min(pool's debt limit, strategy's debt limit, max debt per rebalance)\n     * when some strategy do not pay back outstanding debt, this impact credit line of other strategy if totalDebt of pool >= debtLimit of pool\n     * @param _strategy Strategy address\n     */\n    function availableCreditLimit(address _strategy) external view returns (uint256) {\n        return IPoolAccountant(poolAccountant).availableCreditLimit(_strategy);\n    }\n\n    /**\n     * @notice Debt above current debt limit\n     * @param _strategy Address of strategy\n     */\n    function excessDebt(address _strategy) external view returns (uint256) {\n        return IPoolAccountant(poolAccountant).excessDebt(_strategy);\n    }\n\n    function getStrategies() public view returns (address[] memory) {\n        return IPoolAccountant(poolAccountant).getStrategies();\n    }\n\n    function getWithdrawQueue() public view returns (address[] memory) {\n        return IPoolAccountant(poolAccountant).getWithdrawQueue();\n    }\n\n    function strategy(address _strategy)\n        public\n        view\n        returns (\n            bool _active,\n            uint256 _interestFee,\n            uint256 _debtRate,\n            uint256 _lastRebalance,\n            uint256 _totalDebt,\n            uint256 _totalLoss,\n            uint256 _totalProfit,\n            uint256 _debtRatio,\n            uint256 _externalDepositFee\n        )\n    {\n        return IPoolAccountant(poolAccountant).strategy(_strategy);\n    }\n\n    /// @notice Get total debt of pool\n    function totalDebt() external view returns (uint256) {\n        return IPoolAccountant(poolAccountant).totalDebt();\n    }\n\n    /**\n     * @notice Get total debt of given strategy\n     * @param _strategy Strategy address\n     */\n    function totalDebtOf(address _strategy) public view returns (uint256) {\n        return IPoolAccountant(poolAccountant).totalDebtOf(_strategy);\n    }\n\n    /// @notice Get total debt ratio. Total debt ratio helps us keep buffer in pool\n    function totalDebtRatio() external view returns (uint256) {\n        return IPoolAccountant(poolAccountant).totalDebtRatio();\n    }\n\n    /// @dev Returns total value of vesper pool, in terms of collateral token\n    function totalValue() public view override returns (uint256) {\n        return IPoolAccountant(poolAccountant).totalDebt() + tokensHere();\n    }\n\n    function _withdrawCollateral(uint256 _amount) internal virtual {\n        // Withdraw amount from queue\n        uint256 _debt;\n        uint256 _balanceAfter;\n        uint256 _balanceBefore;\n        uint256 _amountWithdrawn;\n        uint256 _totalAmountWithdrawn;\n        address[] memory _withdrawQueue = getWithdrawQueue();\n        uint256 _len = _withdrawQueue.length;\n        for (uint256 i; i < _len; i++) {\n            uint256 _amountNeeded = _amount - _totalAmountWithdrawn;\n            address _strategy = _withdrawQueue[i];\n            _debt = totalDebtOf(_strategy);\n            if (_debt == 0) {\n                continue;\n            }\n            if (_amountNeeded > _debt) {\n                // Should not withdraw more than current debt of strategy.\n                _amountNeeded = _debt;\n            }\n            _balanceBefore = tokensHere();\n            //solhint-disable no-empty-blocks\n            try IStrategy(_strategy).withdraw(_amountNeeded) {} catch {\n                continue;\n            }\n            _balanceAfter = tokensHere();\n            _amountWithdrawn = _balanceAfter - _balanceBefore;\n            // Adjusting totalDebt. Assuming that during next reportEarning(), strategy will report loss if amountWithdrawn < _amountNeeded\n            IPoolAccountant(poolAccountant).decreaseDebt(_strategy, _amountWithdrawn);\n            _totalAmountWithdrawn += _amountWithdrawn;\n            if (_totalAmountWithdrawn >= _amount) {\n                // withdraw done\n                break;\n            }\n        }\n    }\n\n    /**\n     * @dev Before burning hook.\n     * withdraw amount from strategies\n     */\n    function _beforeBurning(uint256 _share) internal override returns (uint256 actualWithdrawn) {\n        uint256 _amount = (_share * pricePerShare()) / 1e18;\n        uint256 _balanceNow = tokensHere();\n        if (_amount > _balanceNow) {\n            _withdrawCollateral(_amount - _balanceNow);\n            _balanceNow = tokensHere();\n        }\n        actualWithdrawn = _balanceNow < _amount ? _balanceNow : _amount;\n        require(actualWithdrawn != 0, Errors.INVALID_COLLATERAL_AMOUNT);\n    }\n}\n"
    },
    "contracts/pool/PoolShareToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./PoolERC20Permit.sol\";\nimport \"./PoolStorage.sol\";\nimport \"./Errors.sol\";\nimport \"../Governed.sol\";\nimport \"../Pausable.sol\";\nimport \"../interfaces/vesper/IPoolAccountant.sol\";\nimport \"../interfaces/vesper/IPoolRewards.sol\";\n\n/// @title Holding pool share token\n// solhint-disable no-empty-blocks\nabstract contract PoolShareToken is Initializable, PoolERC20Permit, Governed, Pausable, ReentrancyGuard, PoolStorageV2 {\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    uint256 public constant MAX_BPS = 10_000;\n\n    event Deposit(address indexed owner, uint256 shares, uint256 amount);\n    event Withdraw(address indexed owner, uint256 shares, uint256 amount);\n\n    // We are using constructor to initialize implementation with basic details\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _token\n    ) PoolERC20(_name, _symbol) {\n        // 0x0 is acceptable as has no effect on functionality\n        token = IERC20(_token);\n    }\n\n    /// @dev Equivalent to constructor for proxy. It can be called only once per proxy.\n    function _initializePool(\n        string memory _name,\n        string memory _symbol,\n        address _token\n    ) internal initializer {\n        require(_token != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n        _setName(_name);\n        _setSymbol(_symbol);\n        _initializePermit(_name);\n        token = IERC20(_token);\n\n        // Assuming token supports 18 or less decimals\n        uint256 _decimals = IERC20Metadata(_token).decimals();\n        decimalConversionFactor = 10**(18 - _decimals);\n    }\n\n    /**\n     * @notice Deposit ERC20 tokens and receive pool shares depending on the current share price.\n     * @param _amount ERC20 token amount.\n     */\n    function deposit(uint256 _amount) external virtual nonReentrant whenNotPaused {\n        _updateRewards(_msgSender());\n        _deposit(_amount);\n    }\n\n    /**\n     * @notice Deposit ERC20 tokens and claim rewards if any\n     * @param _amount ERC20 token amount.\n     */\n    function depositAndClaim(uint256 _amount) external virtual nonReentrant whenNotPaused {\n        _depositAndClaim(_amount);\n    }\n\n    /**\n     * @notice Deposit ERC20 tokens with permit aka gasless approval.\n     * @param _amount ERC20 token amount.\n     * @param _deadline The time at which signature will expire\n     * @param _v The recovery byte of the signature\n     * @param _r Half of the ECDSA signature pair\n     * @param _s Half of the ECDSA signature pair\n     */\n    function depositWithPermit(\n        uint256 _amount,\n        uint256 _deadline,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external virtual nonReentrant whenNotPaused {\n        IERC20Permit(address(token)).permit(_msgSender(), address(this), _amount, _deadline, _v, _r, _s);\n        _deposit(_amount);\n    }\n\n    /**\n     * @notice Withdraw collateral based on given shares and the current share price.\n     * Withdraw fee, if any, will be deduced from given shares and transferred to feeCollector.\n     * Burn remaining shares and return collateral.\n     * @param _shares Pool shares. It will be in 18 decimals.\n     */\n    function withdraw(uint256 _shares) external virtual nonReentrant whenNotShutdown {\n        _updateRewards(_msgSender());\n        _withdraw(_shares);\n    }\n\n    /**\n     * @notice Withdraw collateral and claim rewards if any\n     * @param _shares Pool shares. It will be in 18 decimals.\n     */\n    function withdrawAndClaim(uint256 _shares) external virtual nonReentrant whenNotShutdown {\n        _withdrawAndClaim(_shares);\n    }\n\n    /**\n     * @notice Withdraw collateral based on given shares and the current share price.\n     * @dev Burn shares and return collateral. No withdraw fee will be assessed\n     * when this function is called. Only some white listed address can call this function.\n     * @param _shares Pool shares. It will be in 18 decimals.\n     * This function is deprecated, normal withdraw will check for whitelisted address\n     */\n    function whitelistedWithdraw(uint256 _shares) external virtual nonReentrant whenNotShutdown {\n        require(_feeWhitelist.contains(_msgSender()), Errors.NOT_WHITELISTED_ADDRESS);\n        require(_shares != 0, Errors.INVALID_SHARE_AMOUNT);\n        _claimRewards(_msgSender());\n        _withdrawWithoutFee(_shares);\n    }\n\n    /**\n     * @notice Transfer tokens to multiple recipient\n     * @dev Address array and amount array are 1:1 and are in order.\n     * @param _recipients array of recipient addresses\n     * @param _amounts array of token amounts\n     * @return true/false\n     */\n    function multiTransfer(address[] calldata _recipients, uint256[] calldata _amounts) external returns (bool) {\n        require(_recipients.length == _amounts.length, Errors.INPUT_LENGTH_MISMATCH);\n        for (uint256 i = 0; i < _recipients.length; i++) {\n            require(transfer(_recipients[i], _amounts[i]), Errors.MULTI_TRANSFER_FAILED);\n        }\n        return true;\n    }\n\n    /**\n     * @notice Get price per share\n     * @dev Return value will be in token defined decimals.\n     */\n    function pricePerShare() public view returns (uint256) {\n        if (totalSupply() == 0 || totalValue() == 0) {\n            return convertFrom18(1e18);\n        }\n        return (totalValue() * 1e18) / totalSupply();\n    }\n\n    /**\n     * @notice Calculate how much shares user will get for given amount. Also return externalDepositFee if any.\n     * @param _amount Collateral amount\n     * @return _shares Amount of share that user will get\n     */\n    function calculateMintage(uint256 _amount) public view returns (uint256 _shares) {\n        require(_amount != 0, Errors.INVALID_COLLATERAL_AMOUNT);\n        uint256 _externalDepositFee = (_amount * IPoolAccountant(poolAccountant).externalDepositFee()) / MAX_BPS;\n        _shares = _calculateShares(_amount - _externalDepositFee);\n    }\n\n    /// @dev Convert from 18 decimals to token defined decimals.\n    function convertFrom18(uint256 _amount) public view virtual returns (uint256) {\n        return _amount / decimalConversionFactor;\n    }\n\n    /// @dev Returns the token stored in the pool. It will be in token defined decimals.\n    function tokensHere() public view virtual returns (uint256) {\n        return token.balanceOf(address(this));\n    }\n\n    /**\n     * @dev Returns sum of token locked in other contracts and token stored in the pool.\n     * Default tokensHere. It will be in token defined decimals.\n     */\n    function totalValue() public view virtual returns (uint256);\n\n    /**\n     * @dev Hook that is called just before burning tokens. This withdraw collateral from withdraw queue\n     * @param _share Pool share in 18 decimals\n     */\n    function _beforeBurning(uint256 _share) internal virtual returns (uint256) {}\n\n    /**\n     * @dev Hook that is called just after burning tokens.\n     * @param _amount Collateral amount in collateral token defined decimals.\n     */\n    function _afterBurning(uint256 _amount) internal virtual returns (uint256) {\n        token.safeTransfer(_msgSender(), _amount);\n        return _amount;\n    }\n\n    /**\n     * @dev Hook that is called just before minting new tokens. To be used i.e.\n     * if the deposited amount is to be transferred from user to this contract.\n     * @param _amount Collateral amount in collateral token defined decimals.\n     */\n    function _beforeMinting(uint256 _amount) internal virtual {\n        token.safeTransferFrom(_msgSender(), address(this), _amount);\n    }\n\n    /**\n     * @dev Hook that is called just after minting new tokens. To be used i.e.\n     * if the deposited amount is to be transferred to a different contract.\n     * @param _amount Collateral amount in collateral token defined decimals.\n     */\n    function _afterMinting(uint256 _amount) internal virtual {}\n\n    /// @dev Update pool rewards of sender and receiver during transfer.\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual override {\n        if (poolRewards != address(0)) {\n            IPoolRewards(poolRewards).updateReward(sender);\n            IPoolRewards(poolRewards).updateReward(recipient);\n        }\n        super._transfer(sender, recipient, amount);\n    }\n\n    /**\n     * @dev Calculate shares to mint/burn based on the current share price and given amount.\n     * @param _amount Collateral amount in collateral token defined decimals.\n     * @return share amount in 18 decimal\n     */\n    function _calculateShares(uint256 _amount) internal view returns (uint256) {\n        uint256 _share = ((_amount * 1e18) / pricePerShare());\n        return _amount > ((_share * pricePerShare()) / 1e18) ? _share + 1 : _share;\n    }\n\n    /// @notice claim rewards of account\n    function _claimRewards(address _account) internal {\n        if (poolRewards != address(0)) {\n            IPoolRewards(poolRewards).claimReward(_account);\n        }\n    }\n\n    function _updateRewards(address _account) internal {\n        if (poolRewards != address(0)) {\n            IPoolRewards(poolRewards).updateReward(_account);\n        }\n    }\n\n    /// @dev Deposit incoming token and mint pool token i.e. shares.\n    function _deposit(uint256 _amount) internal virtual {\n        uint256 _shares = calculateMintage(_amount);\n        _beforeMinting(_amount);\n        _mint(_msgSender(), _shares);\n        _afterMinting(_amount);\n        emit Deposit(_msgSender(), _shares, _amount);\n    }\n\n    /// @dev Deposit token and claim rewards if any\n    function _depositAndClaim(uint256 _amount) internal {\n        _claimRewards(_msgSender());\n        _deposit(_amount);\n    }\n\n    /// @dev Burns shares and returns the collateral value, after fee, of those.\n    function _withdraw(uint256 _shares) internal virtual {\n        require(_shares != 0, Errors.INVALID_SHARE_AMOUNT);\n        if (withdrawFee == 0 || _feeWhitelist.contains(_msgSender())) {\n            _withdrawWithoutFee(_shares);\n        } else {\n            uint256 _fee = (_shares * withdrawFee) / MAX_BPS;\n            uint256 _sharesAfterFee = _shares - _fee;\n            uint256 _amountWithdrawn = _beforeBurning(_sharesAfterFee);\n            // Recalculate proportional share on actual amount withdrawn\n            uint256 _proportionalShares = _calculateShares(_amountWithdrawn);\n\n            // Using convertFrom18() to avoid dust.\n            // Pool share token is in 18 decimal and collateral token decimal is <=18.\n            // Anything less than 10**(18-collateralTokenDecimal) is dust.\n            if (convertFrom18(_proportionalShares) < convertFrom18(_sharesAfterFee)) {\n                // Recalculate shares to withdraw, fee and shareAfterFee\n                _shares = (_proportionalShares * MAX_BPS) / (MAX_BPS - withdrawFee);\n                _fee = _shares - _proportionalShares;\n                _sharesAfterFee = _proportionalShares;\n            }\n            _burn(_msgSender(), _sharesAfterFee);\n            _transfer(_msgSender(), feeCollector, _fee);\n            _afterBurning(_amountWithdrawn);\n            emit Withdraw(_msgSender(), _shares, _amountWithdrawn);\n        }\n    }\n\n    /// @dev Withdraw collateral and claim rewards if any\n    function _withdrawAndClaim(uint256 _shares) internal {\n        _claimRewards(_msgSender());\n        _withdraw(_shares);\n    }\n\n    /// @dev Burns shares and returns the collateral value of those.\n    function _withdrawWithoutFee(uint256 _shares) internal {\n        uint256 _amountWithdrawn = _beforeBurning(_shares);\n        uint256 _proportionalShares = _calculateShares(_amountWithdrawn);\n        if (convertFrom18(_proportionalShares) < convertFrom18(_shares)) {\n            _shares = _proportionalShares;\n        }\n        _burn(_msgSender(), _shares);\n        _afterBurning(_amountWithdrawn);\n        emit Withdraw(_msgSender(), _shares, _amountWithdrawn);\n    }\n}\n"
    },
    "contracts/pool/PoolERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./PoolERC20.sol\";\n\n///@title Pool ERC20 Permit to use with proxy. Inspired by OpenZeppelin ERC20Permit\n// solhint-disable var-name-mixedcase\nabstract contract PoolERC20Permit is PoolERC20, IERC20Permit {\n    bytes32 private constant _EIP712_VERSION = keccak256(bytes(\"1\"));\n    bytes32 private constant _EIP712_DOMAIN_TYPEHASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    bytes32 private _CACHED_DOMAIN_SEPARATOR;\n    bytes32 private _HASHED_NAME;\n    uint256 private _CACHED_CHAIN_ID;\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    mapping(address => uint256) public override nonces;\n\n    /**\n     * @dev Initializes the domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function _initializePermit(string memory name_) internal {\n        _HASHED_NAME = keccak256(bytes(name_));\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(_EIP712_DOMAIN_TYPEHASH, _HASHED_NAME, _EIP712_VERSION);\n    }\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n        uint256 _currentNonce = nonces[owner];\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _currentNonce, deadline));\n        bytes32 hash = keccak256(abi.encodePacked(\"\\x19\\x01\", _domainSeparatorV4(), structHash));\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n        nonces[owner] = _currentNonce + 1;\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() private view returns (bytes32) {\n        if (block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_EIP712_DOMAIN_TYPEHASH, _HASHED_NAME, _EIP712_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 name,\n        bytes32 version\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, name, version, block.chainid, address(this)));\n    }\n}\n"
    },
    "contracts/pool/PoolStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\ncontract PoolStorageV1 {\n    IERC20 public token; // Collateral token\n\n    address public poolAccountant; // PoolAccountant address\n    address public poolRewards; // PoolRewards contract address\n    address private feeWhitelistObsolete; // Obsolete in favor of AddressSet of feeWhitelist\n    address private keepersObsolete; // Obsolete in favor of AddressSet of keepers\n    address private maintainersObsolete; // Obsolete in favor of AddressSet of maintainers\n    address public feeCollector; // Fee collector address\n    uint256 public withdrawFee; // Withdraw fee for this pool\n    uint256 public decimalConversionFactor; // It can be used in converting value to/from 18 decimals\n    bool internal withdrawInETH; // This flag will be used by VETH pool as switch to withdraw ETH or WETH\n}\n\ncontract PoolStorageV2 is PoolStorageV1 {\n    EnumerableSet.AddressSet internal _feeWhitelist; // List of addresses whitelisted for feeless withdraw\n    EnumerableSet.AddressSet internal _keepers; // List of keeper addresses\n    EnumerableSet.AddressSet internal _maintainers; // List of maintainer addresses\n}\n"
    },
    "contracts/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n */\ncontract Pausable is Context {\n    event Paused(address account);\n    event Shutdown(address account);\n    event Unpaused(address account);\n    event Open(address account);\n\n    bool public paused;\n    bool public stopEverything;\n\n    modifier whenNotPaused() {\n        require(!paused, \"paused\");\n        _;\n    }\n    modifier whenPaused() {\n        require(paused, \"not-paused\");\n        _;\n    }\n\n    modifier whenNotShutdown() {\n        require(!stopEverything, \"shutdown\");\n        _;\n    }\n\n    modifier whenShutdown() {\n        require(stopEverything, \"not-shutdown\");\n        _;\n    }\n\n    /// @dev Pause contract operations, if contract is not paused.\n    function _pause() internal virtual whenNotPaused {\n        paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /// @dev Unpause contract operations, allow only if contract is paused and not shutdown.\n    function _unpause() internal virtual whenPaused whenNotShutdown {\n        paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /// @dev Shutdown contract operations, if not already shutdown.\n    function _shutdown() internal virtual whenNotShutdown {\n        stopEverything = true;\n        paused = true;\n        emit Shutdown(_msgSender());\n    }\n\n    /// @dev Open contract operations, if contract is in shutdown state\n    function _open() internal virtual whenShutdown {\n        stopEverything = false;\n        emit Open(_msgSender());\n    }\n}\n"
    },
    "contracts/interfaces/vesper/IPoolAccountant.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\ninterface IPoolAccountant {\n    function decreaseDebt(address _strategy, uint256 _decreaseBy) external;\n\n    function migrateStrategy(address _old, address _new) external;\n\n    function reportEarning(\n        address _strategy,\n        uint256 _profit,\n        uint256 _loss,\n        uint256 _payback\n    )\n        external\n        returns (\n            uint256 _actualPayback,\n            uint256 _creditLine,\n            uint256 _interestFee\n        );\n\n    function reportLoss(address _strategy, uint256 _loss) external;\n\n    function availableCreditLimit(address _strategy) external view returns (uint256);\n\n    function excessDebt(address _strategy) external view returns (uint256);\n\n    function getStrategies() external view returns (address[] memory);\n\n    function getWithdrawQueue() external view returns (address[] memory);\n\n    function strategy(address _strategy)\n        external\n        view\n        returns (\n            bool _active,\n            uint256 _interestFee,\n            uint256 _debtRate,\n            uint256 _lastRebalance,\n            uint256 _totalDebt,\n            uint256 _totalLoss,\n            uint256 _totalProfit,\n            uint256 _debtRatio,\n            uint256 _externalDepositFee\n        );\n\n    function externalDepositFee() external view returns (uint256);\n\n    function totalDebt() external view returns (uint256);\n\n    function totalDebtOf(address _strategy) external view returns (uint256);\n\n    function totalDebtRatio() external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n        } else if (signature.length == 64) {\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                let vs := mload(add(signature, 0x40))\n                r := mload(add(signature, 0x20))\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n                v := add(shr(255, vs), 27)\n            }\n        } else {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/pool/PoolERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n// solhint-disable reason-string, no-empty-blocks\n///@title Pool ERC20 to use with proxy. Inspired by OpenZeppelin ERC20\nabstract contract PoolERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the decimals of the token. default to 18\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev Returns total supply of the token.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev  Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    function _setName(string memory name_) internal {\n        _name = name_;\n    }\n\n    function _setSymbol(string memory symbol_) internal {\n        _symbol = symbol_;\n    }\n}\n"
    },
    "contracts/pool/vfr/VFRPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../VPoolBase.sol\";\n\n// solhint-disable no-empty-blocks\ncontract VFRPool is VPoolBase {\n    address public buffer;\n\n    event BufferSet(address buffer);\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _token\n    ) VPoolBase(_name, _symbol, _token) {}\n\n    function initialize(\n        string memory _name,\n        string memory _symbol,\n        address _token,\n        address _poolAccountant\n    ) public initializer {\n        _initializeBase(_name, _symbol, _token, _poolAccountant);\n    }\n\n    function setBuffer(address _buffer) external onlyGovernor {\n        require(_buffer != address(0), \"buffer-address-is-zero\");\n        require(_buffer != buffer, \"same-buffer-address\");\n        buffer = _buffer;\n        emit BufferSet(_buffer);\n    }\n}\n"
    },
    "contracts/pool/vfr/VFRStablePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../../interfaces/vesper/IPoolAccountant.sol\";\nimport \"./VFRPool.sol\";\n\n// solhint-disable no-empty-blocks\ncontract VFRStablePool is VFRPool {\n    string public constant VERSION = \"4.0.0\";\n\n    uint256 public targetAPY;\n    uint256 public startTime;\n    uint256 public initialPricePerShare;\n\n    // Spot predictedAPY (can't be > targetAPY)\n    uint256 public predictedAPY;\n\n    // Accumulator for Time-weighted average Predicted APY for auto-retargeting\n    uint256 public accPredictedAPY;\n    uint256 public lastObservationBlock;\n    uint256 public predictionStartBlock;\n\n    uint256 public tolerance;\n    uint256 public lockPeriod;\n\n    // user address to last deposit timestamp mapping\n    mapping(address => uint256) public depositTimestamp;\n\n    bool public depositsHalted;\n\n    event ToleranceSet(uint256 tolerance);\n    event LockPeriodSet(uint256 lockPeriod);\n    event Retarget(uint256 targetAPY, uint256 tolerance);\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _token\n    ) VFRPool(_name, _symbol, _token) {\n        lockPeriod = 7 days;\n        predictionStartBlock = block.number;\n        lastObservationBlock = block.number;\n    }\n\n    modifier onlyWithdrawUnlocked(address _sender) {\n        require(block.timestamp >= depositTimestamp[_sender] + lockPeriod, \"lock-period-not-expired\");\n        _;\n    }\n\n    function setLockPeriod(uint256 _newLockPeriod) external onlyGovernor {\n        require(_newLockPeriod != lockPeriod, \"same-lock-period\");\n        lockPeriod = _newLockPeriod;\n    }\n\n    function setTolerance(uint256 _tolerance) external onlyGovernor {\n        require(_tolerance != 0, \"tolerance-value-is-zero\");\n        require(_tolerance != tolerance, \"same-tolerance-value\");\n        tolerance = _tolerance;\n        emit ToleranceSet(_tolerance);\n    }\n\n    function retarget(uint256 _apy, uint256 _tolerance) external onlyGovernor {\n        _retarget(_apy, _tolerance);\n    }\n\n    // Moves Target APY by a tolerance step according to time-weighted Predicted APY\n    // Make sure to collect enough checkpoints before for a accurate retargeting\n    function autoRetarget() external onlyKeeper {\n        uint256 _avgPredictedAPY = avgPredictedAPY();\n\n        // Make sure to have at least a checkpoint since last retarget\n        require(_avgPredictedAPY > 0, \"invalid-avg-predicted-apy\");\n\n        if (_avgPredictedAPY > targetAPY + tolerance) {\n            _retarget(targetAPY + tolerance, tolerance);\n        } else if (_avgPredictedAPY < targetAPY - tolerance) {\n            _retarget(targetAPY - tolerance, tolerance);\n        }\n        // if _avgPredictedAPY is within targetAPY (+/- ~ tolerance) do nothing\n        // Goal is to keep rate as fixed as possible\n    }\n\n    function checkpoint() external onlyKeeper {\n        address[] memory strategies = getStrategies();\n\n        uint256 profits;\n        uint256 loss;\n        for (uint256 i = 0; i < strategies.length; i++) {\n            (, uint256 fee, , , uint256 totalDebt, , , , ) = IPoolAccountant(poolAccountant).strategy(strategies[i]);\n            uint256 totalValue = IStrategy(strategies[i]).totalValueCurrent();\n            if (totalValue > totalDebt) {\n                uint256 totalProfits = totalValue - totalDebt;\n                uint256 actualProfits = totalProfits - ((totalProfits * fee) / MAX_BPS);\n                profits += actualProfits;\n            } else {\n                loss += (totalDebt - totalValue);\n            }\n        }\n\n        if (buffer != address(0)) {\n            // This should take into account that an interest fee is taken from the amount in the buffer\n            // (however, the interest fee depends on which strategy will request funds from the buffer)\n            profits += token.balanceOf(buffer);\n        }\n\n        // Profit will be reduced, if any strategy is expected to report loss.\n        if (loss != 0) {\n            profits = profits > loss ? profits - loss : 0;\n        }\n\n        // Calculate the price per share if the above profits were to be reported\n        uint256 predictedPricePerShare;\n        if (totalSupply() == 0 || totalValue() == 0) {\n            predictedPricePerShare = convertFrom18(1e18);\n        } else {\n            predictedPricePerShare = ((totalValue() + profits) * 1e18) / totalSupply();\n        }\n\n        if (predictedPricePerShare < initialPricePerShare) {\n            predictedAPY = 0;\n        } else {\n            // Predict the APY based on the unreported profits of all strategies\n            predictedAPY =\n                ((predictedPricePerShare - initialPricePerShare) * (1e18 * 365 * 24 * 3600)) /\n                (initialPricePerShare * (block.timestamp - startTime));\n\n            // Updates the time-weighted average Predicted APY accumulator\n            accPredictedAPY += predictedAPY * (block.number - lastObservationBlock);\n            lastObservationBlock = block.number;\n            // Although the predicted APY can be greater than the target APY due to the funds\n            // available in the buffer, the strategies will make sure to never send more funds\n            // to the pool than the amount needed to cover the target APY\n            predictedAPY = predictedAPY > targetAPY ? targetAPY : predictedAPY;\n        }\n\n        // The predicted APY must be within the target APY by no more than the current tolerance\n        depositsHalted = targetAPY - predictedAPY > tolerance;\n    }\n\n    // Gets the time-weighted average Predicted APY since last retarget\n    // It updates every checkpoint since last retarget (more checkpoints -> better prediction)\n    function avgPredictedAPY() public view returns (uint256 _avgPredictedAPY) {\n        uint256 _elapsedBlocks = lastObservationBlock - predictionStartBlock;\n        _avgPredictedAPY = (_elapsedBlocks != 0) ? accPredictedAPY / _elapsedBlocks : 0;\n    }\n\n    function targetPricePerShare() public view returns (uint256) {\n        return\n            initialPricePerShare +\n            ((initialPricePerShare * targetAPY * (block.timestamp - startTime)) / (1e18 * 365 * 24 * 3600));\n    }\n\n    function amountToReachTarget(address _strategy) public view returns (uint256) {\n        uint256 fromPricePerShare = pricePerShare();\n        uint256 toPricePerShare = targetPricePerShare();\n        if (fromPricePerShare < toPricePerShare) {\n            (, uint256 fee, , , , , , , ) = IPoolAccountant(poolAccountant).strategy(_strategy);\n            uint256 fromTotalValue = (fromPricePerShare * totalSupply()) / 1e18;\n            uint256 toTotalValue = (toPricePerShare * totalSupply()) / 1e18;\n            uint256 amountWithoutFee = toTotalValue - fromTotalValue;\n            // Take into account the performance fee of the strategy\n            return (amountWithoutFee * MAX_BPS) / (MAX_BPS - fee);\n        }\n        return 0;\n    }\n\n    function _retarget(uint256 _apy, uint256 _tolerance) internal {\n        // eg. 100% APY -> 1 * 1e18 = 1e18\n        //     5% APY -> 0.05 * 1e18 = 5e16\n        targetAPY = _apy;\n        startTime = block.timestamp;\n        initialPricePerShare = pricePerShare();\n        predictedAPY = _apy;\n        // Only allow deposits if at the last rebalance the pool's actual APY\n        // was not behind the target APY for more than 'tolerance'. Probably\n        // a better way to set this is dynamically based on how long the pool\n        // has been running for.\n        tolerance = _tolerance;\n        emit Retarget(_apy, _tolerance);\n\n        // Restart time-weighted PredictedAPY calculation\n        lastObservationBlock = block.number;\n        predictionStartBlock = block.number;\n        accPredictedAPY = 0;\n    }\n\n    function _deposit(uint256 _amount) internal override {\n        require(!depositsHalted, \"pool-under-target\");\n        depositTimestamp[_msgSender()] = block.timestamp;\n        super._deposit(_amount);\n    }\n\n    function _withdraw(uint256 _shares) internal override onlyWithdrawUnlocked(_msgSender()) {\n        super._withdraw(_shares);\n    }\n\n    function _transfer(\n        address _sender,\n        address _recipient,\n        uint256 _amount\n    ) internal override onlyWithdrawUnlocked(_sender) {\n        super._transfer(_sender, _recipient, _amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "contracts/strategies/curve/CrvPoolStrategyBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../../interfaces/vesper/IVesperPool.sol\";\nimport \"../Strategy.sol\";\nimport \"./CrvBase.sol\";\n\n/// @title This strategy will deposit collateral token in a Curve Pool and earn interest.\nabstract contract CrvPoolStrategyBase is CrvBase, Strategy {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"4.0.0\";\n\n    mapping(address => bool) internal reservedToken;\n\n    uint256 public immutable collIdx;\n    uint256 public usdRate;\n    uint256 public usdRateTimestamp;\n\n    address[] public coins;\n    uint256[] public coinDecimals;\n    address[] public rewardTokens;\n    bool public depositError;\n\n    uint256 public crvSlippage = 10; // 10000 is 100%; 10 is 0.1%\n    uint256 public decimalConversionFactor; // It will be used in converting value to/from 18 decimals\n\n    // No. of pooled tokens in the Pool\n    uint256 internal immutable n;\n    event UpdatedCrvSlippage(uint256 oldCrvSlippage, uint256 newCrvSlippage);\n\n    event DepositFailed(string reason);\n\n    constructor(\n        address _pool,\n        address _crvPool,\n        address _crvLp,\n        address _crvGauge,\n        address _swapManager,\n        uint256 _collateralIdx,\n        uint256 _n,\n        string memory _name\n    )\n        CrvBase(_crvPool, _crvLp, _crvGauge) // 3Pool Manager\n        Strategy(_pool, _swapManager, _crvLp)\n    {\n        require(_collateralIdx < _n, \"invalid-collateral\");\n\n        n = _n;\n        reservedToken[_crvLp] = true;\n        reservedToken[CRV] = true;\n        collIdx = _collateralIdx;\n        _init(_crvPool, _n);\n        require(coins[_collateralIdx] == address(IVesperPool(_pool).token()), \"collateral-mismatch\");\n        // Assuming token supports 18 or less decimals. _init will initialize coins array\n        uint256 _decimals = IERC20Metadata(coins[_collateralIdx]).decimals();\n        decimalConversionFactor = 10**(18 - _decimals);\n        NAME = _name;\n        rewardTokens.push(CRV);\n    }\n\n    /// @dev Rewards token in gauge can be updated any time. Governor can set reward tokens\n    /// Different version of gauge has different method to read reward tokens better governor set it\n    function setRewardTokens(address[] memory _rewardTokens) external virtual onlyGovernor {\n        rewardTokens = _rewardTokens;\n        for (uint256 i = 0; i < _rewardTokens.length; i++) {\n            require(\n                _rewardTokens[i] != receiptToken &&\n                    _rewardTokens[i] != address(collateralToken) &&\n                    _rewardTokens[i] != pool &&\n                    _rewardTokens[i] != crvLp,\n                \"Invalid reward token\"\n            );\n            reservedToken[_rewardTokens[i]] = true;\n        }\n        _approveToken(0);\n        _approveToken(MAX_UINT_VALUE);\n        _setupOracles();\n    }\n\n    function updateCrvSlippage(uint256 _newCrvSlippage) external onlyGovernor {\n        require(_newCrvSlippage < 10000, \"invalid-slippage-value\");\n        emit UpdatedCrvSlippage(crvSlippage, _newCrvSlippage);\n        crvSlippage - _newCrvSlippage;\n    }\n\n    /// @dev Claimable rewards estimated into pool's collateral value\n    function claimableRewardsInCollateral() public view virtual returns (uint256 rewardAsCollateral) {\n        //Total Mintable - Previously minted\n        uint256 claimable =\n            ILiquidityGaugeV2(crvGauge).integrate_fraction(address(this)) -\n                ITokenMinter(CRV_MINTER).minted(address(this), crvGauge);\n        if (claimable != 0) {\n            (, rewardAsCollateral, ) = swapManager.bestOutputFixedInput(CRV, address(collateralToken), claimable);\n        }\n    }\n\n    /// @dev Convert from 18 decimals to token defined decimals.\n    function convertFrom18(uint256 _amount) public view returns (uint256) {\n        return _amount / decimalConversionFactor;\n    }\n\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\n    function isReservedToken(address _token) public view override returns (bool) {\n        return reservedToken[_token];\n    }\n\n    /**\n     * @notice Calculate total value of asset under management\n     * @dev Report total value in collateral token\n     */\n    function totalValue() public view virtual override returns (uint256 _value) {\n        _value =\n            collateralToken.balanceOf(address(this)) +\n            convertFrom18(_calcAmtOutAfterSlippage(getLpValue(totalLp()), crvSlippage)) +\n            claimableRewardsInCollateral();\n    }\n\n    function _setupOracles() internal virtual override {\n        _safeCreateOrUpdateOracle(CRV, WETH);\n        for (uint256 i = 0; i < n; i++) {\n            _safeCreateOrUpdateOracle(coins[i], WETH);\n        }\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            _safeCreateOrUpdateOracle(rewardTokens[i], WETH);\n        }\n    }\n\n    /**\n     * @dev Creates Oracle pair preventing revert if it doesn't exist in a DEX\n     */\n    function _safeCreateOrUpdateOracle(address _tokenA, address _tokenB) internal {\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            // solhint-disable no-empty-blocks\n            try swapManager.createOrUpdateOracle(_tokenA, _tokenB, oraclePeriod, i) {\n                break;\n            } catch Error(\n                string memory /* reason */\n            ) {}\n            // solhint-enable no-empty-blocks\n        }\n    }\n\n    // given the rates of 3 stablecoins compared with a common denominator\n    // return the lowest divided by the highest\n    function _getSafeUsdRate() internal returns (uint256) {\n        // use a stored rate if we've looked it up recently\n        if (usdRateTimestamp > block.timestamp - oraclePeriod && usdRate != 0) return usdRate;\n        // otherwise, calculate a rate and store it.\n        uint256 lowest;\n        uint256 highest;\n        for (uint256 i = 0; i < n; i++) {\n            // get the rate for $1\n            (uint256 rate, bool isValid) = _consultOracle(coins[i], WETH, 10**coinDecimals[i]);\n            if (isValid) {\n                if (lowest == 0 || rate < lowest) {\n                    lowest = rate;\n                }\n                if (highest < rate) {\n                    highest = rate;\n                }\n            }\n        }\n        // We only need to check one of them because if a single valid rate is returned,\n        // highest == lowest and highest > 0 && lowest > 0\n        require(lowest != 0, \"no-oracle-rates\");\n        usdRateTimestamp = block.timestamp;\n        usdRate = (lowest * 1e18) / highest;\n        return usdRate;\n    }\n\n    function _approveToken(uint256 _amount) internal virtual override {\n        collateralToken.safeApprove(pool, _amount);\n        collateralToken.safeApprove(address(crvPool), _amount);\n        for (uint256 j = 0; j < swapManager.N_DEX(); j++) {\n            for (uint256 i = 0; i < rewardTokens.length; i++) {\n                IERC20(rewardTokens[i]).safeApprove(address(swapManager.ROUTERS(j)), _amount);\n            }\n            collateralToken.safeApprove(address(swapManager.ROUTERS(j)), _amount);\n        }\n        IERC20(crvLp).safeApprove(crvGauge, _amount);\n    }\n\n    function _init(address _crvPool, uint256 _n) internal virtual {\n        for (uint256 i = 0; i < _n; i++) {\n            coins.push(IStableSwapUnderlying(_crvPool).coins(i));\n            coinDecimals.push(IERC20Metadata(coins[i]).decimals());\n        }\n    }\n\n    function _reinvest() internal override {\n        depositError = false;\n        uint256 amt = collateralToken.balanceOf(address(this));\n        depositError = !_depositToCurve(amt);\n        _stakeAllLp();\n    }\n\n    function _depositToCurve(uint256 amt) internal virtual returns (bool) {\n        if (amt != 0) {\n            uint256[3] memory depositAmounts;\n            depositAmounts[collIdx] = amt;\n            uint256 expectedOut =\n                _calcAmtOutAfterSlippage(\n                    IStableSwap3xUnderlying(address(crvPool)).calc_token_amount(depositAmounts, true),\n                    crvSlippage\n                );\n            uint256 minLpAmount =\n                ((amt * _getSafeUsdRate()) / crvPool.get_virtual_price()) * 10**(18 - coinDecimals[collIdx]);\n            if (expectedOut > minLpAmount) minLpAmount = expectedOut;\n            // solhint-disable-next-line no-empty-blocks\n            try IStableSwap3xUnderlying(address(crvPool)).add_liquidity(depositAmounts, minLpAmount) {} catch Error(\n                string memory reason\n            ) {\n                emit DepositFailed(reason);\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function _withdraw(uint256 _amount) internal override {\n        // This adds some gas but will save loss on exchange fees\n        uint256 balanceHere = collateralToken.balanceOf(address(this));\n        if (_amount > balanceHere) {\n            _unstakeAndWithdrawAsCollateral(_amount - balanceHere);\n        }\n        collateralToken.safeTransfer(pool, _amount);\n    }\n\n    function _unstakeAndWithdrawAsCollateral(uint256 _amount) internal returns (uint256 toWithdraw) {\n        if (_amount == 0) return 0;\n        uint256 i = collIdx;\n        (uint256 lpToWithdraw, uint256 unstakeAmt) = calcWithdrawLpAs(_amount, i);\n        _unstakeLp(unstakeAmt);\n        uint256 minAmtOut =\n            convertFrom18(\n                (lpToWithdraw * _calcAmtOutAfterSlippage(_minimumLpPrice(_getSafeUsdRate()), crvSlippage)) / 1e18\n            );\n        _withdrawAsFromCrvPool(lpToWithdraw, minAmtOut, i);\n        toWithdraw = collateralToken.balanceOf(address(this));\n        if (toWithdraw > _amount) toWithdraw = _amount;\n    }\n\n    /**\n     * @notice some strategy may want to prepare before doing migration. \n        Example In Maker old strategy want to give vault ownership to new strategy\n     */\n    function _beforeMigration(\n        address /*_newStrategy*/\n    ) internal override {\n        _unstakeAllLp();\n    }\n\n    /**\n     * @notice Curve pool may have more than one reward token. Child contract should override _claimRewards\n     */\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\n        _claimRewards();\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            uint256 _amt = IERC20(rewardTokens[i]).balanceOf(address(this));\n            if (_amt != 0) {\n                uint256 _minAmtOut;\n                if (swapSlippage < 10000) {\n                    (uint256 _minWethOut, bool _isValid) = _consultOracle(rewardTokens[i], WETH, _amt);\n                    (uint256 _minTokenOut, bool _isValidTwo) = _consultOracle(WETH, _toToken, _minWethOut);\n                    require(_isValid, \"stale-reward-oracle\");\n                    require(_isValidTwo, \"stale-collateral-oracle\");\n                    _minAmtOut = _calcAmtOutAfterSlippage(_minTokenOut, swapSlippage);\n                }\n                _safeSwap(rewardTokens[i], _toToken, _amt, _minAmtOut);\n            }\n        }\n    }\n\n    /**\n     * @notice Withdraw collateral to payback excess debt in pool.\n     * @param _excessDebt Excess debt of strategy in collateral token\n     * @param _extra additional amount to unstake and withdraw, in collateral token\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\n     */\n    function _liquidate(uint256 _excessDebt, uint256 _extra) internal returns (uint256 _payback) {\n        _payback = _unstakeAndWithdrawAsCollateral(_excessDebt + _extra);\n        // we dont want to return a value greater than we need to\n        if (_payback > _excessDebt) _payback = _excessDebt;\n    }\n\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {\n        uint256 _collateralBalance = convertFrom18(_calcAmtOutAfterSlippage(getLpValue(totalLp()), crvSlippage));\n        if (_collateralBalance < _totalDebt) {\n            _loss = _totalDebt - _collateralBalance;\n        }\n    }\n\n    function _realizeGross(uint256 _totalDebt)\n        internal\n        virtual\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _toUnstake\n        )\n    {\n        uint256 baseline = collateralToken.balanceOf(address(this));\n        _claimRewardsAndConvertTo(address(collateralToken));\n        uint256 newBalance = collateralToken.balanceOf(address(this));\n        _profit = newBalance - baseline;\n\n        uint256 _collateralBalance =\n            baseline + convertFrom18(_calcAmtOutAfterSlippage(getLpValue(totalLp()), crvSlippage));\n        if (_collateralBalance > _totalDebt) {\n            _profit += _collateralBalance - _totalDebt;\n        } else {\n            _loss = _totalDebt - _collateralBalance;\n        }\n\n        if (_profit > _loss) {\n            _profit = _profit - _loss;\n            _loss = 0;\n            if (_profit > newBalance) _toUnstake = _profit - newBalance;\n        } else {\n            _loss = _loss - _profit;\n            _profit = 0;\n        }\n    }\n\n    function _generateReport()\n        internal\n        virtual\n        override\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _payback\n        )\n    {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\n        uint256 _toUnstake;\n        (_profit, _loss, _toUnstake) = _realizeGross(_totalDebt);\n        // only make call to unstake and withdraw once\n        _payback = _liquidate(_excessDebt, _toUnstake);\n    }\n\n    function rebalance() external virtual override onlyKeeper {\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\n        _reinvest();\n        if (!depositError) {\n            uint256 _depositLoss = _realizeLoss(IVesperPool(pool).totalDebtOf(address(this)));\n            IVesperPool(pool).reportLoss(_depositLoss);\n        }\n    }\n\n    // Unused\n    /* solhint-disable no-empty-blocks */\n\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {}\n\n    function _realizeProfit(uint256 _totalDebt) internal override returns (uint256 _profit) {}\n}\n"
    },
    "contracts/strategies/curve/CrvBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"../../interfaces/curve/IStableSwap.sol\";\nimport \"../../interfaces/curve/ILiquidityGauge.sol\";\nimport \"../../interfaces/curve/ITokenMinter.sol\";\nimport \"../../interfaces/curve/IMetapoolFactory.sol\";\nimport \"../../interfaces/curve/IDepositZap.sol\";\n\nabstract contract CrvBase {\n    using SafeERC20 for IERC20;\n\n    address public constant CRV_MINTER = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\n\n    // solhint-disable-next-line  var-name-mixedcase\n    address public CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\n    IStableSwapUnderlying public immutable crvPool;\n    address public immutable crvLp;\n    address public immutable crvGauge;\n\n    constructor(\n        address _pool,\n        address _lp,\n        address _gauge\n    ) {\n        require(_pool != address(0x0), \"CRVMgr: invalid curve pool\");\n        require(_lp != address(0x0), \"CRVMgr: invalid lp token\");\n        require(_gauge != address(0x0), \"CRVMgr: invalid gauge\");\n\n        crvPool = IStableSwapUnderlying(_pool);\n        crvLp = _lp;\n        crvGauge = _gauge;\n    }\n\n    function _minimumLpPrice(uint256 _safeRate) internal view returns (uint256) {\n        return ((crvPool.get_virtual_price() * _safeRate) / 1e18);\n    }\n\n    function _withdrawAsFromCrvPool(\n        uint256 _lpAmount,\n        uint256 _minAmt,\n        uint256 i\n    ) internal virtual {\n        crvPool.remove_liquidity_one_coin(_lpAmount, SafeCast.toInt128(int256(i)), _minAmt);\n    }\n\n    function _withdrawAllAs(uint256 i) internal virtual {\n        uint256 lpAmt = IERC20(crvLp).balanceOf(address(this));\n        if (lpAmt != 0) {\n            crvPool.remove_liquidity_one_coin(lpAmt, SafeCast.toInt128(int256(i)), 0);\n        }\n    }\n\n    function calcWithdrawLpAs(uint256 _amtNeeded, uint256 i)\n        public\n        view\n        returns (uint256 lpToWithdraw, uint256 unstakeAmt)\n    {\n        uint256 lp = getLp();\n        uint256 tlp = totalLp();\n        lpToWithdraw = (_amtNeeded * tlp) / getLpValueAs(tlp, i);\n        lpToWithdraw = (lpToWithdraw > tlp) ? tlp : lpToWithdraw;\n        if (lpToWithdraw > lp) {\n            unstakeAmt = lpToWithdraw - lp;\n        }\n    }\n\n    function getLpValueAs(uint256 _lpAmount, uint256 i) public view virtual returns (uint256) {\n        return (_lpAmount != 0) ? crvPool.calc_withdraw_one_coin(_lpAmount, SafeCast.toInt128(int256(i))) : 0;\n    }\n\n    // While this is inaccurate in terms of slippage, this gives us the\n    // best estimate (least manipulatable value) to calculate share price\n    function getLpValue(uint256 _lpAmount) public view virtual returns (uint256) {\n        return (_lpAmount != 0) ? (crvPool.get_virtual_price() * _lpAmount) / 1e18 : 0;\n    }\n\n    function setCheckpoint() external {\n        _setCheckpoint();\n    }\n\n    // requires that gauge has approval for lp token\n    function _stakeAllLp() internal virtual {\n        uint256 balance = IERC20(crvLp).balanceOf(address(this));\n        if (balance != 0) {\n            ILiquidityGaugeV2(crvGauge).deposit(balance);\n        }\n    }\n\n    function _unstakeAllLp() internal virtual {\n        _unstakeLp(IERC20(crvGauge).balanceOf(address(this)));\n    }\n\n    function _unstakeLp(uint256 _amount) internal virtual {\n        if (_amount != 0) {\n            ILiquidityGaugeV2(crvGauge).withdraw(_amount);\n        }\n    }\n\n    function _claimRewards() internal virtual {\n        ITokenMinter(CRV_MINTER).mint(crvGauge);\n    }\n\n    function _setCheckpoint() internal virtual {\n        ILiquidityGaugeV2(crvGauge).user_checkpoint(address(this));\n    }\n\n    function totalStaked() public view virtual returns (uint256 total) {\n        total = IERC20(crvGauge).balanceOf(address(this));\n    }\n\n    function totalLp() public view virtual returns (uint256 total) {\n        total = getLp() + IERC20(crvGauge).balanceOf(address(this));\n    }\n\n    // Gets LP value not staked in gauge\n    function getLp() public view virtual returns (uint256 total) {\n        total = IERC20(crvLp).balanceOf(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "contracts/interfaces/curve/IStableSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* solhint-disable */\npragma solidity 0.8.3;\n\n// Not a complete interface, but should have what we need\ninterface IStableSwap {\n    function coins(uint256 i) external view returns (address);\n\n    function fee() external view returns (uint256); // fee * 1e10\n\n    function lp_token() external view returns (address);\n\n    function A() external view returns (uint256);\n\n    function A_precise() external view returns (uint256);\n\n    function balances(uint256 i) external view returns (uint256);\n\n    function get_virtual_price() external view returns (uint256);\n\n    function get_dy(\n        int128 i,\n        int128 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function exchange(\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external returns (uint256);\n\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\n\n    function remove_liquidity_one_coin(\n        uint256 _token_amount,\n        int128 i,\n        uint256 _min_amount\n    ) external;\n}\n\ninterface IStableSwapV2 {\n    function coins(int128 i) external view returns (address);\n}\n\ninterface IStableSwapUnderlying is IStableSwap {\n    function underlying_coins(uint256 i) external view returns (address);\n\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external;\n\n    function remove_liquidity_one_coin(\n        uint256 _token_amount,\n        int128 i,\n        uint256 _min_amount,\n        bool _use_underlying\n    ) external;\n}\n\ninterface IStableSwap2x is IStableSwap {\n    function calc_token_amount(uint256[2] memory _amounts, bool is_deposit) external view returns (uint256);\n\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external;\n\n    function remove_liquidity(uint256 _amount, uint256[2] memory _min_amounts) external;\n\n    function remove_liquidity_imbalance(uint256[2] memory _amounts, uint256 _max_burn_amount)\n        external\n        returns (uint256);\n}\n\ninterface IStableSwap3x is IStableSwap {\n    function calc_token_amount(uint256[3] memory _amounts, bool is_deposit) external view returns (uint256);\n\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external;\n\n    function remove_liquidity(uint256 _amount, uint256[3] memory _min_amounts) external;\n\n    function remove_liquidity_imbalance(uint256[3] memory _amounts, uint256 _max_burn_amount)\n        external\n        returns (uint256);\n}\n\ninterface IStableSwap4x is IStableSwap {\n    function calc_token_amount(uint256[4] memory _amounts, bool is_deposit) external view returns (uint256);\n\n    function add_liquidity(uint256[4] memory _amounts, uint256 _min_mint_amount) external;\n\n    function remove_liquidity(uint256 _amount, uint256[4] memory _min_amounts) external;\n\n    function remove_liquidity_imbalance(uint256[4] memory _amounts, uint256 _max_burn_amount)\n        external\n        returns (uint256);\n}\n\ninterface IStableSwap2xUnderlying is IStableSwap2x, IStableSwapUnderlying {\n    function add_liquidity(\n        uint256[2] calldata amounts,\n        uint256 min_mint_amount,\n        bool use_underlying\n    ) external;\n\n    function remove_liquidity_imbalance(\n        uint256[2] calldata amounts,\n        uint256 max_burn_amount,\n        bool use_underlying\n    ) external;\n\n    function remove_liquidity(\n        uint256 amount,\n        uint256[2] calldata min_amounts,\n        bool use_underlying\n    ) external;\n}\n\ninterface IStableSwap3xUnderlying is IStableSwap3x, IStableSwapUnderlying {\n    function add_liquidity(\n        uint256[3] calldata amounts,\n        uint256 min_mint_amount,\n        bool use_underlying\n    ) external;\n\n    function remove_liquidity_imbalance(\n        uint256[3] calldata amounts,\n        uint256 max_burn_amount,\n        bool use_underlying\n    ) external;\n\n    function remove_liquidity(\n        uint256 amount,\n        uint256[3] calldata min_amounts,\n        bool use_underlying\n    ) external;\n}\n\ninterface IStableSwap4xUnderlying is IStableSwap4x, IStableSwapUnderlying {\n    function add_liquidity(\n        uint256[4] calldata amounts,\n        uint256 min_mint_amount,\n        bool use_underlying\n    ) external;\n\n    function remove_liquidity_imbalance(\n        uint256[4] calldata amounts,\n        uint256 max_burn_amount,\n        bool use_underlying\n    ) external;\n\n    function remove_liquidity(\n        uint256 amount,\n        uint256[4] calldata min_amounts,\n        bool use_underlying\n    ) external;\n}\n\n/* solhint-enable */\n"
    },
    "contracts/interfaces/curve/ILiquidityGauge.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* solhint-disable */\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// Not a complete interface, but should have what we need\ninterface ILiquidityGaugeV2 is IERC20 {\n    function deposit(uint256 _value) external;\n\n    function deposit(uint256 _value, address addr) external;\n\n    function withdraw(uint256 _value) external;\n\n    function claim_rewards(address addr) external;\n\n    function claimable_tokens(address addr) external returns (uint256);\n\n    function claimable_reward(address, address) external returns (uint256);\n\n    function integrate_fraction(address addr) external view returns (uint256);\n\n    function user_checkpoint(address addr) external returns (bool);\n\n    function reward_integral(address) external view returns (uint256);\n\n    function reward_integral_for(address, address) external view returns (uint256);\n\n    function lp_token() external view returns (address);\n\n    function reward_count() external view returns (uint256);\n\n    function reward_tokens(uint256 _i) external view returns (address);\n}\n\ninterface ILiquidityGaugeV3 is ILiquidityGaugeV2 {\n    function claimable_reward(address addr, address token) external view override returns (uint256);\n}\n\n/* solhint-enable */\n"
    },
    "contracts/interfaces/curve/ITokenMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* solhint-disable */\npragma solidity 0.8.3;\n\n// Not a complete interface, but should have what we need\ninterface ITokenMinter {\n    function minted(address arg0, address arg1) external view returns (uint256);\n\n    function mint(address gauge_addr) external;\n}\n/* solhint-enable */\n"
    },
    "contracts/interfaces/curve/IMetapoolFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/* solhint-disable func-name-mixedcase*/\npragma solidity 0.8.3;\n\ninterface IMetapoolFactory {\n    function get_underlying_coins(address _pool) external view returns (address[8] memory _coins);\n\n    function get_underlying_decimals(address _pool) external view returns (uint256[8] memory _decimals);\n}\n"
    },
    "contracts/interfaces/curve/IDepositZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* solhint-disable */\npragma solidity 0.8.3;\n\ninterface IDepositZap4x {\n    function calc_token_amount(\n        address _pool,\n        uint256[4] memory _amounts,\n        bool is_deposit\n    ) external view returns (uint256);\n\n    function add_liquidity(\n        address _pool,\n        uint256[4] memory _amounts,\n        uint256 _min_mint_amount\n    ) external;\n\n    function remove_liquidity(\n        address _pool,\n        uint256 _amount,\n        uint256[4] memory _min_amounts\n    ) external;\n\n    function remove_liquidity_one_coin(\n        address _pool,\n        uint256 _token_amount,\n        int128 i,\n        uint256 _min_amount\n    ) external;\n\n    function calc_withdraw_one_coin(\n        address _pool,\n        uint256 _token_amount,\n        int128 i\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/strategies/curve/a3Pool/CrvA3PoolStrategyBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../../interfaces/vesper/IVesperPool.sol\";\nimport \"../../../interfaces/aave/IAave.sol\";\nimport \"../../Strategy.sol\";\nimport \"../CrvPoolStrategyBase.sol\";\n\n/// @title This strategy will deposit collateral token in Curve Aave 3Pool and earn interest.\nabstract contract CrvA3PoolStrategyBase is CrvPoolStrategyBase {\n    using SafeERC20 for IERC20;\n    uint256 internal constant N = 3;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _crvPool,\n        address _lp,\n        address _gauge,\n        uint256 _collateralIdx,\n        string memory _name\n    ) CrvPoolStrategyBase(_pool, _crvPool, _lp, _gauge, _swapManager, _collateralIdx, N, _name) {\n        require(IStableSwap3xUnderlying(_crvPool).lp_token() == _lp, \"receipt-token-mismatch\");\n    }\n\n    function _init(address _crvPool, uint256 _n) internal virtual override {\n        address[] memory _coins = new address[](_n);\n        uint256[] memory _coinDecimals = new uint256[](_n);\n        for (uint256 i = 0; i < _n; i++) {\n            _coins[i] = IStableSwap3xUnderlying(_crvPool).underlying_coins(i);\n            _coinDecimals[i] = IERC20Metadata(_coins[i]).decimals();\n        }\n        coins = _coins;\n        coinDecimals = _coinDecimals;\n    }\n\n    function _claimRewards() internal virtual override {\n        ITokenMinter(CRV_MINTER).mint(crvGauge);\n        ILiquidityGaugeV2(crvGauge).claim_rewards(address(this));\n    }\n\n    function _depositToCurve(uint256 _amt) internal override returns (bool) {\n        if (_amt != 0) {\n            uint256[3] memory _depositAmounts;\n            _depositAmounts[collIdx] = _amt;\n            uint256 _expectedOut =\n                _calcAmtOutAfterSlippage(\n                    IStableSwap3xUnderlying(address(crvPool)).calc_token_amount(_depositAmounts, true),\n                    crvSlippage\n                );\n            uint256 _minLpAmount =\n                ((_amt * _getSafeUsdRate()) / crvPool.get_virtual_price()) * 10**(18 - coinDecimals[collIdx]);\n            if (_expectedOut > _minLpAmount) _minLpAmount = _expectedOut;\n            // solhint-disable no-empty-blocks\n            try\n                IStableSwap3xUnderlying(address(crvPool)).add_liquidity(_depositAmounts, _minLpAmount, true)\n            {} catch Error(string memory reason) {\n                emit DepositFailed(reason);\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function _withdrawAsFromCrvPool(\n        uint256 _lpAmount,\n        uint256 _minAmt,\n        uint256 i\n    ) internal override {\n        crvPool.remove_liquidity_one_coin(_lpAmount, SafeCast.toInt128(int256(i)), _minAmt, true);\n    }\n\n    function _withdrawAllAs(uint256 i) internal override {\n        uint256 lpAmt = IERC20(crvLp).balanceOf(address(this));\n        if (lpAmt != 0) {\n            crvPool.remove_liquidity_one_coin(lpAmt, SafeCast.toInt128(int256(i)), 0, true);\n        }\n    }\n}\n"
    },
    "contracts/strategies/curve/a3Pool/CrvA3PoolStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../../interfaces/vesper/IVesperPool.sol\";\nimport \"../../../interfaces/aave/IAave.sol\";\nimport \"../../Strategy.sol\";\nimport \"./CrvA3PoolStrategyBase.sol\";\n\n/// @title This strategy will deposit collateral token in Curve Aave 3Pool and earn interest.\ncontract CrvA3PoolStrategy is CrvA3PoolStrategyBase {\n    using SafeERC20 for IERC20;\n    address private constant CRV_POOL = 0xDeBF20617708857ebe4F679508E7b7863a8A8EeE;\n    address private constant LP = 0xFd2a8fA60Abd58Efe3EeE34dd494cD491dC14900;\n    address private constant GAUGE = 0xd662908ADA2Ea1916B3318327A97eB18aD588b5d;\n    address private constant STKAAVE = 0x4da27a545c0c5B758a6BA100e3a049001de870f5;\n    address private constant AAVE = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        uint256 _collateralIdx,\n        string memory _name\n    ) CrvA3PoolStrategyBase(_pool, _swapManager, CRV_POOL, LP, GAUGE, _collateralIdx, _name) {\n        reservedToken[AAVE] = true;\n        reservedToken[STKAAVE] = true;\n    }\n\n    function canStartCooldown() public view returns (bool) {\n        (uint256 _cooldownStart, , uint256 _unstakeEnd) = cooldownData();\n        return _canStartCooldown(_cooldownStart, _unstakeEnd);\n    }\n\n    function canUnstake() external view returns (bool) {\n        (, uint256 _cooldownEnd, uint256 _unstakeEnd) = cooldownData();\n        return _canUnstake(_cooldownEnd, _unstakeEnd);\n    }\n\n    function cooldownData()\n        public\n        view\n        returns (\n            uint256 _cooldownStart,\n            uint256 _cooldownEnd,\n            uint256 _unstakeEnd\n        )\n    {\n        _cooldownStart = StakedAave(STKAAVE).stakersCooldowns(address(this));\n        _cooldownEnd = _cooldownStart + StakedAave(STKAAVE).COOLDOWN_SECONDS();\n        _unstakeEnd = _cooldownEnd + StakedAave(STKAAVE).UNSTAKE_WINDOW();\n    }\n\n    function _claimAave() internal returns (uint256) {\n        (uint256 _cooldownStart, uint256 _cooldownEnd, uint256 _unstakeEnd) = cooldownData();\n        if (_canUnstake(_cooldownEnd, _unstakeEnd)) {\n            StakedAave(STKAAVE).redeem(address(this), MAX_UINT_VALUE);\n        } else if (_canStartCooldown(_cooldownStart, _unstakeEnd)) {\n            StakedAave(STKAAVE).cooldown();\n        }\n        StakedAave(STKAAVE).claimRewards(address(this), MAX_UINT_VALUE);\n        return IERC20(AAVE).balanceOf(address(this));\n    }\n\n    function _canUnstake(uint256 _cooldownEnd, uint256 _unstakeEnd) internal view returns (bool) {\n        return block.timestamp > _cooldownEnd && block.timestamp <= _unstakeEnd;\n    }\n\n    function _canStartCooldown(uint256 _cooldownStart, uint256 _unstakeEnd) internal view returns (bool) {\n        return\n            StakedAave(STKAAVE).balanceOf(address(this)) != 0 && (_cooldownStart == 0 || block.timestamp > _unstakeEnd);\n    }\n}\n"
    },
    "contracts/strategies/rari-fuse/RariCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../../interfaces/aave/IAave.sol\";\nimport \"../../interfaces/rari-fuse/IComptroller.sol\";\nimport \"../compound/CompoundStrategy.sol\";\nimport \"../../interfaces/rari-fuse/IFusePoolDirectory.sol\";\n\n/// @title This library provide core operations for Rari\nlibrary RariCore {\n    /**\n     * @notice Gets Comptroller\n     * @param _fusePoolDir address of the Fuse Pool Directory\n     * @param _fusePoolId Fuse Pool ID\n     */\n    function getComptroller(IFusePoolDirectory _fusePoolDir, uint256 _fusePoolId)\n        internal\n        view\n        returns (address _comptroller)\n    {\n        (, , _comptroller, , ) = _fusePoolDir.pools(_fusePoolId);\n    }\n\n    /**\n     * @notice Gets the cToken to mint for a Fuse Pool\n     * @param _fusePoolDir address of the Fuse Pool Directory\n     * @param _fusePoolId Fuse Pool ID\n     * @param _collateralToken address of the collateralToken\n     */\n    function getCTokenByUnderlying(\n        IFusePoolDirectory _fusePoolDir,\n        uint256 _fusePoolId,\n        address _collateralToken\n    ) internal view returns (address _cToken) {\n        address _comptroller = getComptroller(_fusePoolDir, _fusePoolId);\n        require(_comptroller != address(0), \"rari-fuse-invalid-comptroller\");\n        _cToken = IComptroller(_comptroller).cTokensByUnderlying(_collateralToken);\n        require(_cToken != address(0), \"rari-fuse-invalid-ctoken\");\n    }\n\n    /**\n     * @notice Automatically finds rewardToken set for the current Fuse Pool\n     * @param _fusePoolDir address of the Fuse Pool Directory\n     * @param _fusePoolId Fuse Pool ID\n     */\n    function getRewardToken(IFusePoolDirectory _fusePoolDir, uint256 _fusePoolId)\n        internal\n        view\n        returns (address _rewardDistributor, address _rewardToken)\n    {\n        uint256 _success;\n        address _comptroller = getComptroller(_fusePoolDir, _fusePoolId);\n        bytes4 _selector = IComptroller(_comptroller).rewardsDistributors.selector;\n\n        // Low level static call to prevent revert in case the Comptroller doesn't have\n        // rewardsDistributors function exposed\n        // which may happen to older Fuse Pools\n\n        assembly {\n            let x := mload(0x40) // Find empty storage location using \"free memory pointer\"\n            mstore(x, _selector) // Place signature at beginning of empty storage\n            mstore(add(x, 0x04), 0) // Place first argument directly next to signature\n\n            _success := staticcall(\n                30000, // 30k gas\n                _comptroller, // To addr\n                x, // Inputs are stored at location x\n                0x24, // Inputs are 36 bytes long\n                x, // Store output over input (saves space)\n                0x20\n            ) // Outputs are 32 bytes long\n\n            _rewardDistributor := mload(x) // Load the result\n        }\n        if (_rewardDistributor != address(0)) {\n            _rewardToken = IRariRewardDistributor(_rewardDistributor).rewardToken();\n        }\n    }\n}\n"
    },
    "contracts/interfaces/rari-fuse/IComptroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\ninterface IComptroller {\n    function cTokensByUnderlying(address) external view returns (address cToken);\n\n    function rewardsDistributors(uint256 index) external view returns (address);\n\n    function markets(address market) external view returns (bool isListed, uint256 collateralFactorMantissa);\n}\n\ninterface IRariRewardDistributor {\n    function rewardToken() external view returns (address);\n\n    function compAccrued(address holder) external view returns (uint256);\n\n    function claimRewards(address holder) external;\n\n    function getAllMarkets() external view returns (address[] calldata);\n}\n"
    },
    "contracts/strategies/compound/CompoundStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../Strategy.sol\";\nimport \"../../interfaces/compound/ICompound.sol\";\n\n/// @title This strategy will deposit collateral token in Compound and earn interest.\ncontract CompoundStrategy is Strategy {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"4.0.0\";\n\n    CToken internal cToken;\n\n    // solhint-disable-next-line var-name-mixedcase\n    Comptroller public immutable COMPTROLLER;\n    address public rewardToken;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _comptroller,\n        address _rewardToken,\n        address _receiptToken,\n        string memory _name\n    ) Strategy(_pool, _swapManager, _receiptToken) {\n        require(_receiptToken != address(0), \"cToken-address-is-zero\");\n        cToken = CToken(_receiptToken);\n        swapSlippage = 10000; // disable oracles on reward swaps by default\n        NAME = _name;\n\n        // Either can be address(0), for example in Rari Strategy\n        COMPTROLLER = Comptroller(_comptroller);\n        rewardToken = _rewardToken;\n    }\n\n    /**\n     * @notice Calculate total value using COMP accrued and cToken\n     * @dev Report total value in collateral token\n     */\n    function totalValue() public view virtual override returns (uint256 _totalValue) {\n        _totalValue = _calculateTotalValue((rewardToken != address(0)) ? _getRewardAccrued() : 0);\n    }\n\n    function totalValueCurrent() public virtual override returns (uint256 _totalValue) {\n        if (rewardToken != address(0)) {\n            _claimRewards();\n            _totalValue = _calculateTotalValue(IERC20(rewardToken).balanceOf(address(this)));\n        } else {\n            _totalValue = _calculateTotalValue(0);\n        }\n    }\n\n    function _calculateTotalValue(uint256 _rewardAccrued) internal view returns (uint256 _totalValue) {\n        if (_rewardAccrued != 0) {\n            (, _totalValue) = swapManager.bestPathFixedInput(rewardToken, address(collateralToken), _rewardAccrued, 0);\n        }\n        _totalValue += _convertToCollateral(cToken.balanceOf(address(this)));\n    }\n\n    function isReservedToken(address _token) public view virtual override returns (bool) {\n        return _token == address(cToken) || _token == rewardToken;\n    }\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override {\n        collateralToken.safeApprove(pool, _amount);\n        collateralToken.safeApprove(address(cToken), _amount);\n        if (rewardToken != address(0)) {\n            for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n                IERC20(rewardToken).safeApprove(address(swapManager.ROUTERS(i)), _amount);\n            }\n        }\n    }\n\n    //solhint-disable-next-line no-empty-blocks\n    function _beforeMigration(address _newStrategy) internal virtual override {}\n\n    /// @notice Claim comp\n    function _claimRewards() internal virtual {\n        address[] memory _markets = new address[](1);\n        _markets[0] = address(cToken);\n        COMPTROLLER.claimComp(address(this), _markets);\n    }\n\n    function _getRewardAccrued() internal view virtual returns (uint256 _rewardAccrued) {\n        _rewardAccrued = COMPTROLLER.compAccrued(address(this));\n    }\n\n    /// @notice Claim COMP and convert COMP into collateral token.\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\n        if (rewardToken != address(0)) {\n            _claimRewards();\n            uint256 _rewardAmount = IERC20(rewardToken).balanceOf(address(this));\n            if (_rewardAmount != 0) {\n                uint256 minAmtOut =\n                    (swapSlippage != 10000)\n                        ? _calcAmtOutAfterSlippage(\n                            _getOracleRate(_simpleOraclePath(rewardToken, _toToken), _rewardAmount),\n                            swapSlippage\n                        )\n                        : 1;\n                _safeSwap(rewardToken, _toToken, _rewardAmount, minAmtOut);\n            }\n        }\n    }\n\n    /// @notice Withdraw collateral to payback excess debt\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {\n        if (_excessDebt != 0) {\n            _payback = _safeWithdraw(_excessDebt);\n        }\n    }\n\n    /**\n     * @notice Calculate earning and withdraw it from Compound.\n     * @dev Claim COMP and convert into collateral\n     * @dev If somehow we got some collateral token in strategy then we want to\n     *  include those in profit. That's why we used 'return' outside 'if' condition.\n     * @param _totalDebt Total collateral debt of this strategy\n     * @return profit in collateral token\n     */\n    function _realizeProfit(uint256 _totalDebt) internal virtual override returns (uint256) {\n        _claimRewardsAndConvertTo(address(collateralToken));\n        uint256 _collateralBalance = _convertToCollateral(cToken.balanceOf(address(this)));\n        if (_collateralBalance > _totalDebt) {\n            _withdrawHere(_collateralBalance - _totalDebt);\n        }\n        return collateralToken.balanceOf(address(this));\n    }\n\n    /**\n     * @notice Calculate realized loss.\n     * @return _loss Realized loss in collateral token\n     */\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {\n        uint256 _collateralBalance = _convertToCollateral(cToken.balanceOf(address(this)));\n        if (_collateralBalance < _totalDebt) {\n            _loss = _totalDebt - _collateralBalance;\n        }\n    }\n\n    /// @notice Deposit collateral in Compound\n    function _reinvest() internal virtual override {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n        if (_collateralBalance != 0) {\n            require(cToken.mint(_collateralBalance) == 0, \"deposit-to-compound-failed\");\n        }\n    }\n\n    /// @dev Withdraw collateral and transfer it to pool\n    function _withdraw(uint256 _amount) internal override {\n        _safeWithdraw(_amount);\n        collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Safe withdraw will make sure to check asking amount against available amount.\n     * @param _amount Amount of collateral to withdraw.\n     * @return Actual collateral withdrawn\n     */\n    function _safeWithdraw(uint256 _amount) internal returns (uint256) {\n        uint256 _collateralBalance = _convertToCollateral(cToken.balanceOf(address(this)));\n        // Get available liquidity from Compound\n        uint256 _availableLiquidity = cToken.getCash();\n        // Get minimum of _amount and _avaialbleLiquidity\n        uint256 _withdrawAmount = _amount < _availableLiquidity ? _amount : _availableLiquidity;\n        // Get minimum of _withdrawAmount and _collateralBalance\n        return _withdrawHere(_withdrawAmount < _collateralBalance ? _withdrawAmount : _collateralBalance);\n    }\n\n    /// @dev Withdraw collateral here. Do not transfer to pool\n    function _withdrawHere(uint256 _amount) internal returns (uint256) {\n        if (_amount != 0) {\n            require(cToken.redeemUnderlying(_amount) == 0, \"withdraw-from-compound-failed\");\n            _afterRedeem();\n        }\n        return _amount;\n    }\n\n    function _setupOracles() internal virtual override {\n        if (rewardToken != address(0))\n            swapManager.createOrUpdateOracle(rewardToken, WETH, oraclePeriod, oracleRouterIdx);\n        if (address(collateralToken) != WETH) {\n            swapManager.createOrUpdateOracle(WETH, address(collateralToken), oraclePeriod, oracleRouterIdx);\n        }\n    }\n\n    /**\n     * @dev Compound support ETH as collateral not WETH. This hook will take\n     * care of conversion from WETH to ETH and vice versa.\n     * @dev This will be used in ETH strategy only, hence empty implementation\n     */\n    //solhint-disable-next-line no-empty-blocks\n    function _afterRedeem() internal virtual {}\n\n    function _convertToCollateral(uint256 _cTokenAmount) internal view returns (uint256) {\n        return (_cTokenAmount * cToken.exchangeRateStored()) / 1e18;\n    }\n}\n"
    },
    "contracts/interfaces/rari-fuse/IFusePoolDirectory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\ninterface IFusePoolDirectory {\n    function pools(uint256)\n        external\n        view\n        returns (\n            string memory name,\n            address creator,\n            address comptroller,\n            uint256 blockPosted,\n            uint256 timestampPosted\n        );\n}\n"
    },
    "contracts/strategies/rari-fuse/RariFuseLeverageStrategy.sol": {
      "content": "// SPDX-License-Identifier: GNU LGPLv3\n\npragma solidity 0.8.3;\n\nimport \"../Strategy.sol\";\nimport \"./RariCore.sol\";\nimport \"../compound/CompoundLeverageStrategy.sol\";\n\n/// @title This strategy will deposit collateral token in Compound and based on position\n/// it will borrow same collateral token. It will use borrowed asset as supply and borrow again.\ncontract RariFuseLeverageStrategy is CompoundLeverageStrategy {\n    using SafeERC20 for IERC20;\n    using RariCore for IFusePoolDirectory;\n    uint256 public immutable fusePoolId;\n    IFusePoolDirectory public immutable fusePoolDirectory;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _aaveAddressesProvider,\n        uint256 _fusePoolId,\n        IFusePoolDirectory _fusePoolDirectory,\n        string memory _name\n    )\n        CompoundLeverageStrategy(\n            _pool,\n            _swapManager,\n            _fusePoolDirectory.getComptroller(_fusePoolId),\n            address(0), // rewardsDistributor\n            address(0), // rewardToken\n            _aaveAddressesProvider,\n            _fusePoolDirectory.getCTokenByUnderlying(_fusePoolId, address(IVesperPool(_pool).token())),\n            _name\n        )\n    {\n        fusePoolId = _fusePoolId;\n        fusePoolDirectory = _fusePoolDirectory;\n        // Find and set the rewardToken from the fuse pool data\n        (rewardDistributor, rewardToken) = _fusePoolDirectory.getRewardToken(_fusePoolId);\n    }\n\n    /// @notice Claim rewards from Fuse Pool' rewardDistributor\n    function _claimRewards() internal virtual override {\n        IRariRewardDistributor(rewardDistributor).claimRewards(address(this));\n    }\n\n    /// @notice Get rewards accrued in Fuse Pool' rewardDistributor\n    function _getRewardAccrued() internal view virtual override returns (uint256 _rewardAccrued) {\n        _rewardAccrued = IRariRewardDistributor(rewardDistributor).compAccrued(address(this));\n    }\n\n    /**\n     * @notice Get Collateral Factor\n     */\n    function _getCollateralFactor() internal view virtual override returns (uint256 _collateralFactor) {\n        (, _collateralFactor) = IComptroller(fusePoolDirectory.getComptroller(fusePoolId)).markets(address(cToken));\n        // Take 95% of collateralFactor to avoid any rounding issue.\n        _collateralFactor = (_collateralFactor * 95) / 100;\n    }\n}\n"
    },
    "contracts/strategies/compound/CompoundLeverageStrategy.sol": {
      "content": "// SPDX-License-Identifier: GNU LGPLv3\n// Heavily inspired from CompoundLeverage strategy of Yearn. https://etherscan.io/address/0x4031afd3B0F71Bace9181E554A9E680Ee4AbE7dF#code\n\npragma solidity 0.8.3;\n\nimport \"../Strategy.sol\";\nimport \"../../interfaces/compound/ICompound.sol\";\nimport \"../../interfaces/oracle/IUniswapV3Oracle.sol\";\nimport \"../../FlashLoanHelper.sol\";\n\n/// @title This strategy will deposit collateral token in Compound and based on position\n/// it will borrow same collateral token. It will use borrowed asset as supply and borrow again.\ncontract CompoundLeverageStrategy is Strategy, FlashLoanHelper {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"4.0.0\";\n\n    uint256 internal constant MAX_BPS = 10_000; //100%\n    uint256 public minBorrowRatio = 5_000; // 50%\n    uint256 public maxBorrowRatio = 6_000; // 60%\n    CToken internal cToken;\n    IUniswapV3Oracle internal constant ORACLE = IUniswapV3Oracle(0x0F1f5A87f99f0918e6C81F16E59F3518698221Ff);\n    uint32 internal constant TWAP_PERIOD = 3600;\n\n    // Below can be address(0), for example in Rari Strategy\n    Comptroller public immutable comptroller;\n    address public rewardToken;\n    address public rewardDistributor;\n\n    event UpdatedBorrowRatio(\n        uint256 previousMinBorrowRatio,\n        uint256 newMinBorrowRatio,\n        uint256 previousMaxBorrowRatio,\n        uint256 newMaxBorrowRatio\n    );\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _comptroller,\n        address _rewardDistributor,\n        address _rewardToken,\n        address _aaveAddressesProvider,\n        address _receiptToken,\n        string memory _name\n    ) Strategy(_pool, _swapManager, _receiptToken) FlashLoanHelper(_aaveAddressesProvider) {\n        NAME = _name;\n        require(_comptroller != address(0), \"comptroller-address-is-zero\");\n        comptroller = Comptroller(_comptroller);\n        rewardToken = _rewardToken;\n\n        require(_receiptToken != address(0), \"cToken-address-is-zero\");\n        cToken = CToken(_receiptToken);\n\n        rewardDistributor = _rewardDistributor;\n    }\n\n    /**\n     * @notice Update upper and lower borrow ratio\n     * @dev It is possible to set 0 as _minBorrowRatio to not borrow anything\n     * @param _minBorrowRatio Minimum % we want to borrow\n     * @param _maxBorrowRatio Maximum % we want to borrow\n     */\n    function updateBorrowRatio(uint256 _minBorrowRatio, uint256 _maxBorrowRatio) external onlyGovernor {\n        uint256 _collateralFactor = _getCollateralFactor();\n        require(_maxBorrowRatio < (_collateralFactor / 1e14), \"invalid-max-borrow-limit\");\n        require(_maxBorrowRatio > _minBorrowRatio, \"max-should-be-higher-than-min\");\n        emit UpdatedBorrowRatio(minBorrowRatio, _minBorrowRatio, maxBorrowRatio, _maxBorrowRatio);\n        minBorrowRatio = _minBorrowRatio;\n        maxBorrowRatio = _maxBorrowRatio;\n    }\n\n    function updateAaveStatus(bool _status) external onlyGovernor {\n        _updateAaveStatus(_status);\n    }\n\n    function updateDyDxStatus(bool _status) external virtual onlyGovernor {\n        _updateDyDxStatus(_status, address(collateralToken));\n    }\n\n    /**\n     * @notice Get Collateral Factor\n     */\n    function _getCollateralFactor() internal view virtual returns (uint256 _collateralFactor) {\n        (, _collateralFactor, ) = comptroller.markets(address(cToken));\n        // Take 95% of collateralFactor to avoid any rounding issue.\n        _collateralFactor = (_collateralFactor * 95) / 100;\n    }\n\n    /**\n     * @notice Calculate total value based on rewardToken claimed, supply and borrow position\n     * @dev Report total value in collateral token\n     * @dev Claimed rewardToken will stay in strategy until next rebalance\n     */\n    function totalValueCurrent() public override returns (uint256 _totalValue) {\n        cToken.exchangeRateCurrent();\n        _claimRewards();\n\n        _totalValue = _calculateTotalValue(IERC20(rewardToken).balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Current borrow ratio, calculated as current borrow divide by max allowed borrow\n     * Return value is based on basis points, i.e. 7500 = 75% ratio\n     */\n    function currentBorrowRatio() external view returns (uint256) {\n        (uint256 _supply, uint256 _borrow) = getPosition();\n        return _borrow == 0 ? 0 : (_borrow * MAX_BPS) / _supply;\n    }\n\n    /**\n     * @notice Calculate total value using rewardToken accrued, supply and borrow position\n     * @dev Compound calculate rewardToken accrued and store it when user interact with\n     * Compound contracts, i.e. deposit, withdraw or transfer tokens.\n     * So compAccrued() will return stored rewardToken accrued amount, which is older\n     * @dev For up to date value check totalValueCurrent()\n     */\n    function totalValue() public view virtual override returns (uint256 _totalValue) {\n        _totalValue = _calculateTotalValue(_getRewardAccrued());\n    }\n\n    /**\n     * @notice Calculate current position using claimed rewardToken and current borrow.\n     */\n    function isLossMaking() external returns (bool) {\n        // It's loss making if _totalValue < totalDebt\n        return totalValueCurrent() < IVesperPool(pool).totalDebtOf(address(this));\n    }\n\n    function isReservedToken(address _token) public view virtual override returns (bool) {\n        return _token == address(cToken) || _token == rewardToken || _token == address(collateralToken);\n    }\n\n    /// @notice Return supply and borrow position. Position may return few block old value\n    function getPosition() public view returns (uint256 _supply, uint256 _borrow) {\n        (, uint256 _cTokenBalance, uint256 _borrowBalance, uint256 _exchangeRate) =\n            cToken.getAccountSnapshot(address(this));\n        _supply = (_cTokenBalance * _exchangeRate) / 1e18;\n        _borrow = _borrowBalance;\n    }\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override {\n        collateralToken.safeApprove(pool, _amount);\n        collateralToken.safeApprove(address(cToken), _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            IERC20(rewardToken).safeApprove(address(swapManager.ROUTERS(i)), _amount);\n        }\n        FlashLoanHelper._approveToken(address(collateralToken), _amount);\n    }\n\n    /**\n     * @notice Claim rewardToken and transfer to new strategy\n     * @param _newStrategy Address of new strategy.\n     */\n    function _beforeMigration(address _newStrategy) internal virtual override {\n        require(IStrategy(_newStrategy).token() == address(cToken), \"wrong-receipt-token\");\n        minBorrowRatio = 0;\n        // It will calculate amount to repay based on borrow limit and payback all\n        _reinvest();\n    }\n\n    /**\n     * @notice Calculate borrow position based on borrow ratio, current supply, borrow, amount\n     * being deposited or withdrawn.\n     * @param _amount Collateral amount\n     * @param _isDeposit Flag indicating whether we are depositing _amount or withdrawing\n     * @return _position Amount of borrow that need to be adjusted\n     * @return _shouldRepay Flag indicating whether _position is borrow amount or repay amount\n     */\n    function _calculateDesiredPosition(uint256 _amount, bool _isDeposit)\n        internal\n        returns (uint256 _position, bool _shouldRepay)\n    {\n        uint256 _totalSupply = cToken.balanceOfUnderlying(address(this));\n        uint256 _currentBorrow = cToken.borrowBalanceStored(address(this));\n        // If minimum borrow limit set to 0 then repay borrow\n        if (minBorrowRatio == 0) {\n            return (_currentBorrow, true);\n        }\n\n        uint256 _supply = _totalSupply - _currentBorrow;\n\n        // In case of withdraw, _amount can be greater than _supply\n        uint256 _newSupply = _isDeposit ? _supply + _amount : _supply > _amount ? _supply - _amount : 0;\n\n        // (supply * borrowRatio)/(BPS - borrowRatio)\n        uint256 _borrowUpperBound = (_newSupply * maxBorrowRatio) / (MAX_BPS - maxBorrowRatio);\n        uint256 _borrowLowerBound = (_newSupply * minBorrowRatio) / (MAX_BPS - minBorrowRatio);\n\n        // If our current borrow is greater than max borrow allowed, then we will have to repay\n        // some to achieve safe position else borrow more.\n        if (_currentBorrow > _borrowUpperBound) {\n            _shouldRepay = true;\n            // If borrow > upperBound then it is greater than lowerBound too.\n            _position = _currentBorrow - _borrowLowerBound;\n        } else if (_currentBorrow < _borrowLowerBound) {\n            _shouldRepay = false;\n            // We can borrow more.\n            _position = _borrowLowerBound - _currentBorrow;\n        }\n    }\n\n    /// @notice Get main Rewards accrued\n    function _getRewardAccrued() internal view virtual returns (uint256 _rewardAccrued) {\n        _rewardAccrued = comptroller.compAccrued(address(this));\n    }\n\n    /**\n     * @dev rewardToken is converted to collateral and if we have some borrow interest to pay,\n     * it will go come from collateral.\n     * @dev Report total value in collateral token\n     */\n    function _calculateTotalValue(uint256 _rewardAccrued) internal view returns (uint256 _totalValue) {\n        uint256 _compAsCollateral;\n        if (_rewardAccrued != 0) {\n            (, _compAsCollateral, ) = swapManager.bestOutputFixedInput(\n                rewardToken,\n                address(collateralToken),\n                _rewardAccrued\n            );\n        }\n        (uint256 _supply, uint256 _borrow) = getPosition();\n        _totalValue = _compAsCollateral + collateralToken.balanceOf(address(this)) + _supply - _borrow;\n    }\n\n    /// @notice Claim comp\n    function _claimRewards() internal virtual {\n        address[] memory _markets = new address[](1);\n        _markets[0] = address(cToken);\n        comptroller.claimComp(address(this), _markets);\n    }\n\n    /// @notice Claim rewardToken and convert rewardToken into collateral token.\n    function _claimRewardsAndConvertTo(address _toToken) internal override {\n        _claimRewards();\n        uint256 _rewardAmount = IERC20(rewardToken).balanceOf(address(this));\n        if (_rewardAmount != 0) {\n            _safeSwap(rewardToken, _toToken, _rewardAmount);\n        }\n    }\n\n    /**\n     * @notice Generate report for pools accounting and also send profit and any payback to pool.\n     * @dev Claim rewardToken and convert to collateral.\n     */\n    function _generateReport()\n        internal\n        override\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _payback\n        )\n    {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        (, , , , uint256 _totalDebt, , , uint256 _debtRatio) = IVesperPool(pool).strategy(address(this));\n\n        // Claim rewardToken and convert to collateral token\n        _claimRewardsAndConvertTo(address(collateralToken));\n\n        uint256 _supply = cToken.balanceOfUnderlying(address(this));\n        uint256 _borrow = cToken.borrowBalanceStored(address(this));\n        uint256 _investedCollateral = _supply - _borrow;\n\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        uint256 _totalCollateral = _investedCollateral + _collateralHere;\n\n        uint256 _profitToWithdraw;\n\n        if (_totalCollateral > _totalDebt) {\n            _profit = _totalCollateral - _totalDebt;\n            if (_collateralHere <= _profit) {\n                _profitToWithdraw = _profit - _collateralHere;\n            } else if (_collateralHere >= (_profit + _excessDebt)) {\n                _payback = _excessDebt;\n            } else {\n                // _profit < CollateralHere < _profit + _excessDebt\n                _payback = _collateralHere - _profit;\n            }\n        } else {\n            _loss = _totalDebt - _totalCollateral;\n        }\n\n        uint256 _paybackToWithdraw = _excessDebt - _payback;\n        uint256 _totalAmountToWithdraw = _paybackToWithdraw + _profitToWithdraw;\n        if (_totalAmountToWithdraw != 0) {\n            uint256 _withdrawn = _withdrawHere(_totalAmountToWithdraw);\n            // Any amount withdrawn over _profitToWithdraw is payback for pool\n            if (_withdrawn > _profitToWithdraw) {\n                _payback += (_withdrawn - _profitToWithdraw);\n            }\n        }\n\n        // Handle scenario if debtRatio is zero and some supply left.\n        // Remaining tokens, after payback withdrawal, are profit\n        (_supply, _borrow) = getPosition();\n        if (_debtRatio == 0 && _supply != 0 && _borrow == 0) {\n            // This will redeem all cTokens this strategy has\n            _redeemUnderlying(MAX_UINT_VALUE);\n            _profit += _supply;\n        }\n    }\n\n    /**\n     *  Adjust position by normal leverage and deleverage.\n     * @param _adjustBy Amount by which we want to increase or decrease _borrow\n     * @param _shouldRepay True indicate we want to deleverage\n     * @return amount Actual adjusted amount\n     */\n    function _adjustPosition(uint256 _adjustBy, bool _shouldRepay) internal returns (uint256 amount) {\n        // We can get position via view function, as this function will be called after _calculateDesiredPosition\n        (uint256 _supply, uint256 _borrow) = getPosition();\n\n        // If no borrow then there is nothing to deleverage\n        if (_borrow == 0 && _shouldRepay) {\n            return 0;\n        }\n\n        uint256 collateralFactor = _getCollateralFactor();\n\n        if (_shouldRepay) {\n            amount = _normalDeleverage(_adjustBy, _supply, _borrow, collateralFactor);\n        } else {\n            amount = _normalLeverage(_adjustBy, _supply, _borrow, collateralFactor);\n        }\n    }\n\n    /**\n     * Deleverage: Reduce borrow to achieve safe position\n     * @param _maxDeleverage Reduce borrow by this amount\n     * @return _deleveragedAmount Amount we actually reduced\n     */\n    function _normalDeleverage(\n        uint256 _maxDeleverage,\n        uint256 _supply,\n        uint256 _borrow,\n        uint256 _collateralFactor\n    ) internal returns (uint256 _deleveragedAmount) {\n        uint256 _theoreticalSupply;\n\n        if (_collateralFactor != 0) {\n            // Calculate minimum supply required to support _borrow\n            _theoreticalSupply = (_borrow * 1e18) / _collateralFactor;\n        }\n\n        _deleveragedAmount = _supply - _theoreticalSupply;\n\n        if (_deleveragedAmount >= _borrow) {\n            _deleveragedAmount = _borrow;\n        }\n        if (_deleveragedAmount >= _maxDeleverage) {\n            _deleveragedAmount = _maxDeleverage;\n        }\n\n        _redeemUnderlying(_deleveragedAmount);\n        _repayBorrow(_deleveragedAmount);\n    }\n\n    /**\n     * Leverage: Borrow more\n     * @param _maxLeverage Max amount to borrow\n     * @return _leveragedAmount Amount we actually borrowed\n     */\n    function _normalLeverage(\n        uint256 _maxLeverage,\n        uint256 _supply,\n        uint256 _borrow,\n        uint256 _collateralFactor\n    ) internal returns (uint256 _leveragedAmount) {\n        // Calculate maximum we can borrow at current _supply\n        uint256 theoreticalBorrow = (_supply * _collateralFactor) / 1e18;\n\n        _leveragedAmount = theoreticalBorrow - _borrow;\n\n        if (_leveragedAmount >= _maxLeverage) {\n            _leveragedAmount = _maxLeverage;\n        }\n        _borrowCollateral(_leveragedAmount);\n        _mint(collateralToken.balanceOf(address(this)));\n    }\n\n    /// @notice Deposit collateral in Compound and adjust borrow position\n    function _reinvest() internal virtual override {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n        (uint256 _position, bool _shouldRepay) = _calculateDesiredPosition(_collateralBalance, true);\n        // Supply collateral to compound.\n        _mint(_collateralBalance);\n\n        // During reinvest, _shouldRepay will be false which indicate that we will borrow more.\n        _position -= _doFlashLoan(_position, _shouldRepay);\n\n        uint256 i = 0;\n        while (_position > 0 && i <= 6) {\n            _position -= _adjustPosition(_position, _shouldRepay);\n            i++;\n        }\n    }\n\n    /// @dev Withdraw collateral and transfer it to pool\n    function _withdraw(uint256 _amount) internal override {\n        collateralToken.safeTransfer(pool, _withdrawHere(_amount));\n    }\n\n    /// @dev Withdraw collateral here. Do not transfer to pool\n    function _withdrawHere(uint256 _amount) internal returns (uint256) {\n        (uint256 _position, bool _shouldRepay) = _calculateDesiredPosition(_amount, false);\n        if (_shouldRepay) {\n            // Do deleverage by flash loan\n            _position -= _doFlashLoan(_position, _shouldRepay);\n\n            // If we still have _position to deleverage do it via normal deleverage\n            uint256 i = 0;\n            while (_position > 0 && i <= 10) {\n                _position -= _adjustPosition(_position, true);\n                i++;\n            }\n\n            // There may be scenario where we are not able to deleverage enough\n            if (_position != 0) {\n                // Calculate redeemable at current borrow and supply.\n                (uint256 _supply, uint256 _borrow) = getPosition();\n\n                uint256 _supplyToSupportBorrow;\n                if (maxBorrowRatio != 0) {\n                    _supplyToSupportBorrow = (_borrow * MAX_BPS) / maxBorrowRatio;\n                }\n                // Current supply minus supply required to support _borrow at _maxBorrowRatio\n                uint256 _redeemable = _supply - _supplyToSupportBorrow;\n                if (_amount > _redeemable) {\n                    _amount = _redeemable;\n                }\n            }\n        }\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\n\n        // If we do not have enough collateral, try to get some via COMP\n        // This scenario is rare and will happen during last withdraw\n        if (_amount > cToken.balanceOfUnderlying(address(this))) {\n            // Use all collateral for withdraw\n            _collateralBefore = 0;\n            _claimRewardsAndConvertTo(address(collateralToken));\n            // Updated amount\n            _amount = _amount - collateralToken.balanceOf(address(this));\n        }\n        _redeemUnderlying(_amount);\n        uint256 _collateralAfter = collateralToken.balanceOf(address(this));\n        return _collateralAfter - _collateralBefore;\n    }\n\n    /**\n     * @dev Aave flash is used only for withdrawal due to high fee compare to DyDx\n     * @param _flashAmount Amount for flash loan\n     * @param _shouldRepay Flag indicating we want to leverage or deleverage\n     * @return Total amount we leverage or deleverage using flash loan\n     */\n    function _doFlashLoan(uint256 _flashAmount, bool _shouldRepay) internal returns (uint256) {\n        uint256 _totalFlashAmount;\n        // Due to less fee DyDx is our primary flash loan provider\n        if (isDyDxActive && _flashAmount > 0) {\n            bytes memory _data = abi.encode(_flashAmount, _shouldRepay);\n            _totalFlashAmount = _doDyDxFlashLoan(address(collateralToken), _flashAmount, _data);\n            _flashAmount -= _totalFlashAmount;\n        }\n        if (isAaveActive && _shouldRepay && _flashAmount > 0) {\n            bytes memory _data = abi.encode(_flashAmount, _shouldRepay);\n            _totalFlashAmount += _doAaveFlashLoan(address(collateralToken), _flashAmount, _data);\n        }\n        return _totalFlashAmount;\n    }\n\n    /**\n     * @notice This function will be called by flash loan\n     * @dev In case of borrow, DyDx is preferred as fee is so low that it does not effect\n     * our collateralRatio and liquidation risk.\n     */\n    function _flashLoanLogic(bytes memory _data, uint256 _repayAmount) internal override {\n        (uint256 _amount, bool _deficit) = abi.decode(_data, (uint256, bool));\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        require(_collateralHere >= _amount, \"FLASH_FAILED\"); // to stop malicious calls\n\n        //if in deficit we repay amount and then withdraw\n        if (_deficit) {\n            _repayBorrow(_amount);\n            //if we are withdrawing we take more to cover fee\n            _redeemUnderlying(_repayAmount);\n        } else {\n            _mint(_collateralHere);\n            //borrow more to cover fee\n            _borrowCollateral(_repayAmount);\n        }\n    }\n\n    /**\n     * @dev If swap slippage is defined then use oracle to get amountOut and calculate minAmountOut\n     */\n    function _safeSwap(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn\n    ) internal virtual {\n        uint256 _minAmountOut =\n            swapSlippage != 10000\n                ? _calcAmtOutAfterSlippage(\n                    ORACLE.assetToAsset(_tokenIn, _amountIn, _tokenOut, TWAP_PERIOD),\n                    swapSlippage\n                )\n                : 1;\n        _safeSwap(_tokenIn, _tokenOut, _amountIn, _minAmountOut);\n    }\n\n    //////////////////// Compound wrapper functions //////////////////////////////\n    /**\n     * @dev Compound support ETH as collateral not WETH. So ETH strategy can override\n     * below functions and handle wrap/unwrap of WETH.\n     */\n    function _mint(uint256 _amount) internal virtual {\n        require(cToken.mint(_amount) == 0, \"supply-to-compound-failed\");\n    }\n\n    function _redeemUnderlying(uint256 _amount) internal virtual {\n        if (_amount == MAX_UINT_VALUE) {\n            // Withdraw all cTokens\n            require(cToken.redeem(cToken.balanceOf(address(this))) == 0, \"withdraw-from-compound-failed\");\n        } else {\n            // Withdraw underlying\n            require(cToken.redeemUnderlying(_amount) == 0, \"withdraw-from-compound-failed\");\n        }\n    }\n\n    function _borrowCollateral(uint256 _amount) internal virtual {\n        require(cToken.borrow(_amount) == 0, \"borrow-from-compound-failed\");\n    }\n\n    function _repayBorrow(uint256 _amount) internal virtual {\n        require(cToken.repayBorrow(_amount) == 0, \"repay-to-compound-failed\");\n    }\n\n    //////////////////////////////////////////////////////////////////////////////\n\n    /* solhint-disable no-empty-blocks */\n\n    // We overridden _generateReport which eliminates need of below function.\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {}\n\n    function _realizeProfit(uint256 _totalDebt) internal virtual override returns (uint256) {}\n\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {}\n\n    /* solhint-enable no-empty-blocks */\n}\n"
    },
    "contracts/strategies/compound/CompoundLeverageStrategyETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./CompoundLeverageStrategy.sol\";\nimport \"../../interfaces/token/IToken.sol\";\n\n// solhint-disable no-empty-blocks\n/// @title Deposit ETH in Compound and earn interest.\ncontract CompoundLeverageStrategyETH is CompoundLeverageStrategy {\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _comptroller,\n        address _rewardDistributor,\n        address _rewardToken,\n        address _aaveAddressesProvider,\n        address _receiptToken,\n        string memory _name\n    )\n        CompoundLeverageStrategy(\n            _pool,\n            _swapManager,\n            _comptroller,\n            _rewardDistributor,\n            _rewardToken,\n            _aaveAddressesProvider,\n            _receiptToken,\n            _name\n        )\n    {}\n\n    /// @dev Only receive ETH from either cToken or WETH\n    receive() external payable {\n        require(msg.sender == address(cToken) || msg.sender == WETH, \"not-allowed-to-send-ether\");\n    }\n\n    /// @dev Compound support ETH as collateral. Convert WETH to ETH and mint cETH\n    function _mint(uint256 _amount) internal override {\n        _withdrawETH(_amount);\n        cToken.mint{value: _amount}();\n    }\n\n    /// @dev On redeem we will receive ETH. Convert received ETH into WETH\n    function _redeemUnderlying(uint256 _amount) internal override {\n        super._redeemUnderlying(_amount);\n        _depositETH();\n    }\n\n    /// @dev On borrow we will receive ETH. Convert received ETH into WETH\n    function _borrowCollateral(uint256 _amount) internal override {\n        super._borrowCollateral(_amount);\n        _depositETH();\n    }\n\n    /// @dev Repay will take ETH. Convert WETH to ETH and call payable repay function\n    function _repayBorrow(uint256 _amount) internal override {\n        _withdrawETH(_amount);\n        cToken.repayBorrow{value: _amount}();\n    }\n\n    /// @dev Deposit ETH and get WETH in return\n    function _depositETH() internal {\n        TokenLike(WETH).deposit{value: address(this).balance}();\n    }\n\n    /// @dev Withdraw ETH by burning similar amount of WETH\n    function _withdrawETH(uint256 _amount) internal {\n        TokenLike(WETH).withdraw(_amount);\n    }\n}\n"
    },
    "contracts/interfaces/token/IToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface TokenLike is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/strategies/rari-fuse/RariFuseStrategyETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./RariFuseStrategy.sol\";\nimport \"../../interfaces/token/IToken.sol\";\n\n// solhint-disable no-empty-blocks\n/// @title Deposit ETH in a Rari Fuse Pool and earn interest.\ncontract RariFuseStrategyETH is RariFuseStrategy {\n    using RariCore for IFusePoolDirectory;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        uint256 _fusePoolId,\n        IFusePoolDirectory _fusePoolDirectory,\n        string memory _name\n    ) RariFuseStrategy(_pool, _swapManager, _fusePoolId, _fusePoolDirectory, _name) {}\n\n    /// @dev Only receive ETH from either cToken or WETH\n    receive() external payable {\n        require(msg.sender == address(cToken) || msg.sender == WETH, \"not-allowed-to-send-ether\");\n    }\n\n    function migrateFusePool(uint256 _newPoolId) external override onlyKeeper {\n        address _newCToken = fusePoolDirectory.getCTokenByUnderlying(_newPoolId, address(0x0));\n        require(address(cToken) != _newCToken, \"same-fuse-pool\");\n        require(cToken.redeem(cToken.balanceOf(address(this))) == 0, \"withdraw-from-fuse-pool-failed\");\n        CToken(_newCToken).mint{value: address(this).balance}();\n        emit FusePoolChanged(_newPoolId, address(cToken), _newCToken);\n        cToken = CToken(_newCToken);\n        receiptToken = _newCToken;\n        fusePoolId = _newPoolId;\n    }\n\n    /**\n     * @dev This hook get called after collateral is redeemed from a Rari Fuse Pool\n     * Vesper deals in WETH as collateral so convert ETH to WETH\n     */\n    function _afterRedeem() internal override {\n        TokenLike(WETH).deposit{value: address(this).balance}();\n    }\n\n    /**\n     * @dev During reinvest we have WETH as collateral but Rari Fuse accepts ETH.\n     * Withdraw ETH from WETH before calling mint in Rari Fuse Pool.\n     */\n    function _reinvest() internal override {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n        if (_collateralBalance != 0) {\n            TokenLike(WETH).withdraw(_collateralBalance);\n            cToken.mint{value: _collateralBalance}();\n        }\n    }\n}\n"
    },
    "contracts/strategies/rari-fuse/RariFuseStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./RariCore.sol\";\nimport \"../compound/CompoundStrategy.sol\";\nimport \"../../interfaces/rari-fuse/IComptroller.sol\";\nimport \"../../interfaces/rari-fuse/IFusePoolDirectory.sol\";\n\n/// @title This strategy will deposit collateral token in a Rari Fuse Pool and earn interest.\ncontract RariFuseStrategy is CompoundStrategy {\n    using SafeERC20 for IERC20;\n    using RariCore for IFusePoolDirectory;\n\n    uint256 public fusePoolId;\n    IFusePoolDirectory public immutable fusePoolDirectory;\n    address public rewardDistributor;\n    event FusePoolChanged(uint256 indexed newFusePoolId, address indexed oldCToken, address indexed newCToken);\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        uint256 _fusePoolId,\n        IFusePoolDirectory _fusePoolDirectory,\n        string memory _name\n    )\n        CompoundStrategy(\n            _pool,\n            _swapManager,\n            _fusePoolDirectory.getComptroller(_fusePoolId),\n            address(0), // rewardToken\n            _fusePoolDirectory.getCTokenByUnderlying(\n                _fusePoolId,\n                address(IVesperPool(_pool).token()) == WETH ? address(0x0) : address(IVesperPool(_pool).token())\n            ),\n            _name\n        )\n    {\n        fusePoolId = _fusePoolId;\n        fusePoolDirectory = _fusePoolDirectory;\n        // Find and set the rewardToken from the fuse pool data\n        (rewardDistributor, rewardToken) = _fusePoolDirectory.getRewardToken(_fusePoolId);\n    }\n\n    // solhint-enable no-empty-blocks\n\n    /**\n     * @notice Calculate total value using underlying token\n     * @dev Report total value in collateral token\n     */\n    function totalValue() public view override returns (uint256 _totalValue) {\n        _totalValue = _convertToCollateral(cToken.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Changes the underlying Fuse Pool to a new one\n     * @dev Redeems cTokens from current fuse pool and mints cTokens of new Fuse Pool\n     * @param _newPoolId Fuse Pool ID\n     */\n    function migrateFusePool(uint256 _newPoolId) external virtual onlyGovernor {\n        address _newCToken = fusePoolDirectory.getCTokenByUnderlying(_newPoolId, address(collateralToken));\n        require(address(cToken) != _newCToken, \"same-fuse-pool\");\n        require(cToken.redeem(cToken.balanceOf(address(this))) == 0, \"withdraw-from-fuse-pool-failed\");\n        collateralToken.safeApprove(address(cToken), 0);\n        // We usually do infinite approval via approveToken() any way\n        collateralToken.safeApprove(_newCToken, MAX_UINT_VALUE);\n        require(CToken(_newCToken).mint(collateralToken.balanceOf(address(this))) == 0, \"deposit-to-fuse-pool-failed\");\n        emit FusePoolChanged(_newPoolId, address(cToken), _newCToken);\n        cToken = CToken(_newCToken);\n        receiptToken = _newCToken;\n        fusePoolId = _newPoolId;\n    }\n\n    /// @notice Claim rewards from Fuse Pool' rewardDistributor\n    function _claimRewards() internal virtual override {\n        IRariRewardDistributor(rewardDistributor).claimRewards(address(this));\n    }\n\n    /// @notice Get rewards accrued in Fuse Pool' rewardDistributor\n    function _getRewardAccrued() internal view virtual override returns (uint256 _rewardAccrued) {\n        _rewardAccrued = IRariRewardDistributor(rewardDistributor).compAccrued(address(this));\n    }\n\n    // solhint-disable-next-line\n    function _beforeMigration(address _newStrategy) internal override {}\n}\n"
    },
    "contracts/strategies/compound/vfr/CompoundStableStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../CompoundStrategy.sol\";\nimport \"../../VFR.sol\";\n\n// solhint-disable no-empty-blocks\ncontract CompoundStableStrategy is CompoundStrategy, VFR {\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _comptroller,\n        address _rewardToken,\n        address _receiptToken,\n        string memory _name\n    ) CompoundStrategy(_pool, _swapManager, _comptroller, _rewardToken, _receiptToken, _name) {}\n\n    function _realizeProfit(uint256 _totalDebt) internal override returns (uint256 _profit) {\n        _profit = _handleStableProfit(pool, super._realizeProfit(_totalDebt));\n    }\n}\n"
    },
    "contracts/strategies/VFR.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../interfaces/vesper/IVFRBuffer.sol\";\nimport \"../interfaces/vesper/IVFRCoveragePool.sol\";\nimport \"../interfaces/vesper/IVFRStablePool.sol\";\n\nabstract contract VFR {\n    using SafeERC20 for IERC20;\n\n    /// @dev This method assumes that _amount < _profitOfStrategy\n    function _transferProfit(\n        IERC20 _token,\n        address _to,\n        uint256 _amount\n    ) internal virtual returns (uint256) {\n        _token.safeTransfer(_to, _amount);\n        return _amount;\n    }\n\n    function _handleStableProfit(address _stablePool, uint256 _stableProfit) internal returns (uint256 _profit) {\n        IERC20 collateralToken = IVFRStablePool(_stablePool).token();\n        _profit = _stableProfit;\n\n        // If the buffer is not set, this will work exactly like a regular strategy\n        address buffer = IVFRStablePool(_stablePool).buffer();\n        if (buffer != address(0)) {\n            uint256 targetAmount = IVFRStablePool(_stablePool).amountToReachTarget(address(this));\n            if (_profit > targetAmount) {\n                _profit -= _transferProfit(collateralToken, buffer, _profit - targetAmount);\n            } else {\n                uint256 amountNeeded = targetAmount - _profit;\n                if (amountNeeded > 0) {\n                    uint256 amountInBuffer = collateralToken.balanceOf(buffer);\n                    uint256 amountRequestedMax = amountInBuffer >= amountNeeded ? amountNeeded : amountInBuffer;\n                    uint256 amountBeforeRequest = collateralToken.balanceOf(address(this));\n                    IVFRBuffer(buffer).request(amountRequestedMax);\n                    _profit += collateralToken.balanceOf(address(this)) - amountBeforeRequest;\n                }\n            }\n        }\n    }\n\n    function _handleCoverageProfit(address _coveragePool, uint256 _coverageProfit) internal returns (uint256 _profit) {\n        IERC20 collateralToken = IVFRCoveragePool(_coveragePool).token();\n        _profit = _coverageProfit;\n\n        // If the buffer is not set, this will work exactly like a regular strategy\n        address buffer = IVFRCoveragePool(_coveragePool).buffer();\n        if (buffer != address(0)) {\n            uint256 target = IVFRBuffer(buffer).target();\n            uint256 inBuffer = collateralToken.balanceOf(buffer);\n            if (inBuffer > target) {\n                // If the buffer is above target, then request any additional funds\n                IVFRBuffer(buffer).request(inBuffer - target);\n                _profit += (inBuffer - target);\n            } else {\n                // If the buffer is below target, send funds to it\n                uint256 needed = target - inBuffer;\n                if (needed > 0) {\n                    if (_profit >= needed) {\n                        _profit -= _transferProfit(collateralToken, buffer, needed);\n                    } else if (_profit > 0) {\n                        _profit -= _transferProfit(collateralToken, buffer, _profit);\n                    }\n                }\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/vesper/IVFRBuffer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\ninterface IVFRBuffer {\n    function target() external view returns (uint256);\n\n    function request(uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/vesper/IVFRCoveragePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./IVesperPool.sol\";\n\ninterface IVFRCoveragePool is IVesperPool {\n    function buffer() external view returns (address);\n}\n"
    },
    "contracts/interfaces/vesper/IVFRStablePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./IVesperPool.sol\";\n\ninterface IVFRStablePool is IVesperPool {\n    function targetAPY() external view returns (uint256);\n\n    function buffer() external view returns (address);\n\n    function targetPricePerShare() external view returns (uint256);\n\n    function amountToReachTarget(address _strategy) external view returns (uint256);\n}\n"
    },
    "contracts/strategies/vesper/vfr/VesperStableStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\nimport \"../../VFR.sol\";\nimport \"../VesperStrategy.sol\";\n\n// solhint-disable no-empty-blocks\ncontract VesperStableStrategy is VesperStrategy, VFR {\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _receiptToken,\n        address _vsp,\n        string memory _name\n    ) VesperStrategy(_pool, _swapManager, _receiptToken, _vsp, _name) {}\n\n    function _realizeProfit(uint256 _totalDebt) internal override returns (uint256 _profit) {\n        _profit = _handleStableProfit(pool, super._realizeProfit(_totalDebt));\n    }\n}\n"
    },
    "contracts/strategies/vesper/vfr/VesperCoverageStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\nimport \"../../VFR.sol\";\nimport \"../VesperStrategy.sol\";\n\n// solhint-disable no-empty-blocks\ncontract VesperCoverageStrategy is VesperStrategy, VFR {\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _receiptToken,\n        address _vsp,\n        string memory _name\n    ) VesperStrategy(_pool, _swapManager, _receiptToken, _vsp, _name) {}\n\n    function _realizeProfit(uint256 _totalDebt) internal override returns (uint256 _profit) {\n        _profit = _handleCoverageProfit(pool, super._realizeProfit(_totalDebt));\n    }\n}\n"
    },
    "contracts/strategies/convex/vfr/ConvexStableStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../3pool/ConvexStrategy.sol\";\nimport \"../../VFR.sol\";\n\n// solhint-disable no-empty-blocks\nabstract contract ConvexStableStrategy is ConvexStrategy, VFR {\n    constructor(\n        address _pool,\n        address _threePool,\n        address _threeCrv,\n        address _gauge,\n        address _swapManager,\n        uint256 _collateralIdx,\n        uint256 _convexPoolId,\n        string memory _name\n    ) ConvexStrategy(_pool, _threePool, _threeCrv, _gauge, _swapManager, _collateralIdx, _convexPoolId, 3, _name) {}\n\n    function _realizeGross(uint256 _totalDebt)\n        internal\n        override\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _toUnstake\n        )\n    {\n        (_profit, _loss, _toUnstake) = super._realizeGross(_totalDebt);\n        _profit = _handleStableProfit(pool, _profit);\n    }\n\n    function _transferProfit(\n        IERC20 _token,\n        address _to,\n        uint256 _amount\n    ) internal override returns (uint256) {\n        uint256 available = _token.balanceOf(address(this));\n        if (available < _amount) {\n            // If the amount we have available in collateral token is not enough,\n            // then fetch additional profits (which are not readily available in\n            // the collateral token)\n            _unstakeAndWithdrawAsCollateral(_amount - available);\n            uint256 balance = _token.balanceOf(address(this));\n            available = balance > _amount ? _amount : balance;\n        }\n        return super._transferProfit(_token, _to, available);\n    }\n}\n"
    },
    "contracts/strategies/convex/3pool/ConvexStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../../../interfaces/convex/IConvex.sol\";\nimport \"../../../interfaces/convex/IConvexToken.sol\";\nimport \"../../curve/CrvPoolStrategyBase.sol\";\nimport \"../ConvexStrategyBase.sol\";\n\n/// @title This strategy will deposit collateral token in Curve 3Pool and stake lp token to convex.\nabstract contract ConvexStrategy is CrvPoolStrategyBase, ConvexStrategyBase {\n    using SafeERC20 for IERC20;\n\n    constructor(\n        address _pool,\n        address _threePool,\n        address _threeCrv,\n        address _gauge,\n        address _swapManager,\n        uint256 _collateralIdx,\n        uint256 _convexPoolId,\n        // No. of pooled tokens in the pool\n        uint256 _n,\n        string memory _name\n    )\n        CrvPoolStrategyBase(_pool, _threePool, _threeCrv, _gauge, _swapManager, _collateralIdx, _n, _name)\n        ConvexStrategyBase(_threeCrv, _convexPoolId)\n    {\n        oracleRouterIdx = 0;\n    }\n\n    function updateClaimRewards(bool _isClaimRewards) external onlyGovernor {\n        isClaimRewards = _isClaimRewards;\n    }\n\n    /// @dev convex pool can add new rewards. This method refresh list.\n    function setRewardTokens(\n        address[] memory /*_rewardTokens*/\n    ) external override onlyKeeper {\n        rewardTokens = _getRewardTokens();\n        _approveToken(0);\n        _approveToken(MAX_UINT_VALUE);\n        _setupOracles();\n    }\n\n    function _approveToken(uint256 _amount) internal virtual override {\n        IERC20(crvLp).safeApprove(BOOSTER, _amount);\n        super._approveToken(_amount);\n    }\n\n    function _stakeAllLp() internal override {\n        uint256 balance = IERC20(crvLp).balanceOf(address(this));\n        if (balance != 0) {\n            require(IConvex(BOOSTER).deposit(convexPoolId, balance, true), \"booster-deposit-failed\");\n        }\n    }\n\n    function _unstakeAllLp() internal override {\n        Rewards(cvxCrvRewards).withdrawAllAndUnwrap(isClaimRewards);\n    }\n\n    function _unstakeLp(uint256 _amount) internal override {\n        if (_amount != 0) {\n            require(Rewards(cvxCrvRewards).withdrawAndUnwrap(_amount, false), \"withdraw-and-unwrap-failed\");\n        }\n    }\n\n    function _claimRewards() internal override {\n        require(Rewards(cvxCrvRewards).getReward(address(this), true), \"reward-claim-failed\");\n    }\n\n    function totalStaked() public view override returns (uint256 total) {\n        total = Rewards(cvxCrvRewards).balanceOf(address(this));\n    }\n\n    function totalLp() public view override returns (uint256 total) {\n        total = IERC20(crvLp).balanceOf(address(this)) + Rewards(cvxCrvRewards).balanceOf(address(this));\n    }\n\n    /// @dev Claimable rewards estimated into pool's collateral value\n    function claimableRewardsInCollateral() public view virtual override returns (uint256 rewardAsCollateral) {\n        ClaimableRewardInfo[] memory _claimableRewardsInfo = _claimableRewards();\n        for (uint256 i = 0; i < _claimableRewardsInfo.length; i++) {\n            if (_claimableRewardsInfo[i].amount != 0) {\n                (, uint256 _reward, ) =\n                    swapManager.bestOutputFixedInput(\n                        _claimableRewardsInfo[i].token,\n                        address(collateralToken),\n                        _claimableRewardsInfo[i].amount\n                    );\n                rewardAsCollateral += _reward;\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/convex/IConvex.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\ninterface IConvex {\n    function poolInfo(uint256)\n        external\n        view\n        returns (\n            address,\n            address,\n            address,\n            address,\n            address,\n            bool\n        );\n\n    // deposit lp tokens and stake\n    function deposit(\n        uint256 _pid,\n        uint256 _amount,\n        bool _stake\n    ) external returns (bool);\n\n    // deposit all lp tokens and stake\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\n\n    // withdraw lp tokens\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\n\n    // withdraw all lp tokens\n    function withdrawAll(uint256 _pid) external returns (bool);\n\n    // claim crv + extra rewards\n    function earmarkRewards(uint256 _pid) external returns (bool);\n\n    // claim  rewards on stash (msg.sender == stash)\n    function claimRewards(uint256 _pid, address _gauge) external returns (bool);\n\n    // delegate address votes on dao (needs to be voteDelegate)\n    function vote(\n        uint256 _voteId,\n        address _votingAddress,\n        bool _support\n    ) external returns (bool);\n\n    function voteGaugeWeight(address[] calldata _gauge, uint256[] calldata _weight) external returns (bool);\n}\n\ninterface Rewards {\n    function pid() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function earned(address account) external view returns (uint256);\n\n    function extraRewardsLength() external view returns (uint256);\n\n    function extraRewards(uint256) external view returns (address);\n\n    function rewardPerToken() external view returns (uint256);\n\n    function rewardPerTokenStored() external view returns (uint256);\n\n    function rewardRate() external view returns (uint256);\n\n    function rewardToken() external view returns (address);\n\n    function rewards(address) external view returns (uint256);\n\n    function userRewardPerTokenPaid(address) external view returns (uint256);\n\n    function stakingToken() external view returns (address);\n\n    function stake(uint256) external returns (bool);\n\n    function stakeAll() external returns (bool);\n\n    function stakeFor(address, uint256) external returns (bool);\n\n    function withdraw(uint256 amount, bool claim) external returns (bool);\n\n    function withdrawAll(bool claim) external returns (bool);\n\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns (bool);\n\n    function withdrawAllAndUnwrap(bool claim) external;\n\n    function getReward() external returns (bool);\n\n    function getReward(address _account, bool _claimExtras) external returns (bool);\n\n    function donate(uint256 _amount) external returns (bool);\n}\n"
    },
    "contracts/interfaces/convex/IConvexToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\ninterface IConvexToken {\n    function maxSupply() external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function reductionPerCliff() external view returns (uint256);\n}\n"
    },
    "contracts/strategies/convex/ConvexStrategyBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../interfaces/convex/IConvex.sol\";\nimport \"../../interfaces/convex/IConvexToken.sol\";\n\n// Convex Strategies common variables and helper functions\nabstract contract ConvexStrategyBase {\n    using SafeERC20 for IERC20;\n\n    address public constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\n    address private constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\n\n    address public constant BOOSTER = 0xF403C135812408BFbE8713b5A23a04b3D48AAE31;\n    address public immutable cvxCrvRewards;\n    uint256 public immutable convexPoolId;\n    bool public isClaimRewards;\n    uint256 internal constant SUSHISWAP_ROUTER_INDEX = 1;\n\n    struct ClaimableRewardInfo {\n        address token;\n        uint256 amount;\n    }\n\n    constructor(address _crvLp, uint256 _convexPoolId) {\n        (address _lp, , , address _reward, , ) = IConvex(BOOSTER).poolInfo(_convexPoolId);\n        require(_lp == address(_crvLp), \"incorrect-lp-token\");\n        cvxCrvRewards = _reward;\n        convexPoolId = _convexPoolId;\n    }\n\n    function _getRewardTokens() internal view returns (address[] memory) {\n        uint256 extraRewardCount;\n        for (uint256 i = 0; i < Rewards(cvxCrvRewards).extraRewardsLength(); i++) {\n            Rewards rewardContract = Rewards(Rewards(cvxCrvRewards).extraRewards(i));\n            // Some pool has CVX as extra rewards but other do not. CVX still reward token\n            if (rewardContract.rewardToken() != CRV && rewardContract.rewardToken() != CVX) {\n                extraRewardCount++;\n            }\n        }\n        address[] memory _rewardTokens = new address[](extraRewardCount + 2);\n        _rewardTokens[0] = CRV;\n        _rewardTokens[1] = CVX;\n        uint256 index = 2;\n        for (uint256 i = 0; i < Rewards(cvxCrvRewards).extraRewardsLength(); i++) {\n            Rewards rewardContract = Rewards(Rewards(cvxCrvRewards).extraRewards(i));\n            // CRV and CVX already added in array\n            if (rewardContract.rewardToken() != CRV && rewardContract.rewardToken() != CVX) {\n                _rewardTokens[index] = rewardContract.rewardToken();\n                index++;\n            }\n        }\n        return _rewardTokens;\n    }\n\n    /// @dev Returns a list of (token, amount) for all rewards claimable in a Convex Pool\n    function _claimableRewards() internal view returns (ClaimableRewardInfo[] memory) {\n        uint256 _extraRewardCount = Rewards(cvxCrvRewards).extraRewardsLength();\n        ClaimableRewardInfo[] memory _claimableRewardsInfo = new ClaimableRewardInfo[](_extraRewardCount + 2);\n        uint256 _baseReward = Rewards(cvxCrvRewards).earned(address(this));\n\n        // CVX rewards are minted proportionally to baseReward (CRV)\n        uint256 _cvxReward = _calculateCVXRewards(_baseReward);\n        _claimableRewardsInfo[0] = ClaimableRewardInfo(CRV, _baseReward);\n        _claimableRewardsInfo[1] = ClaimableRewardInfo(CVX, _cvxReward);\n\n        // Don't care if there are additional CRV, or CVX in extraRewards\n        // total amount will be summed together in claimableRewardsInCollateral()\n        for (uint256 i = 0; i < _extraRewardCount; i++) {\n            Rewards _rewardContract = Rewards(Rewards(cvxCrvRewards).extraRewards(i));\n            _claimableRewardsInfo[2 + i] = ClaimableRewardInfo(\n                _rewardContract.rewardToken(),\n                _rewardContract.earned(address(this))\n            );\n        }\n        return _claimableRewardsInfo;\n    }\n\n    // TODO: review this again.  There may be substitute\n    function _calculateCVXRewards(uint256 _claimableCrvRewards) internal view returns (uint256 _total) {\n        // CVX Rewards are minted based on CRV rewards claimed upon withdraw\n        // This will calculate the CVX amount based on CRV rewards accrued\n        // without having to claim CRV rewards first\n        // ref 1: https://github.com/convex-eth/platform/blob/main/contracts/contracts/Cvx.sol#L61-L76\n        // ref 2: https://github.com/convex-eth/platform/blob/main/contracts/contracts/Booster.sol#L458-L466\n\n        uint256 _reductionPerCliff = IConvexToken(CVX).reductionPerCliff();\n        uint256 _totalSupply = IConvexToken(CVX).totalSupply();\n        uint256 _maxSupply = IConvexToken(CVX).maxSupply();\n        uint256 _cliff = _totalSupply / _reductionPerCliff;\n        uint256 _totalCliffs = 1000;\n\n        if (_cliff < _totalCliffs) {\n            //for reduction% take inverse of current cliff\n            uint256 _reduction = _totalCliffs - _cliff;\n            //reduce\n            _total = (_claimableCrvRewards * _reduction) / _totalCliffs;\n\n            //supply cap check\n            uint256 _amtTillMax = _maxSupply - _totalSupply;\n            if (_total > _amtTillMax) {\n                _total = _amtTillMax;\n            }\n        }\n    }\n}\n"
    },
    "contracts/strategies/convex/vfr/ConvexCoverageStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../3pool/ConvexStrategy.sol\";\nimport \"../../VFR.sol\";\n\n// solhint-disable no-empty-blocks\nabstract contract ConvexCoverageStrategy is ConvexStrategy, VFR {\n    constructor(\n        address _pool,\n        address _threePool,\n        address _threeCrv,\n        address _gauge,\n        address _swapManager,\n        uint256 _collateralIdx,\n        uint256 _convexPoolId,\n        string memory _name\n    ) ConvexStrategy(_pool, _threePool, _threeCrv, _gauge, _swapManager, _collateralIdx, _convexPoolId, 3, _name) {}\n\n    function _realizeGross(uint256 _totalDebt)\n        internal\n        override\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _toUnstake\n        )\n    {\n        (_profit, _loss, _toUnstake) = super._realizeGross(_totalDebt);\n        _profit = _handleCoverageProfit(pool, _profit);\n    }\n\n    function _transferProfit(\n        IERC20 _token,\n        address _to,\n        uint256 _amount\n    ) internal override returns (uint256) {\n        uint256 available = _token.balanceOf(address(this));\n        if (available < _amount) {\n            // If the amount we have available in collateral token is not enough,\n            // then fetch additional profits (which are not readily available in\n            // the collateral token)\n            _unstakeAndWithdrawAsCollateral(_amount - available);\n            uint256 balance = _token.balanceOf(address(this));\n            available = balance > _amount ? _amount : balance;\n        }\n        return super._transferProfit(_token, _to, available);\n    }\n}\n"
    },
    "contracts/strategies/convex/vfr/ConvexCoverage3PoolStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./ConvexCoverageStrategy.sol\";\nimport \"../3pool/Convex3PoolStrategy.sol\";\n\n//solhint-disable no-empty-blocks\ncontract ConvexCoverage3poolStrategy is ConvexCoverageStrategy {\n    address private constant THREEPOOL = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\n    address private constant THREECRV = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\n    address private constant GAUGE = 0xbFcF63294aD7105dEa65aA58F8AE5BE2D9d0952A;\n    // Convex Pool ID for 3Pool\n    uint256 private constant CONVEX_POOL_ID = 9;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        uint256 _collateralIdx,\n        string memory _name\n    ) ConvexCoverageStrategy(_pool, THREEPOOL, THREECRV, GAUGE, _swapManager, _collateralIdx, CONVEX_POOL_ID, _name) {}\n}\n"
    },
    "contracts/strategies/convex/3pool/Convex3PoolStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./ConvexStrategy.sol\";\n\n//solhint-disable no-empty-blocks\ncontract Convex3PoolStrategy is ConvexStrategy {\n    address private constant THREEPOOL = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\n    address private constant THREECRV = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\n    address private constant GAUGE = 0xbFcF63294aD7105dEa65aA58F8AE5BE2D9d0952A;\n    // Convex Pool ID for 3Pool\n    uint256 internal constant CONVEX_POOL_ID = 9;\n    // No. of pooled tokens in the Pool\n    uint256 private constant N = 3;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        uint256 _collateralIdx,\n        string memory _name\n    ) ConvexStrategy(_pool, THREEPOOL, THREECRV, GAUGE, _swapManager, _collateralIdx, CONVEX_POOL_ID, N, _name) {\n        oracleRouterIdx = 1;\n    }\n}\n"
    },
    "contracts/strategies/convex/3pool/ConvexSBTCPoolStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./ConvexStrategy.sol\";\n\n//solhint-disable no-empty-blocks\ncontract ConvexSBTCStrategy is ConvexStrategy {\n    address private constant THREEPOOL = 0x7fC77b5c7614E1533320Ea6DDc2Eb61fa00A9714;\n    address private constant THREECRV = 0x075b1bb99792c9E1041bA13afEf80C91a1e70fB3;\n    address private constant GAUGE = 0x705350c4BcD35c9441419DdD5d2f097d7a55410F;\n    // Convex Pool ID for sBTC pool\n    uint256 internal constant CONVEX_POOL_ID = 7;\n    // No. of pooled tokens in the Pool\n    uint256 private constant N = 3;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        uint256 _collateralIdx,\n        string memory _name\n    ) ConvexStrategy(_pool, THREEPOOL, THREECRV, GAUGE, _swapManager, _collateralIdx, CONVEX_POOL_ID, N, _name) {\n        oracleRouterIdx = 1;\n    }\n}\n"
    },
    "contracts/strategies/convex/3pool/ConvexD3PoolStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./ConvexStrategy.sol\";\n\n//solhint-disable no-empty-blocks\ncontract ConvexD3PoolStrategy is ConvexStrategy {\n    address private constant THREEPOOL = 0xBaaa1F5DbA42C3389bDbc2c9D2dE134F5cD0Dc89;\n    address private constant THREECRV = 0xBaaa1F5DbA42C3389bDbc2c9D2dE134F5cD0Dc89;\n    address private constant GAUGE = 0x16C2beE6f55dAB7F494dBa643fF52ef2D47FBA36;\n    // Convex Pool ID for D3 Pool\n    uint256 internal constant CONVEX_POOL_ID = 58;\n    // No. of pooled tokens in the Pool\n    uint256 private constant N = 3;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        uint256 _collateralIdx,\n        string memory _name\n    ) ConvexStrategy(_pool, THREEPOOL, THREECRV, GAUGE, _swapManager, _collateralIdx, CONVEX_POOL_ID, N, _name) {}\n}\n"
    },
    "contracts/strategies/convex/4Pool/Convex4PoolStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../../curve/4Pool/Crv4PoolStrategy.sol\";\nimport \"../ConvexStrategyBase.sol\";\n\n/// @title This strategy will deposit collateral token in Curve 4Pool and stake lp token to convex.\nabstract contract Convex4PoolStrategy is Crv4PoolStrategy, ConvexStrategyBase {\n    using SafeERC20 for IERC20;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _crvDeposit,\n        address _crvPool,\n        address _crvLp,\n        address _gauge,\n        uint256 _collateralIdx,\n        uint256 _convexPoolId,\n        string memory _name\n    )\n        Crv4PoolStrategy(_pool, _swapManager, _crvDeposit, _crvPool, _crvLp, _gauge, _collateralIdx, _name)\n        ConvexStrategyBase(_crvLp, _convexPoolId)\n    {\n        oracleRouterIdx = 0;\n    }\n\n    /// @dev convex pool can add new rewards. This method refresh list.\n    function setRewardTokens(\n        address[] memory /*_rewardTokens*/\n    ) external override onlyKeeper {\n        rewardTokens = _getRewardTokens();\n        _approveToken(0);\n        _approveToken(MAX_UINT_VALUE);\n        _setupOracles();\n    }\n\n    function updateClaimRewards(bool _isClaimRewards) external onlyGovernor {\n        isClaimRewards = _isClaimRewards;\n    }\n\n    function _approveToken(uint256 _amount) internal virtual override {\n        IERC20(crvLp).safeApprove(BOOSTER, _amount);\n        super._approveToken(_amount);\n    }\n\n    function _claimRewards() internal override {\n        require(Rewards(cvxCrvRewards).getReward(address(this), true), \"reward-claim-failed\");\n    }\n\n    function _stakeAllLp() internal override {\n        uint256 balance = IERC20(crvLp).balanceOf(address(this));\n        if (balance != 0) {\n            require(IConvex(BOOSTER).deposit(convexPoolId, balance, true), \"booster-deposit-failed\");\n        }\n    }\n\n    function _unstakeAllLp() internal override {\n        Rewards(cvxCrvRewards).withdrawAllAndUnwrap(isClaimRewards);\n    }\n\n    function _unstakeLp(uint256 _amount) internal override {\n        if (_amount != 0) {\n            require(Rewards(cvxCrvRewards).withdrawAndUnwrap(_amount, false), \"withdraw-and-unwrap-failed\");\n        }\n    }\n\n    function totalStaked() public view override returns (uint256 total) {\n        total = Rewards(cvxCrvRewards).balanceOf(address(this));\n    }\n\n    function totalLp() public view override returns (uint256 total) {\n        total = IERC20(crvLp).balanceOf(address(this)) + Rewards(cvxCrvRewards).balanceOf(address(this));\n    }\n\n    /// @dev Claimable rewards estimated into pool's collateral value\n    function claimableRewardsInCollateral() public view virtual override returns (uint256 rewardAsCollateral) {\n        ClaimableRewardInfo[] memory _claimableRewardsInfo = _claimableRewards();\n        for (uint256 i = 0; i < _claimableRewardsInfo.length; i++) {\n            if (_claimableRewardsInfo[i].amount != 0) {\n                (, uint256 _reward, ) =\n                    swapManager.bestOutputFixedInput(\n                        _claimableRewardsInfo[i].token,\n                        address(collateralToken),\n                        _claimableRewardsInfo[i].amount\n                    );\n                rewardAsCollateral += _reward;\n            }\n        }\n    }\n}\n"
    },
    "contracts/strategies/curve/4Pool/Crv4PoolStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../../interfaces/vesper/IVesperPool.sol\";\nimport \"../../../interfaces/curve/IDeposit.sol\";\nimport \"../../Strategy.sol\";\nimport \"../CrvPoolStrategyBase.sol\";\n\n/// @title This strategy will deposit collateral token in a Curve 4Pool and earn interest.\nabstract contract Crv4PoolStrategy is CrvPoolStrategyBase {\n    using SafeERC20 for IERC20;\n\n    // No. of pooled tokens in the Pool\n    uint256 private constant N = 4;\n\n    // Legacy Curve Deposit Helper contract for pure 4Pools\n    // e.g: for sUSD 4Pool, deposit contract is: 0xfcba3e75865d2d561be8d220616520c171f12851\n    // Offers same functionalities as DepositZap for Metapools with a different interface\n    address public crvDeposit;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _crvDeposit,\n        address _crvPool,\n        address _crvLp,\n        address _gauge,\n        uint256 _collateralIdx,\n        string memory _name\n    ) CrvPoolStrategyBase(_pool, _crvPool, _crvLp, _gauge, _swapManager, _collateralIdx, N, _name) {\n        require(IDeposit4x(_crvDeposit).token() == _crvLp, \"invalid-deposit-contract\");\n        crvDeposit = _crvDeposit;\n        require(ILiquidityGaugeV2(_gauge).lp_token() == _crvLp, \"invalid-gauge\");\n    }\n\n    function _init(address _crvPool, uint256 _n) internal virtual override {\n        for (uint256 i = 0; i < _n; i++) {\n            coins.push(IStableSwapV2(_crvPool).coins(int128((int256(i)))));\n            coinDecimals.push(IERC20Metadata(coins[i]).decimals());\n        }\n    }\n\n    function _approveToken(uint256 _amount) internal virtual override {\n        super._approveToken(_amount);\n        collateralToken.safeApprove(crvDeposit, _amount);\n        IERC20(crvLp).safeApprove(crvDeposit, _amount);\n    }\n\n    function _depositToCurve(uint256 amt) internal virtual override returns (bool) {\n        if (amt != 0) {\n            uint256[4] memory _depositAmounts;\n            _depositAmounts[collIdx] = amt;\n            uint256 _expectedOut =\n                _calcAmtOutAfterSlippage(\n                    IStableSwap4xUnderlying(address(crvPool)).calc_token_amount(_depositAmounts, true),\n                    crvSlippage\n                );\n\n            uint256 _minLpAmount =\n                ((amt * _getSafeUsdRate()) / crvPool.get_virtual_price()) * 10**(18 - coinDecimals[collIdx]);\n            if (_expectedOut > _minLpAmount) _minLpAmount = _expectedOut;\n            // solhint-disable-next-line no-empty-blocks\n            try IDeposit4x(crvDeposit).add_liquidity(_depositAmounts, _minLpAmount) {} catch Error(\n                string memory _reason\n            ) {\n                emit DepositFailed(_reason);\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function _withdrawAsFromCrvPool(\n        uint256 _lpAmount,\n        uint256 _minAmt,\n        uint256 _i\n    ) internal virtual override {\n        IDeposit4x(crvDeposit).remove_liquidity_one_coin(_lpAmount, SafeCast.toInt128(int256(_i)), _minAmt);\n    }\n\n    function getLpValueAs(uint256 _lpAmount, uint256 _i) public view virtual override returns (uint256) {\n        return\n            (_lpAmount != 0)\n                ? IDeposit4x(crvDeposit).calc_withdraw_one_coin(_lpAmount, SafeCast.toInt128(int256(_i)))\n                : 0;\n    }\n\n    function _claimRewards() internal virtual override {\n        ITokenMinter(CRV_MINTER).mint(crvGauge);\n        ILiquidityGaugeV2(crvGauge).claim_rewards(address(this));\n    }\n}\n"
    },
    "contracts/interfaces/curve/IDeposit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* solhint-disable */\npragma solidity 0.8.3;\n\ninterface IDeposit4x {\n    function add_liquidity(uint256[4] memory _amounts, uint256 _min_mint_amount) external;\n\n    function remove_liquidity(uint256 _amount, uint256[4] memory _min_amounts) external;\n\n    function remove_liquidity_one_coin(\n        uint256 _token_amount,\n        int128 i,\n        uint256 _min_amount\n    ) external;\n\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\n\n    function token() external view returns (address);\n}\n"
    },
    "contracts/strategies/convex/4Pool/Convex4PoolStrategyMUSDPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./Convex4PoolStrategy.sol\";\n\n//solhint-disable no-empty-blocks\ncontract Convex4PoolStrategyMUSDPool is Convex4PoolStrategy {\n    // MUSD-3CRV Metapool\n    // Composed of [ MUSD , [ DAI, USDC, USDT ]]\n\n    // MUSD LP Token\n    address internal constant CRV_LP = 0x1AEf73d49Dedc4b1778d0706583995958Dc862e6;\n    // MUSD Pool\n    address internal constant CRV_POOL = 0x8474DdbE98F5aA3179B3B3F5942D724aFcdec9f6;\n    // MUSD Deposit Contract\n    address internal constant CRV_DEPOSIT = 0x803A2B40c5a9BB2B86DD630B274Fa2A9202874C2;\n    // MUSD Gauge\n    address internal constant GAUGE = 0x5f626c30EC1215f4EdCc9982265E8b1F411D1352;\n    // Convex Pool ID for MUSD-3CRV\n    uint256 internal constant CONVEX_POOL_ID = 14;\n\n    address private constant THREEPOOL = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        uint256 _collateralIdx,\n        string memory _name\n    )\n        Convex4PoolStrategy(\n            _pool,\n            _swapManager,\n            CRV_DEPOSIT,\n            CRV_POOL,\n            CRV_LP,\n            GAUGE,\n            _collateralIdx,\n            CONVEX_POOL_ID,\n            _name\n        )\n    {\n        oracleRouterIdx = 1;\n    }\n\n    function _init(\n        address _crvPool,\n        uint256 /* _n */\n    ) internal virtual override {\n        coins.push(IStableSwap(_crvPool).coins(0));\n        coinDecimals.push(IERC20Metadata(coins[0]).decimals());\n        for (uint256 i = 0; i < 3; i++) {\n            coins.push(IStableSwap(THREEPOOL).coins(i));\n            coinDecimals.push(IERC20Metadata(coins[i]).decimals());\n        }\n    }\n\n    function _depositToCurve(uint256 _amt) internal virtual override returns (bool) {\n        if (_amt != 0) {\n            uint256[2] memory _depositAmounts;\n            _depositAmounts[collIdx] = _amt;\n            uint256[4] memory _depositAmountsZap;\n            _depositAmountsZap[collIdx] = _amt;\n\n            uint256 _expectedOut =\n                _calcAmtOutAfterSlippage(\n                    IStableSwap2x(address(crvPool)).calc_token_amount(_depositAmounts, true),\n                    crvSlippage\n                );\n\n            uint256 _minLpAmount =\n                ((_amt * _getSafeUsdRate()) / crvPool.get_virtual_price()) * 10**(18 - coinDecimals[collIdx]);\n            if (_expectedOut > _minLpAmount) _minLpAmount = _expectedOut;\n            // solhint-disable-next-line no-empty-blocks\n            try IDeposit4x(crvDeposit).add_liquidity(_depositAmountsZap, _minLpAmount) {} catch Error(\n                string memory _reason\n            ) {\n                emit DepositFailed(_reason);\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"
    },
    "contracts/strategies/curve/4Pool/Crv4PoolStrategySUSDPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./Crv4PoolStrategy.sol\";\n\n//solhint-disable no-empty-blocks\ncontract Crv4PoolStrategySUSDPool is Crv4PoolStrategy {\n    // SUSD LP Token\n    address internal constant CRV_LP = 0xC25a3A3b969415c80451098fa907EC722572917F;\n    // SUSD Pool\n    address internal constant CRV_POOL = 0xA5407eAE9Ba41422680e2e00537571bcC53efBfD;\n    // SUSD Deposit Contract\n    address internal constant CRV_DEPOSIT = 0xFCBa3E75865d2d561BE8D220616520c171F12851;\n    // SUSD Gauge\n    address internal constant GAUGE = 0xA90996896660DEcC6E997655E065b23788857849;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        uint256 _collateralIdx,\n        string memory _name\n    ) Crv4PoolStrategy(_pool, _swapManager, CRV_DEPOSIT, CRV_POOL, CRV_LP, GAUGE, _collateralIdx, _name) {}\n}\n"
    },
    "contracts/test/Crv3PoolMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../strategies/curve/CrvBase.sol\";\n\ncontract Crv3PoolMock is CrvBase {\n    /* solhint-disable */\n    using SafeERC20 for IERC20;\n    address public constant THREEPOOL = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\n    address private constant THREECRV = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\n    address private constant GAUGE = 0xbFcF63294aD7105dEa65aA58F8AE5BE2D9d0952A;\n\n    constructor() CrvBase(THREEPOOL, THREECRV, GAUGE) {}\n\n    /* solhint-enable */\n\n    function _depositToCrvPool(\n        uint256 _daiAmount,\n        uint256 _usdcAmount,\n        uint256 _usdtAmount\n    ) internal {\n        uint256[3] memory depositAmounts = [_daiAmount, _usdcAmount, _usdtAmount];\n        // using 1 for min_mint_amount, but we may want to improve this logic\n        IStableSwap3xUnderlying(address(crvPool)).add_liquidity(depositAmounts, 1);\n    }\n\n    function depositToCrvPool(\n        uint256 _daiAmount,\n        uint256 _usdcAmount,\n        uint256 _usdtAmount\n    ) external {\n        _depositToCrvPool(_daiAmount, _usdcAmount, _usdtAmount);\n    }\n\n    function withdrawAsFromCrvPool(\n        uint256 _lpAmount,\n        uint256 _minDai,\n        uint256 i\n    ) external {\n        _withdrawAsFromCrvPool(_lpAmount, _minDai, i);\n    }\n\n    function withdrawAllAs(uint256 i) external {\n        _withdrawAllAs(i);\n    }\n\n    function stakeAllLpToGauge() external {\n        _stakeAllLp();\n    }\n\n    function unstakeAllLp() external {\n        _unstakeAllLp();\n    }\n\n    function unstakeLp(uint256 _amount) external {\n        _unstakeLp(_amount);\n    }\n\n    function claimCrv() external {\n        _claimRewards();\n    }\n\n    // if using this contract on its own.\n    function approveLpForGauge() external {\n        IERC20(crvLp).safeApprove(crvGauge, 0);\n        IERC20(crvLp).safeApprove(crvGauge, type(uint256).max);\n    }\n\n    // if using this contract on its own.\n    function approveTokenForPool(address _token) external {\n        IERC20(_token).safeApprove(address(crvPool), 0);\n        IERC20(_token).safeApprove(address(crvPool), type(uint256).max);\n    }\n\n    function minimumLpPrice(uint256 _safeRate) external view returns (uint256) {\n        return _minimumLpPrice(_safeRate);\n    }\n}\n"
    },
    "contracts/test/ITokenTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface TokenLikeTest is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n\n    function decimals() external view returns (uint256);\n}\n"
    },
    "contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../../interfaces/vesper/IVesperPool.sol\";\nimport \"../../../interfaces/aave/IAave.sol\";\nimport \"../../Strategy.sol\";\nimport \"./CrvA3PoolStrategyBase.sol\";\n\n/// @title This strategy will deposit collateral token in Curve Aave 3Pool and earn interest.\ncontract CrvA3PoolAvaxStrategy is CrvA3PoolStrategyBase {\n    using SafeERC20 for IERC20;\n    address private constant CRV_POOL = 0x7f90122BF0700F9E7e1F688fe926940E8839F353;\n    address private constant LP = 0x1337BedC9D22ecbe766dF105c9623922A27963EC;\n    address private constant GAUGE = 0x5B5CFE992AdAC0C9D48E05854B2d91C73a003858;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        uint256 _collateralIdx,\n        string memory _name\n    ) CrvA3PoolStrategyBase(_pool, _swapManager, CRV_POOL, LP, GAUGE, _collateralIdx, _name) {\n        CRV = 0x47536F17F4fF30e64A96a7555826b8f9e66ec468;\n        WETH = 0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB;\n        reservedToken[LP] = true;\n        reservedToken[CRV] = true;\n        delete rewardTokens;\n        rewardTokens.push(CRV);\n    }\n\n    /// @dev Claimable rewards estimated into pool's collateral value\n    function claimableRewardsInCollateral() public view virtual override returns (uint256 rewardAsCollateral) {\n        uint256 _claimable;\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            _claimable = ILiquidityGaugeV3(crvGauge).claimable_reward(address(this), rewardTokens[i]);\n            if (_claimable > 0) {\n                (, uint256 _reward, ) =\n                    swapManager.bestOutputFixedInput(rewardTokens[i], address(collateralToken), _claimable);\n                rewardAsCollateral += _reward;\n            }\n        }\n    }\n\n    function _claimRewards() internal override {\n        ILiquidityGaugeV2(crvGauge).claim_rewards(address(this));\n    }\n}\n"
    },
    "contracts/strategies/curve/3Pool/CrvSBTCPoolStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../../interfaces/vesper/IVesperPool.sol\";\nimport \"../../Strategy.sol\";\nimport \"../CrvPoolStrategyBase.sol\";\n\n/// @title This strategy will deposit collateral token in Curve 3Pool and earn interest.\ncontract CrvSBTCPoolStrategy is CrvPoolStrategyBase {\n    address private constant THREEPOOL = 0x7fC77b5c7614E1533320Ea6DDc2Eb61fa00A9714;\n    address private constant THREECRV = 0x075b1bb99792c9E1041bA13afEf80C91a1e70fB3;\n    address private constant GAUGE = 0x705350c4BcD35c9441419DdD5d2f097d7a55410F;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        uint256 _collateralIdx,\n        string memory _name\n    ) CrvPoolStrategyBase(_pool, THREEPOOL, THREECRV, GAUGE, _swapManager, _collateralIdx, 3, _name) {}\n\n    function _init(address _crvPool, uint256 _n) internal virtual override {\n        for (uint256 i = 0; i < _n; i++) {\n            coins.push(IStableSwapV2(_crvPool).coins(int128((uint128(i)))));\n            coinDecimals.push(IERC20Metadata(coins[i]).decimals());\n        }\n    }\n\n    function _claimRewards() internal override {\n        ITokenMinter(CRV_MINTER).mint(crvGauge);\n        ILiquidityGaugeV2(crvGauge).claim_rewards(address(this));\n    }\n}\n"
    },
    "contracts/strategies/curve/3Pool/earn/EarnCrvSBTCPoolStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../CrvSBTCPoolStrategy.sol\";\nimport \"../../../Earn.sol\";\n\n//solhint-disable no-empty-blocks\ncontract EarnCrvSBTCPoolStrategy is CrvSBTCPoolStrategy, Earn {\n    using SafeERC20 for IERC20;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _dripToken,\n        string memory _name\n    ) CrvSBTCPoolStrategy(_pool, _swapManager, 1, _name) Earn(_dripToken) {}\n\n    function rebalance() external override(Strategy, CrvPoolStrategyBase) onlyKeeper {\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\n        if (_profit > 0) {\n            _convertCollateralToDrip(_profit);\n            _forwardEarning();\n        }\n        IVesperPool(pool).reportEarning(0, _loss, _payback);\n        _reinvest();\n        if (!depositError) {\n            uint256 depositLoss = _realizeLoss(IVesperPool(pool).totalDebtOf(address(this)));\n            if (depositLoss > _loss) IVesperPool(pool).reportLoss(depositLoss - _loss);\n        }\n    }\n\n    function _claimRewardsAndConvertTo(address _toToken) internal override(Strategy, CrvPoolStrategyBase) {\n        CrvPoolStrategyBase._claimRewardsAndConvertTo(_toToken);\n    }\n\n    function _setupOracles() internal override(Strategy, CrvPoolStrategyBase) {\n        CrvPoolStrategyBase._setupOracles();\n    }\n\n    function _generateReport()\n        internal\n        override(Strategy, CrvPoolStrategyBase)\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _payback\n        )\n    {\n        return CrvPoolStrategyBase._generateReport();\n    }\n}\n"
    },
    "contracts/strategies/curve/3Pool/Crv3PoolStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../../interfaces/vesper/IVesperPool.sol\";\nimport \"../../Strategy.sol\";\nimport \"../CrvPoolStrategyBase.sol\";\n\n/// @title This strategy will deposit collateral token in Curve 3Pool and earn interest.\ncontract Crv3PoolStrategy is CrvPoolStrategyBase {\n    // No. of pooled tokens in the Pool\n    uint256 private constant N = 3;\n\n    address private constant THREEPOOL = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\n    address private constant THREECRV = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\n    address private constant GAUGE = 0xbFcF63294aD7105dEa65aA58F8AE5BE2D9d0952A;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        uint256 _collateralIdx,\n        string memory _name\n    ) CrvPoolStrategyBase(_pool, THREEPOOL, THREECRV, GAUGE, _swapManager, _collateralIdx, N, _name) {\n        require(\n            IStableSwap3xUnderlying(THREEPOOL).coins(_collateralIdx) == address(IVesperPool(_pool).token()),\n            \"collateral-mismatch\"\n        );\n    }\n}\n"
    },
    "contracts/strategies/curve/4Pool/Crv4MetaPoolStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../../interfaces/vesper/IVesperPool.sol\";\nimport \"../../Strategy.sol\";\nimport \"../CrvPoolStrategyBase.sol\";\n\n/// @title This strategy will deposit collateral token in Curve a 4Pool Metapool and earn interest.\nabstract contract Crv4MetaPoolStrategy is CrvPoolStrategyBase {\n    using SafeERC20 for IERC20;\n\n    // No. of pooled tokens in the metapool\n    uint256 private constant N = 4;\n    // Curve Metapool Factory\n    address private constant FACTORY = 0xB9fC157394Af804a3578134A6585C0dc9cc990d4;\n    // Curve BASE-3CRV DepositZap Contract\n    address internal DEPOSIT_ZAP = 0xA79828DF1850E8a3A3064576f380D90aECDD3359;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _metapool,\n        address _gauge,\n        uint256 _collateralIdx,\n        string memory _name\n    ) CrvPoolStrategyBase(_pool, _metapool, _metapool, _gauge, _swapManager, _collateralIdx, N, _name) {\n        require(ILiquidityGaugeV2(_gauge).lp_token() == _metapool, \"invalid-gauge\");\n    }\n\n    function _init(\n        address _crvPool,\n        uint256 /* _n */\n    ) internal virtual override {\n        coins = IMetapoolFactory(FACTORY).get_underlying_coins(_crvPool);\n        coinDecimals = IMetapoolFactory(FACTORY).get_underlying_decimals(_crvPool);\n    }\n\n    function _approveToken(uint256 _amount) internal virtual override {\n        super._approveToken(_amount);\n        collateralToken.safeApprove(DEPOSIT_ZAP, _amount);\n        IERC20(crvLp).safeApprove(DEPOSIT_ZAP, _amount);\n    }\n\n    function _depositToCurve(uint256 _amt) internal virtual override returns (bool) {\n        if (_amt != 0) {\n            uint256[4] memory _depositAmounts;\n            _depositAmounts[collIdx] = _amt;\n            uint256 expectedOut =\n                _calcAmtOutAfterSlippage(\n                    IDepositZap4x(DEPOSIT_ZAP).calc_token_amount(crvLp, _depositAmounts, true),\n                    crvSlippage\n                );\n            uint256 _minLpAmount =\n                ((_amt * _getSafeUsdRate()) / crvPool.get_virtual_price()) * 10**(18 - coinDecimals[collIdx]);\n\n            if (expectedOut > _minLpAmount) _minLpAmount = expectedOut;\n\n            // solhint-disable-next-line no-empty-blocks\n            try IDepositZap4x(DEPOSIT_ZAP).add_liquidity(crvLp, _depositAmounts, _minLpAmount) {} catch Error(\n                string memory _reason\n            ) {\n                emit DepositFailed(_reason);\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function _withdrawAsFromCrvPool(\n        uint256 _lpAmount,\n        uint256 _minAmt,\n        uint256 _i\n    ) internal virtual override {\n        IDepositZap4x(DEPOSIT_ZAP).remove_liquidity_one_coin(crvLp, _lpAmount, SafeCast.toInt128(int256(_i)), _minAmt);\n    }\n\n    function getLpValueAs(uint256 _lpAmount, uint256 _i) public view virtual override returns (uint256) {\n        return\n            (_lpAmount != 0)\n                ? IDepositZap4x(DEPOSIT_ZAP).calc_withdraw_one_coin(crvLp, _lpAmount, SafeCast.toInt128(int256(_i)))\n                : 0;\n    }\n\n    function _claimRewards() internal virtual override {\n        ITokenMinter(CRV_MINTER).mint(crvGauge);\n        ILiquidityGaugeV2(crvGauge).claim_rewards(address(this));\n    }\n}\n"
    },
    "contracts/strategies/curve/4Pool/Crv4MetaPoolStrategyMIMPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./Crv4MetaPoolStrategy.sol\";\n\n//solhint-disable no-empty-blocks\ncontract Crv4MetaPoolStrategyMIMPool is Crv4MetaPoolStrategy {\n    // MIM-3CRV Metapool\n    // Composed of [ MIM , [ DAI, USDC, USDT ]]\n    address internal constant METAPOOL = 0x5a6A4D54456819380173272A5E8E9B9904BdF41B;\n    // Gauge for MIM-3CRV Metapool\n    address internal constant GAUGE = 0xd8b712d29381748dB89c36BCa0138d7c75866ddF;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        uint256 _collateralIdx,\n        string memory _name\n    ) Crv4MetaPoolStrategy(_pool, _swapManager, METAPOOL, GAUGE, _collateralIdx, _name) {}\n}\n"
    },
    "contracts/strategies/convex/4Pool/Convex4MetaPoolStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../../curve/4Pool/Crv4MetaPoolStrategy.sol\";\nimport \"../ConvexStrategyBase.sol\";\n\n/// @title This strategy will deposit collateral token in Curve 4MetaPool and stake lp token to convex.\nabstract contract Convex4MetaPoolStrategy is Crv4MetaPoolStrategy, ConvexStrategyBase {\n    using SafeERC20 for IERC20;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _metapool,\n        address _gauge,\n        uint256 _collateralIdx,\n        uint256 _convexPoolId,\n        string memory _name\n    )\n        Crv4MetaPoolStrategy(_pool, _swapManager, _metapool, _gauge, _collateralIdx, _name)\n        ConvexStrategyBase(_metapool, _convexPoolId)\n    {\n        oracleRouterIdx = 0;\n    }\n\n    /// @dev convex pool can add new rewards. This method refresh list.\n    function setRewardTokens(\n        address[] memory /*_rewardTokens*/\n    ) external override onlyKeeper {\n        rewardTokens = _getRewardTokens();\n        _approveToken(0);\n        _approveToken(MAX_UINT_VALUE);\n        _setupOracles();\n    }\n\n    function updateClaimRewards(bool _isClaimRewards) external onlyGovernor {\n        isClaimRewards = _isClaimRewards;\n    }\n\n    function _approveToken(uint256 _amount) internal virtual override {\n        IERC20(crvLp).safeApprove(BOOSTER, _amount);\n        super._approveToken(_amount);\n    }\n\n    function _stakeAllLp() internal override {\n        uint256 balance = IERC20(crvLp).balanceOf(address(this));\n        if (balance != 0) {\n            require(IConvex(BOOSTER).deposit(convexPoolId, balance, true), \"booster-deposit-failed\");\n        }\n    }\n\n    function _unstakeAllLp() internal override {\n        Rewards(cvxCrvRewards).withdrawAllAndUnwrap(isClaimRewards);\n    }\n\n    function _unstakeLp(uint256 _amount) internal override {\n        if (_amount != 0) {\n            require(Rewards(cvxCrvRewards).withdrawAndUnwrap(_amount, false), \"withdraw-and-unwrap-failed\");\n        }\n    }\n\n    function _claimRewards() internal override {\n        require(Rewards(cvxCrvRewards).getReward(address(this), true), \"reward-claim-failed\");\n    }\n\n    function totalStaked() public view override returns (uint256 total) {\n        total = Rewards(cvxCrvRewards).balanceOf(address(this));\n    }\n\n    function totalLp() public view override returns (uint256 total) {\n        total = IERC20(crvLp).balanceOf(address(this)) + Rewards(cvxCrvRewards).balanceOf(address(this));\n    }\n\n    /// @dev Claimable rewards estimated into pool's collateral value\n    function claimableRewardsInCollateral() public view virtual override returns (uint256 rewardAsCollateral) {\n        ClaimableRewardInfo[] memory _claimableRewardsInfo = _claimableRewards();\n        for (uint256 i = 0; i < _claimableRewardsInfo.length; i++) {\n            if (_claimableRewardsInfo[i].amount != 0) {\n                (, uint256 _reward, ) =\n                    swapManager.bestOutputFixedInput(\n                        _claimableRewardsInfo[i].token,\n                        address(collateralToken),\n                        _claimableRewardsInfo[i].amount\n                    );\n                rewardAsCollateral += _reward;\n            }\n        }\n    }\n}\n"
    },
    "contracts/strategies/convex/4Pool/Convex4MetaPoolStrategyMIMPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./Convex4MetaPoolStrategy.sol\";\n\n//solhint-disable no-empty-blocks\ncontract Convex4MetaPoolStrategyMIMPool is Convex4MetaPoolStrategy {\n    // MIM-3CRV Metapool\n    // Composed of [ MIM , [ DAI, USDC, USDT ]]\n    address internal constant METAPOOL = 0x5a6A4D54456819380173272A5E8E9B9904BdF41B;\n    // Gauge for MIM-3CRV Metapool\n    address internal constant GAUGE = 0xd8b712d29381748dB89c36BCa0138d7c75866ddF;\n    // Convex Pool ID for MIM-3CRV\n    uint256 internal constant CONVEX_POOL_ID = 40;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        uint256 _collateralIdx,\n        string memory _name\n    ) Convex4MetaPoolStrategy(_pool, _swapManager, METAPOOL, GAUGE, _collateralIdx, CONVEX_POOL_ID, _name) {\n        oracleRouterIdx = 1;\n    }\n}\n"
    },
    "contracts/strategies/convex/4Pool/Convex4MetaPoolStrategyIBBTCPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./Convex4MetaPoolStrategy.sol\";\n\n//solhint-disable no-empty-blocks\ncontract Convex4MetaPoolStrategyIBBTCPool is Convex4MetaPoolStrategy {\n    // ibbtc/sbtcCRV-f Metapool\n    // Composed of [ ibBTC , [ renBTC, WBTC, SBTC ] ]\n    address internal constant METAPOOL = 0xFbdCA68601f835b27790D98bbb8eC7f05FDEaA9B;\n    // Gauge for FRAX-3CRV Metapool\n    address internal constant GAUGE = 0x346C7BB1A7a6A30c8e81c14e90FC2f0FBddc54d8;\n    // Convex Pool ID for ibbtc/sbtcCRV-f\n    uint256 internal constant CONVEX_POOL_ID = 53;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        uint256 _collateralIdx,\n        string memory _name\n    ) Convex4MetaPoolStrategy(_pool, _swapManager, METAPOOL, GAUGE, _collateralIdx, CONVEX_POOL_ID, _name) {\n        oracleRouterIdx = 1;\n        // Curve sBTC DepositZap Contract\n        DEPOSIT_ZAP = 0x7AbDBAf29929e7F8621B757D2a7c04d78d633834;\n    }\n}\n"
    },
    "contracts/strategies/convex/4Pool/Convex4MetaPoolStrategyFRAXPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./Convex4MetaPoolStrategy.sol\";\n\n//solhint-disable no-empty-blocks\ncontract Convex4MetaPoolStrategyFRAXPool is Convex4MetaPoolStrategy {\n    // FRAX-3CRV Metapool\n    // Composed of [ FRAX , [ DAI, USDC, USDT ]]\n    address internal constant METAPOOL = 0xd632f22692FaC7611d2AA1C0D552930D43CAEd3B;\n    // Gauge for FRAX-3CRV Metapool\n    address internal constant GAUGE = 0x72E158d38dbd50A483501c24f792bDAAA3e7D55C;\n    // Convex Pool ID for FRAX-3CRV\n    uint256 internal constant CONVEX_POOL_ID = 32;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        uint256 _collateralIdx,\n        string memory _name\n    ) Convex4MetaPoolStrategy(_pool, _swapManager, METAPOOL, GAUGE, _collateralIdx, CONVEX_POOL_ID, _name) {\n        oracleRouterIdx = 1;\n    }\n}\n"
    },
    "contracts/strategies/curve/2Pool/Crv2PoolStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../../interfaces/vesper/IVesperPool.sol\";\nimport \"../../Strategy.sol\";\nimport \"../CrvPoolStrategyBase.sol\";\n\n/// @title This strategy will deposit collateral token in a Curve 2Pool and earn interest.\nabstract contract Crv2PoolStrategy is CrvPoolStrategyBase {\n    // No. of pooled tokens in the Pool\n    uint256 private constant N = 2;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _crvPool,\n        address _crvLp,\n        address _crvGauge,\n        uint256 _collateralIdx,\n        string memory _name\n    ) CrvPoolStrategyBase(_pool, _crvPool, _crvLp, _crvGauge, _swapManager, _collateralIdx, N, _name) {}\n\n    function _depositToCurve(uint256 _amt) internal virtual override returns (bool) {\n        if (_amt != 0) {\n            uint256[2] memory _depositAmounts;\n            _depositAmounts[collIdx] = _amt;\n            uint256 _expectedOut =\n                _calcAmtOutAfterSlippage(\n                    IStableSwap2x(address(crvPool)).calc_token_amount(_depositAmounts, true),\n                    crvSlippage\n                );\n            uint256 _minLpAmount =\n                _calcAmtOutAfterSlippage(\n                    ((_amt * _getSafeUsdRate()) / crvPool.get_virtual_price()) * 10**(18 - coinDecimals[collIdx]),\n                    crvSlippage\n                );\n            if (_expectedOut > _minLpAmount) {\n                _minLpAmount = _expectedOut;\n            }\n            // solhint-disable-next-line no-empty-blocks\n            try IStableSwap2x(address(crvPool)).add_liquidity(_depositAmounts, _minLpAmount) {} catch Error(\n                string memory reason\n            ) {\n                emit DepositFailed(reason);\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function _claimRewards() internal virtual override {\n        ITokenMinter(CRV_MINTER).mint(crvGauge);\n        ILiquidityGaugeV2(crvGauge).claim_rewards(address(this));\n    }\n}\n"
    },
    "contracts/strategies/curve/2Pool/Crv2PoolStrategyMIMUSTPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./Crv2PoolStrategy.sol\";\n\n//solhint-disable no-empty-blocks\ncontract Crv2PoolStrategyMIMUSTPool is Crv2PoolStrategy {\n    // MIM/UST LP Token\n    address internal constant CRV_LP = 0x55A8a39bc9694714E2874c1ce77aa1E599461E18;\n    // MIM/UST Pool\n    address internal constant CRV_POOL = 0x55A8a39bc9694714E2874c1ce77aa1E599461E18;\n    // MIM/UST Gauge\n    address internal constant GAUGE = 0xB518f5e3242393d4eC792BD3f44946A3b98d0E48;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        uint256 _collateralIdx,\n        string memory _name\n    ) Crv2PoolStrategy(_pool, _swapManager, CRV_POOL, CRV_LP, GAUGE, _collateralIdx, _name) {}\n}\n"
    },
    "contracts/strategies/curve/2Pool/Crv2PoolStrategyArbitrumUSDCUSDTPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./Crv2PoolStrategy.sol\";\n\ncontract Crv2PoolStrategyArbitrumUSDCUSDTPool is Crv2PoolStrategy {\n    // USDC/UST LP Token\n    address internal constant CRV_LP = 0x7f90122BF0700F9E7e1F688fe926940E8839F353;\n    // USDC/UST Pool\n    address internal constant CRV_POOL = 0x7f90122BF0700F9E7e1F688fe926940E8839F353;\n    // USDC/UST Gauge\n    address internal constant GAUGE = 0xbF7E49483881C76487b0989CD7d9A8239B20CA41;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        uint256 _collateralIdx,\n        string memory _name\n    ) Crv2PoolStrategy(_pool, _swapManager, CRV_POOL, CRV_LP, GAUGE, _collateralIdx, _name) {}\n}\n"
    },
    "contracts/strategies/convex/2Pool/Convex2PoolStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../../curve/2Pool/Crv2PoolStrategy.sol\";\nimport \"../ConvexStrategyBase.sol\";\n\n/// @title This strategy will deposit collateral token in a Curve 2Pool and stake lp token to convex.\nabstract contract Convex2PoolStrategy is Crv2PoolStrategy, ConvexStrategyBase {\n    using SafeERC20 for IERC20;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _crvPool,\n        address _crvLp,\n        address _crvGauge,\n        uint256 _collateralIdx,\n        uint256 _convexPoolId,\n        string memory _name\n    )\n        Crv2PoolStrategy(_pool, _swapManager, _crvPool, _crvLp, _crvGauge, _collateralIdx, _name)\n        ConvexStrategyBase(_crvLp, _convexPoolId)\n    {\n        oracleRouterIdx = 0;\n    }\n\n    /// @dev convex pool can add new rewards. This method refresh list.\n    function setRewardTokens(\n        address[] memory /*_rewardTokens*/\n    ) external override onlyKeeper {\n        rewardTokens = _getRewardTokens();\n        _approveToken(0);\n        _approveToken(MAX_UINT_VALUE);\n        _setupOracles();\n    }\n\n    function updateClaimRewards(bool _isClaimRewards) external onlyGovernor {\n        isClaimRewards = _isClaimRewards;\n    }\n\n    function _approveToken(uint256 _amount) internal virtual override {\n        IERC20(crvLp).safeApprove(BOOSTER, _amount);\n        super._approveToken(_amount);\n    }\n\n    function _stakeAllLp() internal override {\n        uint256 balance = IERC20(crvLp).balanceOf(address(this));\n        if (balance != 0) {\n            require(IConvex(BOOSTER).deposit(convexPoolId, balance, true), \"booster-deposit-failed\");\n        }\n    }\n\n    function _unstakeAllLp() internal override {\n        Rewards(cvxCrvRewards).withdrawAllAndUnwrap(isClaimRewards);\n    }\n\n    function _unstakeLp(uint256 _amount) internal override {\n        if (_amount != 0) {\n            require(Rewards(cvxCrvRewards).withdrawAndUnwrap(_amount, false), \"withdraw-and-unwrap-failed\");\n        }\n    }\n\n    function _claimRewards() internal override {\n        require(Rewards(cvxCrvRewards).getReward(address(this), true), \"reward-claim-failed\");\n    }\n\n    function totalStaked() public view override returns (uint256 total) {\n        total = Rewards(cvxCrvRewards).balanceOf(address(this));\n    }\n\n    function totalLp() public view override returns (uint256 total) {\n        total = IERC20(crvLp).balanceOf(address(this)) + Rewards(cvxCrvRewards).balanceOf(address(this));\n    }\n\n    /// @dev Claimable rewards estimated into pool's collateral value\n    function claimableRewardsInCollateral() public view virtual override returns (uint256 rewardAsCollateral) {\n        ClaimableRewardInfo[] memory _claimableRewardsInfo = _claimableRewards();\n        for (uint256 i = 0; i < _claimableRewardsInfo.length; i++) {\n            if (_claimableRewardsInfo[i].amount != 0) {\n                (, uint256 _reward, ) =\n                    swapManager.bestOutputFixedInput(\n                        _claimableRewardsInfo[i].token,\n                        address(collateralToken),\n                        _claimableRewardsInfo[i].amount\n                    );\n                rewardAsCollateral += _reward;\n            }\n        }\n    }\n}\n"
    },
    "contracts/strategies/convex/2Pool/Convex2PoolStrategyMIMUSTPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./Convex2PoolStrategy.sol\";\n\n//solhint-disable no-empty-blocks\ncontract Convex2PoolStrategyMIMUSTPool is Convex2PoolStrategy {\n    // MIM/UST LP Token\n    address internal constant CRV_LP = 0x55A8a39bc9694714E2874c1ce77aa1E599461E18;\n    // MIM/UST Pool\n    address internal constant CRV_POOL = 0x55A8a39bc9694714E2874c1ce77aa1E599461E18;\n    // MIM/UST Gauge\n    address internal constant GAUGE = 0xB518f5e3242393d4eC792BD3f44946A3b98d0E48;\n    // Convex Pool ID for MIM-UST\n    uint256 internal constant CONVEX_POOL_ID = 52;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        uint256 _collateralIdx,\n        string memory _name\n    ) Convex2PoolStrategy(_pool, _swapManager, CRV_POOL, CRV_LP, GAUGE, _collateralIdx, CONVEX_POOL_ID, _name) {\n        oracleRouterIdx = 1;\n    }\n}\n"
    },
    "contracts/pool/vfr/VFRBuffer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../interfaces/vesper/IVFRCoveragePool.sol\";\nimport \"../../interfaces/vesper/IVFRStablePool.sol\";\nimport \"../../interfaces/vesper/IVesperPool.sol\";\n\ncontract VFRBuffer {\n    using SafeERC20 for IERC20;\n\n    address public token;\n    address public stablePool;\n    address public coveragePool;\n    // Specifies for how long (in seconds) the buffer should be\n    // able to cover the stable pool's target APY requirements\n    uint256 public coverageTime;\n\n    event CoverageTimeUpdated(uint256 oldCoverageTime, uint256 newCoverageTime);\n\n    constructor(\n        address _stablePool,\n        address _coveragePool,\n        uint256 _coverageTime\n    ) {\n        address stablePoolToken = address(IVesperPool(_stablePool).token());\n        address coveragePoolToken = address(IVesperPool(_coveragePool).token());\n        require(stablePoolToken == coveragePoolToken, \"non-matching-tokens\");\n\n        token = stablePoolToken;\n        stablePool = _stablePool;\n        coveragePool = _coveragePool;\n        coverageTime = _coverageTime;\n    }\n\n    function target() external view returns (uint256 amount) {\n        uint256 targetAPY = IVFRStablePool(stablePool).targetAPY();\n        // Get the current price per share\n        uint256 fromPricePerShare = IVFRStablePool(stablePool).pricePerShare();\n        // Get the price per share that would cover the stable pool's APY requirements\n        uint256 toPricePerShare =\n            fromPricePerShare + (fromPricePerShare * targetAPY * coverageTime) / (365 * 24 * 3600 * 1e18);\n        // Get the amount needed to increase the current price per share to the coverage target\n        uint256 totalSupply = IVFRStablePool(stablePool).totalSupply();\n        uint256 fromTotalValue = (fromPricePerShare * totalSupply) / 1e18;\n        uint256 toTotalValue = (toPricePerShare * totalSupply) / 1e18;\n        if (toTotalValue > fromTotalValue) {\n            amount = toTotalValue - fromTotalValue;\n        }\n    }\n\n    function request(uint256 _amount) public {\n        // Make sure the requester is a valid strategy (either a stable pool one or a coverage pool one)\n        (bool activeInStablePool, , , , , , , ) = IVFRStablePool(stablePool).strategy(msg.sender);\n        (bool activeInCoveragePool, , , , , , , ) = IVFRCoveragePool(coveragePool).strategy(msg.sender);\n        require(activeInStablePool || activeInCoveragePool, \"invalid-strategy\");\n        // Make sure enough funds are available\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        require(balance >= _amount, \"insufficient-balance\");\n        IERC20(token).safeTransfer(msg.sender, _amount);\n    }\n\n    function flush() public {\n        require(IVFRStablePool(stablePool).isKeeper(msg.sender), \"not-a-keeper\");\n        // Transfer any outstanding funds to the coverage pool\n        IERC20(token).safeTransfer(coveragePool, IERC20(token).balanceOf(address(this)));\n    }\n\n    function updateCoverageTime(uint256 _coverageTime) external {\n        require(IVFRStablePool(stablePool).isKeeper(msg.sender), \"not-a-keeper\");\n        emit CoverageTimeUpdated(coverageTime, _coverageTime);\n        coverageTime = _coverageTime;\n    }\n}\n"
    },
    "contracts/pool/PoolAccountant.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"./Errors.sol\";\nimport \"../interfaces/vesper/IVesperPool.sol\";\n\ncontract PoolAccountantStorageV1 {\n    address public pool; // Address of Vesper pool\n    uint256 public totalDebtRatio; // Total debt ratio. This will keep some buffer amount in pool\n    uint256 public totalDebt; // Total debt. Sum of debt of all strategies.\n    address[] public strategies; // Array of strategies\n    address[] public withdrawQueue; // Array of strategy in the order in which funds should be withdrawn.\n}\n\ncontract PoolAccountantStorageV2 is PoolAccountantStorageV1 {\n    struct StrategyConfig {\n        bool active;\n        uint256 interestFee; // Strategy fee\n        uint256 debtRate; // Strategy can not borrow large amount in short durations. Can set big limit for trusted strategy\n        uint256 lastRebalance; // Timestamp of last rebalance\n        uint256 totalDebt; // Total outstanding debt strategy has\n        uint256 totalLoss; // Total loss that strategy has realized\n        uint256 totalProfit; // Total gain that strategy has realized\n        uint256 debtRatio; // % of asset allocation\n        uint256 externalDepositFee; // External deposit fee of strategy\n    }\n\n    mapping(address => StrategyConfig) public strategy; // Strategy address to its configuration\n\n    uint256 public externalDepositFee; // External deposit fee of Vesper pool\n}\n\n/// @title Accountant for Vesper pools which keep records of strategies.\ncontract PoolAccountant is Initializable, Context, PoolAccountantStorageV2 {\n    using SafeERC20 for IERC20;\n\n    string public constant VERSION = \"4.0.0\";\n    uint256 public constant MAX_BPS = 10_000;\n\n    event EarningReported(\n        address indexed strategy,\n        uint256 profit,\n        uint256 loss,\n        uint256 payback,\n        uint256 strategyDebt,\n        uint256 poolDebt,\n        uint256 creditLine\n    );\n    event StrategyAdded(\n        address indexed strategy,\n        uint256 interestFee,\n        uint256 debtRatio,\n        uint256 debtRate,\n        uint256 externalDepositFee\n    );\n    event StrategyRemoved(address indexed strategy);\n    event StrategyMigrated(\n        address indexed oldStrategy,\n        address indexed newStrategy,\n        uint256 interestFee,\n        uint256 debtRatio,\n        uint256 debtRate,\n        uint256 externalDepositFee\n    );\n    event UpdatedExternalDepositFee(address indexed strategy, uint256 previousFee, uint256 newFee);\n    event UpdatedInterestFee(address indexed strategy, uint256 previousInterestFee, uint256 newInterestFee);\n    event UpdatedPoolExternalDepositFee(uint256 previousFee, uint256 newFee);\n    event UpdatedStrategyDebtParams(address indexed strategy, uint256 debtRatio, uint256 debtRate);\n\n    /**\n     * @dev This init function meant to be called after proxy deployment.\n     * @dev DO NOT CALL it with proxy deploy\n     * @param _pool Address of Vesper pool proxy\n     */\n    function init(address _pool) public initializer {\n        require(_pool != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n        pool = _pool;\n    }\n\n    modifier onlyGovernor() {\n        require(IVesperPool(pool).governor() == _msgSender(), \"not-the-governor\");\n        _;\n    }\n\n    modifier onlyKeeper() {\n        require(\n            IVesperPool(pool).governor() == _msgSender() || IVesperPool(pool).isKeeper(_msgSender()),\n            \"not-a-keeper\"\n        );\n        _;\n    }\n\n    modifier onlyMaintainer() {\n        require(\n            IVesperPool(pool).governor() == _msgSender() || IVesperPool(pool).isMaintainer(_msgSender()),\n            \"not-a-maintainer\"\n        );\n        _;\n    }\n\n    modifier onlyPool() {\n        require(pool == _msgSender(), \"not-a-pool\");\n        _;\n    }\n\n    ////////////////////////////// Only Governor //////////////////////////////\n\n    /**\n     * @notice Add strategy. Once strategy is added it can call rebalance and\n     * borrow fund from pool and invest that fund in provider/lender.\n     * @dev Recalculate pool level external deposit fee after all state variables are updated.\n     * @param _strategy Strategy address\n     * @param _interestFee Fee on earnings from this strategy\n     * @param _debtRatio Pool fund allocation to this strategy\n     * @param _debtRate Debt rate per block\n     * @param _externalDepositFee External deposit fee of strategy\n     */\n    function addStrategy(\n        address _strategy,\n        uint256 _interestFee,\n        uint256 _debtRatio,\n        uint256 _debtRate,\n        uint256 _externalDepositFee\n    ) public onlyGovernor {\n        require(_strategy != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n        require(!strategy[_strategy].active, Errors.STRATEGY_IS_ACTIVE);\n        totalDebtRatio = totalDebtRatio + _debtRatio;\n        require(totalDebtRatio <= MAX_BPS, Errors.DEBT_RATIO_LIMIT_REACHED);\n        require(_interestFee <= MAX_BPS, Errors.FEE_LIMIT_REACHED);\n        require(_externalDepositFee <= MAX_BPS, Errors.FEE_LIMIT_REACHED);\n        StrategyConfig memory newStrategy =\n            StrategyConfig({\n                active: true,\n                interestFee: _interestFee,\n                debtRatio: _debtRatio,\n                totalDebt: 0,\n                totalProfit: 0,\n                totalLoss: 0,\n                debtRate: _debtRate,\n                lastRebalance: block.number,\n                externalDepositFee: _externalDepositFee\n            });\n        strategy[_strategy] = newStrategy;\n        strategies.push(_strategy);\n        withdrawQueue.push(_strategy);\n        emit StrategyAdded(_strategy, _interestFee, _debtRatio, _debtRate, _externalDepositFee);\n\n        // Recalculate pool level externalDepositFee. This should be called at the end of function\n        _recalculatePoolExternalDepositFee();\n    }\n\n    /**\n     * @notice Remove strategy and recalculate pool level external deposit fee.\n     * @dev Revoke and remove strategy from array. Update withdraw queue.\n     * Withdraw queue order should not change after remove.\n     * Strategy can be removed only after it has paid all debt.\n     * Use migrate strategy if debt is not paid and want to upgrade strategy.\n     */\n    function removeStrategy(uint256 _index) external onlyGovernor {\n        address _strategy = strategies[_index];\n        require(strategy[_strategy].active, Errors.STRATEGY_IS_NOT_ACTIVE);\n        require(strategy[_strategy].totalDebt == 0, Errors.TOTAL_DEBT_IS_NOT_ZERO);\n        // Adjust totalDebtRatio\n        totalDebtRatio -= strategy[_strategy].debtRatio;\n        // Remove strategy\n        delete strategy[_strategy];\n        strategies[_index] = strategies[strategies.length - 1];\n        strategies.pop();\n        address[] memory _withdrawQueue = new address[](strategies.length);\n        uint256 j;\n        // After above update, withdrawQueue.length > strategies.length\n        for (uint256 i = 0; i < withdrawQueue.length; i++) {\n            if (withdrawQueue[i] != _strategy) {\n                _withdrawQueue[j] = withdrawQueue[i];\n                j++;\n            }\n        }\n        withdrawQueue = _withdrawQueue;\n        emit StrategyRemoved(_strategy);\n\n        // Recalculate pool level externalDepositFee.\n        _recalculatePoolExternalDepositFee();\n    }\n\n    /**\n     * @notice Update external deposit fee of strategy and recalculate pool level external deposit fee.\n     * @param _strategy Strategy address for which external deposit fee is being updated\n     * @param _externalDepositFee New external deposit fee\n     */\n    function updateExternalDepositFee(address _strategy, uint256 _externalDepositFee) external onlyGovernor {\n        require(strategy[_strategy].active, Errors.STRATEGY_IS_NOT_ACTIVE);\n        require(_externalDepositFee <= MAX_BPS, Errors.FEE_LIMIT_REACHED);\n        uint256 _oldExternalDepositFee = strategy[_strategy].externalDepositFee;\n        // Write to storage\n        strategy[_strategy].externalDepositFee = _externalDepositFee;\n        emit UpdatedExternalDepositFee(_strategy, _oldExternalDepositFee, _externalDepositFee);\n\n        // Recalculate pool level externalDepositFee.\n        _recalculatePoolExternalDepositFee();\n    }\n\n    /**\n     * @notice Update interest fee of strategy\n     * @param _strategy Strategy address for which interest fee is being updated\n     * @param _interestFee New interest fee\n     */\n    function updateInterestFee(address _strategy, uint256 _interestFee) external onlyGovernor {\n        require(strategy[_strategy].active, Errors.STRATEGY_IS_NOT_ACTIVE);\n        require(_interestFee <= MAX_BPS, Errors.FEE_LIMIT_REACHED);\n        emit UpdatedInterestFee(_strategy, strategy[_strategy].interestFee, _interestFee);\n        strategy[_strategy].interestFee = _interestFee;\n    }\n\n    ///////////////////////////// Only Keeper /////////////////////////////\n    /**\n     * @notice Update debtRate per block.\n     * @param _strategy Strategy address for which debt rate is being updated\n     * @param _debtRate New debt rate\n     */\n    function updateDebtRate(address _strategy, uint256 _debtRate) external onlyKeeper {\n        require(strategy[_strategy].active, Errors.STRATEGY_IS_NOT_ACTIVE);\n        strategy[_strategy].debtRate = _debtRate;\n        emit UpdatedStrategyDebtParams(_strategy, strategy[_strategy].debtRatio, _debtRate);\n    }\n\n    /**\n     * @dev Transfer given ERC20 token to pool\n     * @param _fromToken Token address to sweep\n     */\n    function sweepERC20(address _fromToken) external virtual onlyKeeper {\n        IERC20(_fromToken).safeTransfer(pool, IERC20(_fromToken).balanceOf(address(this)));\n    }\n\n    ///////////////////////////// Only Maintainer /////////////////////////////\n    /**\n     * @notice Update debt ratio.\n     * @dev A strategy is retired when debtRatio is 0\n     * @dev As debtRatio impacts pool level external deposit fee hence recalculate it after updating debtRatio.\n     * @param _strategy Strategy address for which debt ratio is being updated\n     * @param _debtRatio New debt ratio\n     */\n    function updateDebtRatio(address _strategy, uint256 _debtRatio) external onlyMaintainer {\n        require(strategy[_strategy].active, Errors.STRATEGY_IS_NOT_ACTIVE);\n        // Update totalDebtRatio\n        totalDebtRatio = (totalDebtRatio - strategy[_strategy].debtRatio) + _debtRatio;\n        require(totalDebtRatio <= MAX_BPS, Errors.DEBT_RATIO_LIMIT_REACHED);\n        // Write to storage\n        strategy[_strategy].debtRatio = _debtRatio;\n        emit UpdatedStrategyDebtParams(_strategy, _debtRatio, strategy[_strategy].debtRate);\n\n        // Recalculate pool level externalDepositFee.\n        _recalculatePoolExternalDepositFee();\n    }\n\n    /**\n     * @notice Update withdraw queue. Withdraw queue is list of strategy in the order in which\n     * funds should be withdrawn.\n     * @dev Pool always keep some buffer amount to satisfy withdrawal request, any withdrawal\n     * request higher than buffer will withdraw from withdraw queue. So withdrawQueue[0] will\n     * be the first strategy where withdrawal request will be send.\n     * @param _withdrawQueue Ordered list of strategy.\n     */\n    function updateWithdrawQueue(address[] memory _withdrawQueue) external onlyMaintainer {\n        uint256 _length = _withdrawQueue.length;\n        require(_length == withdrawQueue.length && _length == strategies.length, Errors.INPUT_LENGTH_MISMATCH);\n        for (uint256 i = 0; i < _length; i++) {\n            require(strategy[_withdrawQueue[i]].active, Errors.STRATEGY_IS_NOT_ACTIVE);\n        }\n        withdrawQueue = _withdrawQueue;\n    }\n\n    //////////////////////////////// Only Pool ////////////////////////////////\n\n    /**\n     * @notice Migrate existing strategy to new strategy.\n     * @dev Migrating strategy aka old and new strategy should be of same type.\n     * @dev New strategy will replace old strategy in strategy mapping,\n     * strategies array, withdraw queue.\n     * @param _old Address of strategy being migrated\n     * @param _new Address of new strategy\n     */\n    function migrateStrategy(address _old, address _new) external onlyPool {\n        require(strategy[_old].active, Errors.STRATEGY_IS_NOT_ACTIVE);\n        require(!strategy[_new].active, Errors.STRATEGY_IS_ACTIVE);\n        StrategyConfig memory _newStrategy =\n            StrategyConfig({\n                active: true,\n                interestFee: strategy[_old].interestFee,\n                debtRatio: strategy[_old].debtRatio,\n                totalDebt: strategy[_old].totalDebt,\n                totalProfit: 0,\n                totalLoss: 0,\n                debtRate: strategy[_old].debtRate,\n                lastRebalance: strategy[_old].lastRebalance,\n                externalDepositFee: strategy[_old].externalDepositFee\n            });\n        delete strategy[_old];\n        strategy[_new] = _newStrategy;\n\n        // Strategies and withdrawQueue has same length but we still want\n        // to iterate over them in different loop.\n        for (uint256 i = 0; i < strategies.length; i++) {\n            if (strategies[i] == _old) {\n                strategies[i] = _new;\n                break;\n            }\n        }\n        for (uint256 i = 0; i < withdrawQueue.length; i++) {\n            if (withdrawQueue[i] == _old) {\n                withdrawQueue[i] = _new;\n                break;\n            }\n        }\n        emit StrategyMigrated(\n            _old,\n            _new,\n            strategy[_new].interestFee,\n            strategy[_new].debtRatio,\n            strategy[_new].debtRate,\n            strategy[_new].externalDepositFee\n        );\n    }\n\n    /**\n     * @dev Strategy call this in regular interval.\n     * @param _profit yield generated by strategy. Strategy get performance fee on this amount\n     * @param _loss  Reduce debt ,also reduce debtRatio, increase loss in record.\n     * @param _payback strategy willing to payback outstanding above debtLimit. no performance fee on this amount.\n     *  when governance has reduced debtRatio of strategy, strategy will report profit and payback amount separately.\n     */\n    function reportEarning(\n        address _strategy,\n        uint256 _profit,\n        uint256 _loss,\n        uint256 _payback\n    )\n        external\n        onlyPool\n        returns (\n            uint256 _actualPayback,\n            uint256 _creditLine,\n            uint256 _fee\n        )\n    {\n        require(strategy[_strategy].active, Errors.STRATEGY_IS_NOT_ACTIVE);\n        require(IVesperPool(pool).token().balanceOf(_strategy) >= (_profit + _payback), Errors.INSUFFICIENT_BALANCE);\n        if (_loss != 0) {\n            _reportLoss(_strategy, _loss);\n        }\n\n        uint256 _overLimitDebt = _excessDebt(_strategy);\n        _actualPayback = _min(_overLimitDebt, _payback);\n        if (_actualPayback != 0) {\n            strategy[_strategy].totalDebt -= _actualPayback;\n            totalDebt -= _actualPayback;\n        }\n        _creditLine = _availableCreditLimit(_strategy);\n        if (_creditLine != 0) {\n            strategy[_strategy].totalDebt += _creditLine;\n            totalDebt += _creditLine;\n        }\n        if (_profit != 0) {\n            strategy[_strategy].totalProfit += _profit;\n            _fee = (_profit * strategy[_strategy].interestFee) / MAX_BPS;\n        }\n        strategy[_strategy].lastRebalance = block.number;\n        emit EarningReported(\n            _strategy,\n            _profit,\n            _loss,\n            _actualPayback,\n            strategy[_strategy].totalDebt,\n            totalDebt,\n            _creditLine\n        );\n        return (_actualPayback, _creditLine, _fee);\n    }\n\n    /**\n     * @notice Update strategy loss.\n     * @param _strategy Strategy which incur loss\n     * @param _loss Loss of strategy\n     */\n    function reportLoss(address _strategy, uint256 _loss) external onlyPool {\n        require(strategy[_strategy].active, Errors.STRATEGY_IS_NOT_ACTIVE);\n        _reportLoss(_strategy, _loss);\n    }\n\n    /**\n     * @notice Decrease debt of strategy, also decrease totalDebt\n     * @dev In case of withdraw from strategy, pool will decrease debt by amount withdrawn\n     * @param _strategy Strategy Address\n     * @param _decreaseBy Amount by which strategy debt will be decreased\n     */\n    function decreaseDebt(address _strategy, uint256 _decreaseBy) external onlyPool {\n        // A strategy may send more than its debt. This should never fail\n        _decreaseBy = _min(strategy[_strategy].totalDebt, _decreaseBy);\n        strategy[_strategy].totalDebt -= _decreaseBy;\n        totalDebt -= _decreaseBy;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @notice Get available credit limit of strategy. This is the amount strategy can borrow from pool\n     * @dev Available credit limit is calculated based on current debt of pool and strategy, current debt limit of pool and strategy.\n     * credit available = min(pool's debt limit, strategy's debt limit, max debt per rebalance)\n     * when some strategy do not pay back outstanding debt, this impact credit line of other strategy if totalDebt of pool >= debtLimit of pool\n     * @param _strategy Strategy address\n     */\n    function availableCreditLimit(address _strategy) external view returns (uint256) {\n        return _availableCreditLimit(_strategy);\n    }\n\n    /**\n     * @notice Debt above current debt limit\n     * @param _strategy Address of strategy\n     */\n    function excessDebt(address _strategy) external view returns (uint256) {\n        return _excessDebt(_strategy);\n    }\n\n    /// @notice Return strategies array\n    function getStrategies() external view returns (address[] memory) {\n        return strategies;\n    }\n\n    /// @notice Return withdrawQueue\n    function getWithdrawQueue() external view returns (address[] memory) {\n        return withdrawQueue;\n    }\n\n    /**\n     * @notice Get total debt of given strategy\n     * @param _strategy Strategy address\n     */\n    function totalDebtOf(address _strategy) external view returns (uint256) {\n        return strategy[_strategy].totalDebt;\n    }\n\n    /// @notice Recalculate pool external deposit fee.\n    /// @dev As it uses state variables for calculation, make sure to call it only after updating state variables.\n    function _recalculatePoolExternalDepositFee() internal {\n        uint256 _len = strategies.length;\n        uint256 _externalDepositFee;\n\n        // calculate poolExternalDepositFee and weightedFee for each strategy\n        if (totalDebtRatio != 0) {\n            for (uint256 i = 0; i < _len; i++) {\n                _externalDepositFee +=\n                    (strategy[strategies[i]].externalDepositFee * strategy[strategies[i]].debtRatio) /\n                    totalDebtRatio;\n            }\n        }\n\n        // Update externalDepositFee and emit event\n        emit UpdatedPoolExternalDepositFee(externalDepositFee, externalDepositFee = _externalDepositFee);\n    }\n\n    /**\n     * @dev When strategy report loss, its debtRatio decreases to get fund back quickly.\n     * Reduction is debt ratio is reduction in credit limit\n     */\n    function _reportLoss(address _strategy, uint256 _loss) internal {\n        uint256 _currentDebt = strategy[_strategy].totalDebt;\n        require(_currentDebt >= _loss, Errors.LOSS_TOO_HIGH);\n        strategy[_strategy].totalLoss += _loss;\n        strategy[_strategy].totalDebt -= _loss;\n        totalDebt -= _loss;\n        uint256 _deltaDebtRatio =\n            _min((_loss * MAX_BPS) / IVesperPool(pool).totalValue(), strategy[_strategy].debtRatio);\n        strategy[_strategy].debtRatio -= _deltaDebtRatio;\n        totalDebtRatio -= _deltaDebtRatio;\n    }\n\n    function _availableCreditLimit(address _strategy) internal view returns (uint256) {\n        if (IVesperPool(pool).stopEverything()) {\n            return 0;\n        }\n        uint256 _totalValue = IVesperPool(pool).totalValue();\n        uint256 _maxDebt = (strategy[_strategy].debtRatio * _totalValue) / MAX_BPS;\n        uint256 _currentDebt = strategy[_strategy].totalDebt;\n        if (_currentDebt >= _maxDebt) {\n            return 0;\n        }\n        uint256 _poolDebtLimit = (totalDebtRatio * _totalValue) / MAX_BPS;\n        if (totalDebt >= _poolDebtLimit) {\n            return 0;\n        }\n        uint256 _available = _maxDebt - _currentDebt;\n        _available = _min(_min(IVesperPool(pool).tokensHere(), _available), _poolDebtLimit - totalDebt);\n        _available = _min(\n            (block.number - strategy[_strategy].lastRebalance) * strategy[_strategy].debtRate,\n            _available\n        );\n        return _available;\n    }\n\n    function _excessDebt(address _strategy) internal view returns (uint256) {\n        uint256 _currentDebt = strategy[_strategy].totalDebt;\n        if (IVesperPool(pool).stopEverything()) {\n            return _currentDebt;\n        }\n        uint256 _maxDebt = (strategy[_strategy].debtRatio * IVesperPool(pool).totalValue()) / MAX_BPS;\n        return _currentDebt > _maxDebt ? (_currentDebt - _maxDebt) : 0;\n    }\n\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n"
    },
    "contracts/pool/PoolRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../interfaces/vesper/IPoolRewards.sol\";\nimport \"../interfaces/vesper/IVesperPool.sol\";\n\ncontract PoolRewardsStorage {\n    /// Vesper pool address\n    address public pool;\n\n    /// Array of reward token addresses\n    address[] public rewardTokens;\n\n    /// Reward token to valid/invalid flag mapping\n    mapping(address => bool) public isRewardToken;\n\n    /// Reward token to period ending of current reward\n    mapping(address => uint256) public periodFinish;\n\n    /// Reward token to current reward rate mapping\n    mapping(address => uint256) public rewardRates;\n\n    /// Reward token to Duration of current reward distribution\n    mapping(address => uint256) public rewardDuration;\n\n    /// Reward token to Last reward drip update time stamp mapping\n    mapping(address => uint256) public lastUpdateTime;\n\n    /// Reward token to Reward per token mapping. Calculated and stored at last drip update\n    mapping(address => uint256) public rewardPerTokenStored;\n\n    /// Reward token => User => Reward per token stored at last reward update\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\n\n    /// RewardToken => User => Rewards earned till last reward update\n    mapping(address => mapping(address => uint256)) public rewards;\n}\n\n/// @title Distribute rewards based on vesper pool balance and supply\ncontract PoolRewards is Initializable, IPoolRewards, ReentrancyGuard, PoolRewardsStorage {\n    string public constant VERSION = \"4.0.0\";\n    using SafeERC20 for IERC20;\n\n    /**\n     * @dev Called by proxy to initialize this contract\n     * @param _pool Vesper pool address\n     * @param _rewardTokens Array of reward token addresses\n     */\n    function initialize(address _pool, address[] memory _rewardTokens) public initializer {\n        require(_pool != address(0), \"pool-address-is-zero\");\n        require(_rewardTokens.length != 0, \"invalid-reward-tokens\");\n        pool = _pool;\n        rewardTokens = _rewardTokens;\n        for (uint256 i = 0; i < _rewardTokens.length; i++) {\n            isRewardToken[_rewardTokens[i]] = true;\n        }\n    }\n\n    modifier onlyAuthorized() {\n        require(msg.sender == IVesperPool(pool).governor(), \"not-authorized\");\n        _;\n    }\n\n    /**\n     * @notice Notify that reward is added. Only authorized caller can call\n     * @dev Also updates reward rate and reward earning period.\n     * @param _rewardTokens Tokens being rewarded\n     * @param _rewardAmounts Rewards amount for token on same index in rewardTokens array\n     * @param _rewardDurations Duration for which reward will be distributed\n     */\n    function notifyRewardAmount(\n        address[] memory _rewardTokens,\n        uint256[] memory _rewardAmounts,\n        uint256[] memory _rewardDurations\n    ) external virtual override onlyAuthorized {\n        _notifyRewardAmount(_rewardTokens, _rewardAmounts, _rewardDurations, IERC20(pool).totalSupply());\n    }\n\n    function notifyRewardAmount(\n        address _rewardToken,\n        uint256 _rewardAmount,\n        uint256 _rewardDuration\n    ) external virtual override onlyAuthorized {\n        _notifyRewardAmount(_rewardToken, _rewardAmount, _rewardDuration, IERC20(pool).totalSupply());\n    }\n\n    /// @notice Add new reward token in existing rewardsToken array\n    function addRewardToken(address _newRewardToken) external onlyAuthorized {\n        require(_newRewardToken != address(0), \"reward-token-address-zero\");\n        require(!isRewardToken[_newRewardToken], \"reward-token-already-exist\");\n        emit RewardTokenAdded(_newRewardToken, rewardTokens);\n        rewardTokens.push(_newRewardToken);\n        isRewardToken[_newRewardToken] = true;\n    }\n\n    /**\n     * @notice Claim earned rewards.\n     * @dev This function will claim rewards for all tokens being rewarded\n     */\n    function claimReward(address _account) external virtual override nonReentrant {\n        uint256 _totalSupply = IERC20(pool).totalSupply();\n        uint256 _balance = IERC20(pool).balanceOf(_account);\n        uint256 _len = rewardTokens.length;\n        for (uint256 i = 0; i < _len; i++) {\n            address _rewardToken = rewardTokens[i];\n            _updateReward(_rewardToken, _account, _totalSupply, _balance);\n\n            // Claim rewards\n            uint256 _reward = rewards[_rewardToken][_account];\n            if (_reward != 0 && _reward <= IERC20(_rewardToken).balanceOf(address(this))) {\n                _claimReward(_rewardToken, _account, _reward);\n                emit RewardPaid(_account, _rewardToken, _reward);\n            }\n        }\n    }\n\n    /**\n     * @notice Updated reward for given account.\n     */\n    function updateReward(address _account) external override {\n        uint256 _totalSupply = IERC20(pool).totalSupply();\n        uint256 _balance = IERC20(pool).balanceOf(_account);\n        uint256 _len = rewardTokens.length;\n        for (uint256 i = 0; i < _len; i++) {\n            _updateReward(rewardTokens[i], _account, _totalSupply, _balance);\n        }\n    }\n\n    /**\n     * @notice Returns claimable reward amount.\n     * @return _rewardTokens Array of tokens being rewarded\n     * @return _claimableAmounts Array of claimable for token on same index in rewardTokens\n     */\n    function claimable(address _account)\n        external\n        view\n        virtual\n        override\n        returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts)\n    {\n        uint256 _totalSupply = IERC20(pool).totalSupply();\n        uint256 _balance = IERC20(pool).balanceOf(_account);\n        uint256 _len = rewardTokens.length;\n        _claimableAmounts = new uint256[](_len);\n        for (uint256 i = 0; i < _len; i++) {\n            _claimableAmounts[i] = _claimable(rewardTokens[i], _account, _totalSupply, _balance);\n        }\n        _rewardTokens = rewardTokens;\n    }\n\n    /// @notice Provides easy access to all rewardTokens\n    function getRewardTokens() external view returns (address[] memory) {\n        return rewardTokens;\n    }\n\n    /// @notice Returns timestamp of last reward update\n    function lastTimeRewardApplicable(address _rewardToken) public view override returns (uint256) {\n        return block.timestamp < periodFinish[_rewardToken] ? block.timestamp : periodFinish[_rewardToken];\n    }\n\n    function rewardForDuration()\n        external\n        view\n        override\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration)\n    {\n        uint256 _len = rewardTokens.length;\n        _rewardForDuration = new uint256[](_len);\n        for (uint256 i = 0; i < _len; i++) {\n            _rewardForDuration[i] = rewardRates[rewardTokens[i]] * rewardDuration[rewardTokens[i]];\n        }\n        _rewardTokens = rewardTokens;\n    }\n\n    /**\n     * @notice Rewards rate per pool token\n     * @return _rewardTokens Array of tokens being rewarded\n     * @return _rewardPerTokenRate Array of Rewards rate for token on same index in rewardTokens\n     */\n    function rewardPerToken()\n        external\n        view\n        override\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate)\n    {\n        uint256 _totalSupply = IERC20(pool).totalSupply();\n        uint256 _len = rewardTokens.length;\n        _rewardPerTokenRate = new uint256[](_len);\n        for (uint256 i = 0; i < _len; i++) {\n            _rewardPerTokenRate[i] = _rewardPerToken(rewardTokens[i], _totalSupply);\n        }\n        _rewardTokens = rewardTokens;\n    }\n\n    function _claimable(\n        address _rewardToken,\n        address _account,\n        uint256 _totalSupply,\n        uint256 _balance\n    ) internal view returns (uint256) {\n        uint256 _rewardPerTokenAvailable =\n            _rewardPerToken(_rewardToken, _totalSupply) - userRewardPerTokenPaid[_rewardToken][_account];\n        uint256 _rewardsEarnedSinceLastUpdate = (_balance * _rewardPerTokenAvailable) / 1e18;\n        return rewards[_rewardToken][_account] + _rewardsEarnedSinceLastUpdate;\n    }\n\n    function _claimReward(\n        address _rewardToken,\n        address _account,\n        uint256 _reward\n    ) internal virtual {\n        // Mark reward as claimed\n        rewards[_rewardToken][_account] = 0;\n        // Transfer reward\n        IERC20(_rewardToken).safeTransfer(_account, _reward);\n    }\n\n    // There are scenarios when extending contract will override external methods and\n    // end up calling internal function. Hence providing internal functions\n    function _notifyRewardAmount(\n        address[] memory _rewardTokens,\n        uint256[] memory _rewardAmounts,\n        uint256[] memory _rewardDurations,\n        uint256 _totalSupply\n    ) internal {\n        uint256 _len = _rewardTokens.length;\n        uint256 _amountsLen = _rewardAmounts.length;\n        uint256 _durationsLen = _rewardDurations.length;\n        require(_len != 0, \"invalid-reward-tokens\");\n        require(_amountsLen != 0, \"invalid-reward-amounts\");\n        require(_durationsLen != 0, \"invalid-reward-durations\");\n        require(_len == _amountsLen && _len == _durationsLen, \"array-length-mismatch\");\n        for (uint256 i = 0; i < _len; i++) {\n            _notifyRewardAmount(_rewardTokens[i], _rewardAmounts[i], _rewardDurations[i], _totalSupply);\n        }\n    }\n\n    function _notifyRewardAmount(\n        address _rewardToken,\n        uint256 _rewardAmount,\n        uint256 _rewardDuration,\n        uint256 _totalSupply\n    ) internal {\n        require(_rewardToken != address(0), \"incorrect-reward-token\");\n        require(_rewardAmount != 0, \"incorrect-reward-amount\");\n        require(_rewardDuration != 0, \"incorrect-reward-duration\");\n        require(isRewardToken[_rewardToken], \"invalid-reward-token\");\n\n        // Update rewards earned so far\n        rewardPerTokenStored[_rewardToken] = _rewardPerToken(_rewardToken, _totalSupply);\n        if (block.timestamp >= periodFinish[_rewardToken]) {\n            rewardRates[_rewardToken] = _rewardAmount / _rewardDuration;\n        } else {\n            uint256 remainingPeriod = periodFinish[_rewardToken] - block.timestamp;\n\n            uint256 leftover = remainingPeriod * rewardRates[_rewardToken];\n            rewardRates[_rewardToken] = (_rewardAmount + leftover) / _rewardDuration;\n        }\n        // Safety check\n        uint256 balance = IERC20(_rewardToken).balanceOf(address(this));\n        require(rewardRates[_rewardToken] <= (balance / _rewardDuration), \"rewards-too-high\");\n        // Start new drip time\n        rewardDuration[_rewardToken] = _rewardDuration;\n        lastUpdateTime[_rewardToken] = block.timestamp;\n        periodFinish[_rewardToken] = block.timestamp + _rewardDuration;\n        emit RewardAdded(_rewardToken, _rewardAmount, _rewardDuration);\n    }\n\n    function _rewardPerToken(address _rewardToken, uint256 _totalSupply) internal view returns (uint256) {\n        if (_totalSupply == 0) {\n            return rewardPerTokenStored[_rewardToken];\n        }\n\n        uint256 _timeSinceLastUpdate = lastTimeRewardApplicable(_rewardToken) - lastUpdateTime[_rewardToken];\n        uint256 _rewardsSinceLastUpdate = _timeSinceLastUpdate * rewardRates[_rewardToken];\n        uint256 _rewardsPerTokenSinceLastUpdate = (_rewardsSinceLastUpdate * 1e18) / _totalSupply;\n        return rewardPerTokenStored[_rewardToken] + _rewardsPerTokenSinceLastUpdate;\n    }\n\n    function _updateReward(\n        address _rewardToken,\n        address _account,\n        uint256 _totalSupply,\n        uint256 _balance\n    ) internal {\n        uint256 _rewardPerTokenStored = _rewardPerToken(_rewardToken, _totalSupply);\n        rewardPerTokenStored[_rewardToken] = _rewardPerTokenStored;\n        lastUpdateTime[_rewardToken] = lastTimeRewardApplicable(_rewardToken);\n        if (_account != address(0)) {\n            rewards[_rewardToken][_account] = _claimable(_rewardToken, _account, _totalSupply, _balance);\n            userRewardPerTokenPaid[_rewardToken][_account] = _rewardPerTokenStored;\n        }\n    }\n}\n"
    },
    "contracts/pool/earn/VesperEarnDrip.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../PoolRewards.sol\";\nimport \"../../interfaces/vesper/IVesperPool.sol\";\nimport \"../../interfaces/token/IToken.sol\";\n\ncontract VesperEarnDrip is PoolRewards {\n    TokenLike internal constant WETH = TokenLike(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n\n    using SafeERC20 for IERC20;\n\n    event DripRewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\n    event GrowTokenUpdated(address indexed oldGrowToken, address indexed newGrowToken);\n\n    address public growToken;\n\n    receive() external payable {\n        require(msg.sender == address(WETH), \"deposits-not-allowed\");\n    }\n\n    /**\n     * @notice Returns claimable reward amount.\n     * @dev In case of growToken it will return the actual underlying value\n     * @return _rewardTokens Array of tokens being rewarded\n     * @return _claimableAmounts Array of claimable for token on same index in rewardTokens\n     */\n    function claimable(address _account)\n        external\n        view\n        override\n        returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts)\n    {\n        uint256 _totalSupply = IERC20(pool).totalSupply();\n        uint256 _balance = IERC20(pool).balanceOf(_account);\n        uint256 _len = rewardTokens.length;\n        _claimableAmounts = new uint256[](_len);\n        for (uint256 i = 0; i < _len; i++) {\n            uint256 _claimableAmount = _claimable(rewardTokens[i], _account, _totalSupply, _balance);\n            if (rewardTokens[i] == growToken) {\n                _claimableAmount = _calculateRewardInDripToken(growToken, _claimableAmount);\n            }\n            _claimableAmounts[i] = _claimableAmount;\n        }\n        _rewardTokens = rewardTokens;\n    }\n\n    /**\n     * @dev Notify that reward is added.\n     * Also updates reward rate and reward earning period.\n     */\n    function notifyRewardAmount(\n        address _rewardToken,\n        uint256 _rewardAmount,\n        uint256 _rewardDuration\n    ) external override {\n        (bool isStrategy, , , , , , , ) = IVesperPool(pool).strategy(msg.sender);\n        require(\n            msg.sender == IVesperPool(pool).governor() || (isRewardToken[_rewardToken] && isStrategy),\n            \"not-authorized\"\n        );\n        super._notifyRewardAmount(_rewardToken, _rewardAmount, _rewardDuration, IVesperPool(pool).totalSupply());\n    }\n\n    /**\n     * @notice Defines which rewardToken is a growToken\n     * @dev growToken is used to check whether to call withdraw\n     * from Grow Pool or not\n     */\n    function updateGrowToken(address _newGrowToken) external onlyAuthorized {\n        require(_newGrowToken != address(0), \"grow-token-address-zero\");\n        require(isRewardToken[_newGrowToken], \"grow-token-not-reward-token\");\n        emit GrowTokenUpdated(growToken, _newGrowToken);\n        growToken = _newGrowToken;\n    }\n\n    /**\n     * @notice Claim earned rewards in dripToken.\n     * @dev Withdraws from the Grow Pool and transfers the amount to _account\n     * @dev Claim rewards only if reward in dripToken is non zero\n     */\n    function _claimReward(\n        address _rewardToken,\n        address _account,\n        uint256 _reward\n    ) internal override {\n        if (_rewardToken == growToken) {\n            // Calculate reward in drip token\n            uint256 _rewardInDripToken = _calculateRewardInDripToken(_rewardToken, _reward);\n            // If reward in drip token is non zero\n            if (_rewardInDripToken != 0) {\n                // Mark reward as claimed\n                rewards[_rewardToken][_account] = 0;\n\n                // Automatically unwraps the Grow Pool token AKA _rewardToken into the dripToken\n                IERC20 _dripToken = IVesperPool(_rewardToken).token();\n                uint256 _dripBalanceBefore = _dripToken.balanceOf(address(this));\n                IVesperPool(_rewardToken).withdraw(_reward);\n                uint256 _dripTokenAmount = _dripToken.balanceOf(address(this)) - _dripBalanceBefore;\n                if (address(_dripToken) == address(WETH)) {\n                    WETH.withdraw(_dripTokenAmount);\n                    Address.sendValue(payable(_account), _dripTokenAmount);\n                } else {\n                    _dripToken.safeTransfer(_account, _dripTokenAmount);\n                }\n                emit DripRewardPaid(_account, address(_dripToken), _dripTokenAmount);\n            }\n        } else {\n            // Behave as normal PoolRewards, no unwrap needed\n            super._claimReward(_rewardToken, _account, _reward);\n        }\n    }\n\n    /// @dev Here _rewardToken AKA growToken is Vesper Grow Pool which can be V2 or V3 pool.\n    /// V2 and V3 pool has different signature to read price per share\n    function _calculateRewardInDripToken(address _rewardToken, uint256 _reward) private view returns (uint256) {\n        uint256 _pricePerShare;\n        // Try reading price per share using V3 pool signature, if this fails catch block will execute\n        try IVesperPool(_rewardToken).pricePerShare() returns (uint256 _pricePerShareV3) {\n            _pricePerShare = _pricePerShareV3;\n        } catch {\n            // If try fails, read price per share using V2 pool signature\n            _pricePerShare = IVesperPool(_rewardToken).getPricePerShare();\n        }\n        // Calculate reward in dripToken, as _reward is share of Grow Pool AKA growToken AKA _rewardToken\n        return (_pricePerShare * _reward) / 1e18;\n    }\n}\n"
    },
    "contracts/interfaces/aave/IAaveV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface AaveAddressesProvider {\n    function getLendingPool() external view returns (address);\n\n    function getLendingPoolCore() external view returns (address);\n}\n\ninterface AavePool {\n    function deposit(\n        address _reserve,\n        uint256 _amount,\n        uint16 _referralCode\n    ) external payable;\n}\n\ninterface AavePoolCore {\n    function getReserveATokenAddress(address _reserve) external view returns (address);\n\n    function getReserveAvailableLiquidity(address _reserve) external view returns (uint256);\n}\n\ninterface AToken is IERC20 {\n    function redeem(uint256 _amount) external;\n\n    function principalBalanceOf(address _user) external view returns (uint256);\n}\n"
    },
    "contracts/strategies/aave/AaveV1Strategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../../interfaces/aave/IAaveV1.sol\";\nimport \"../Strategy.sol\";\n\n/// @dev This strategy will deposit collateral token in Aave and earn interest.\ncontract AaveV1Strategy is Strategy {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"4.0.0\";\n\n    AaveAddressesProvider public aaveAddressesProvider =\n        AaveAddressesProvider(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8);\n    AavePool public immutable aaveLendingPool;\n    AavePoolCore public immutable aaveLendingPoolCore;\n\n    AToken internal immutable aToken;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _receiptToken,\n        string memory _name\n    ) Strategy(_pool, _swapManager, _receiptToken) {\n        require(_receiptToken != address(0), \"aToken-address-is-zero\");\n        aToken = AToken(_receiptToken);\n        aaveLendingPool = AavePool(aaveAddressesProvider.getLendingPool());\n        aaveLendingPoolCore = AavePoolCore(aaveAddressesProvider.getLendingPoolCore());\n        NAME = _name;\n    }\n\n    /**\n     * @notice Report total value\n     * @dev aToken and collateral are 1:1 so total aTokens are totalValue\n     */\n    function totalValue() public view virtual override returns (uint256) {\n        return aToken.balanceOf(address(this));\n    }\n\n    function isReservedToken(address _token) public view override returns (bool) {\n        return _token == address(aToken);\n    }\n\n    /// @notice Large approval of token\n    function _approveToken(uint256 _amount) internal override {\n        collateralToken.safeApprove(pool, _amount);\n        collateralToken.safeApprove(address(aaveLendingPoolCore), _amount);\n    }\n\n    /// @notice No action needed before migration\n    //solhint-disable no-empty-blocks\n    function _beforeMigration(address _newStrategy) internal override {}\n\n    /// @notice Deposit asset into Aave\n    function _deposit(address _asset, uint256 _amount) internal {\n        if (_amount != 0) {\n            aaveLendingPool.deposit(_asset, _amount, 0);\n        }\n    }\n\n    /// @notice Withdraw collateral to payback excess debt\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {\n        if (_excessDebt != 0) {\n            _payback = _safeWithdraw(_excessDebt);\n        }\n    }\n\n    /**\n     * @notice Calculate earning and withdraw it from Aave.\n     * @dev If somehow we got some collateral token in strategy then we want to\n     *  include those in profit. That's why we used 'return' outside 'if' condition.\n     * @param _totalDebt Total collateral debt of this strategy\n     * @return profit in collateral token\n     */\n    function _realizeProfit(uint256 _totalDebt) internal override returns (uint256) {\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\n        if (_aTokenBalance > _totalDebt) {\n            _withdrawHere(_aTokenBalance - _totalDebt);\n        }\n        return collateralToken.balanceOf(address(this));\n    }\n\n    /**\n     * @notice Calculate realized loss.\n     * @return _loss Realized loss in collateral token\n     */\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\n        if (_aTokenBalance < _totalDebt) {\n            _loss = _totalDebt - _aTokenBalance;\n        }\n    }\n\n    /// @notice Deposit collateral in Aave\n    function _reinvest() internal override {\n        _deposit(address(collateralToken), collateralToken.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Withdraw given amount of collateral from Aave to pool\n     * @param _amount Amount of collateral to withdraw.\n     */\n    function _withdraw(uint256 _amount) internal override {\n        _safeWithdraw(_amount);\n        collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Safe withdraw will make sure to check asking amount against available amount.\n     * @dev Check we have enough aToken and liquidity to support this withdraw\n     * @param _amount Amount of collateral to withdraw.\n     * @return Actual collateral withdrawn\n     */\n    function _safeWithdraw(uint256 _amount) internal returns (uint256) {\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\n        // If Vesper becomes large liquidity provider in Aave(This happened in past in vUSDC 1.0)\n        // In this case we might have more aToken compare to available liquidity in Aave and any\n        // withdraw asking more than available liquidity will fail. To do safe withdraw, check\n        // _amount against available liquidity.\n        uint256 _availableLiquidity = aaveLendingPoolCore.getReserveAvailableLiquidity(address(collateralToken));\n        // Get minimum of _amount, _aTokenBalance and _availableLiquidity\n        return _withdrawHere(_min(_amount, _min(_aTokenBalance, _availableLiquidity)));\n    }\n\n    /**\n     * @notice Withdraw given amount of collateral from Aave\n     * @param _amount Amount of collateral to withdraw.\n     * @return Actual collateral withdrawn\n     */\n    function _withdrawHere(uint256 _amount) internal returns (uint256) {\n        if (_amount != 0) {\n            aToken.redeem(_amount);\n        }\n        return _amount;\n    }\n\n    /// @notice Returns minimum of 2 given numbers\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(address newImplementation, bytes memory data, bool forceCall) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\n                    \"upgradeTo(address)\",\n                    oldImplementation\n                )\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _setImplementation(newImplementation);\n            emit Upgraded(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(\n            Address.isContract(newBeacon),\n            \"ERC1967: new beacon is not a contract\"\n        );\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 { revert(0, returndatasize()) }\n            default { return(0, returndatasize()) }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback () external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive () external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(address _logic, address admin_, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "contracts/upgraders/UpgraderBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\nimport \"../interfaces/multicall/IMulticall.sol\";\n\nabstract contract UpgraderBase is ProxyAdmin {\n    address public multicall;\n\n    constructor(address _multicall) {\n        multicall = _multicall;\n    }\n\n    function safeUpgrade(address _proxy, address _implementation) public onlyOwner {\n        bytes[] memory calls = _calls();\n        bytes[] memory beforeResults = _aggregate(_proxy, calls);\n\n        TransparentUpgradeableProxy(payable(_proxy)).upgradeTo(_implementation);\n\n        bytes[] memory afterResults = _aggregate(_proxy, calls);\n        _checkResults(beforeResults, afterResults);\n    }\n\n    function safeUpgradeToAndCall(\n        address _proxy,\n        address _implementation,\n        bytes memory _data\n    ) public payable onlyOwner {\n        bytes[] memory calls = _calls();\n        bytes[] memory beforeResults = _aggregate(_proxy, calls);\n\n        TransparentUpgradeableProxy(payable(_proxy)).upgradeToAndCall{value: msg.value}(_implementation, _data);\n\n        bytes[] memory afterResults = _aggregate(_proxy, calls);\n        _checkResults(beforeResults, afterResults);\n    }\n\n    function _aggregate(address _proxy, bytes[] memory _callDatas) internal returns (bytes[] memory results) {\n        IMulticall.Call[] memory calls = new IMulticall.Call[](_callDatas.length);\n        for (uint256 i = 0; i < _callDatas.length; i++) {\n            calls[i].target = _proxy;\n            calls[i].callData = _callDatas[i];\n        }\n        (, results) = IMulticall(multicall).aggregate(calls);\n    }\n\n    function _calls() internal virtual returns (bytes[] memory calls);\n\n    function _checkResults(bytes[] memory _beforeResult, bytes[] memory _afterResults) internal virtual;\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(TransparentUpgradeableProxy proxy, address implementation, bytes memory data) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "contracts/interfaces/multicall/IMulticall.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\ninterface IMulticall {\n    struct Call {\n        address target;\n        bytes callData;\n    }\n\n    function aggregate(Call[] memory calls) external returns (uint256 blockNumber, bytes[] memory returnData);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/upgraders/VPoolUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./UpgraderBase.sol\";\n\ncontract VPoolUpgrader is UpgraderBase {\n    constructor(address _multicall)\n        UpgraderBase(_multicall) // solhint-disable-next-line no-empty-blocks\n    {}\n\n    function _calls() internal pure override returns (bytes[] memory calls) {\n        calls = new bytes[](5);\n        calls[0] = abi.encodeWithSignature(\"token()\");\n        calls[1] = abi.encodeWithSignature(\"poolAccountant()\");\n        calls[2] = abi.encodeWithSignature(\"withdrawFee()\");\n        calls[3] = abi.encodeWithSignature(\"pricePerShare()\");\n        calls[4] = abi.encodeWithSignature(\"tokensHere()\");\n    }\n\n    function _checkResults(bytes[] memory _beforeResults, bytes[] memory _afterResults) internal pure override {\n        address beforeToken = abi.decode(_beforeResults[0], (address));\n        address beforePoolAccountant = abi.decode(_beforeResults[1], (address));\n        uint256 beforeWithdrawFee = abi.decode(_beforeResults[2], (uint256));\n        uint256 beforePricePerShare = abi.decode(_beforeResults[3], (uint256));\n        uint256 beforeTokensHere = abi.decode(_beforeResults[4], (uint256));\n\n        address afterToken = abi.decode(_afterResults[0], (address));\n        address afterPoolAccountant = abi.decode(_afterResults[1], (address));\n        uint256 afterWithdrawFee = abi.decode(_afterResults[2], (uint256));\n        uint256 afterPricePerShare = abi.decode(_afterResults[3], (uint256));\n        uint256 afterTokensHere = abi.decode(_afterResults[4], (uint256));\n\n        require(\n            beforeToken == afterToken &&\n                beforePoolAccountant == afterPoolAccountant &&\n                beforeWithdrawFee == afterWithdrawFee,\n            \"fields-test-failed\"\n        );\n        require(\n            beforePricePerShare == afterPricePerShare && beforeTokensHere == afterTokensHere,\n            \"methods-test-failed\"\n        );\n    }\n}\n"
    },
    "contracts/upgraders/PoolRewardsUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./UpgraderBase.sol\";\n\ncontract PoolRewardsUpgrader is UpgraderBase {\n    constructor(address _multicall)\n        UpgraderBase(_multicall) // solhint-disable-next-line no-empty-blocks\n    {}\n\n    function _calls() internal pure override returns (bytes[] memory calls) {\n        calls = new bytes[](3);\n        calls[0] = abi.encodeWithSignature(\"pool()\");\n        calls[1] = abi.encodeWithSignature(\"getRewardTokens()\");\n        calls[2] = abi.encodeWithSignature(\"rewardPerToken()\");\n    }\n\n    function _checkResults(bytes[] memory _beforeResults, bytes[] memory _afterResults) internal pure override {\n        address beforePool = abi.decode(_beforeResults[0], (address));\n        address[] memory beforeRewardToken = abi.decode(_beforeResults[1], (address[]));\n        (, address[] memory beforeRewardPerToken) = abi.decode(_beforeResults[2], (address[], address[]));\n\n        address afterPool = abi.decode(_afterResults[0], (address));\n        address[] memory afterRewardToken = abi.decode(_afterResults[1], (address[]));\n        (, address[] memory afterRewardPerToken) = abi.decode(_afterResults[2], (address[], address[]));\n\n        require(beforePool == afterPool, \"fields-test-failed\");\n        require(\n            beforeRewardToken.length == afterRewardToken.length &&\n                beforeRewardToken[0] == afterRewardToken[0] &&\n                beforeRewardPerToken[0] == afterRewardPerToken[0],\n            \"methods-test-failed\"\n        );\n    }\n}\n"
    },
    "contracts/test/ProxyImport.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\n\n// Hardhat only compile contract which are either in /contracts directory or\n// being imported in any contract. We need proxy for test purpose so importing here.\n// solhint-disable no-empty-blocks\ncontract ProxyImport {\n\n}\n"
    },
    "contracts/upgraders/PoolAccountantUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./UpgraderBase.sol\";\n\ncontract PoolAccountantUpgrader is UpgraderBase {\n    constructor(address _multicall)\n        UpgraderBase(_multicall) // solhint-disable-next-line no-empty-blocks\n    {}\n\n    function _calls() internal pure override returns (bytes[] memory calls) {\n        calls = new bytes[](5);\n        calls[0] = abi.encodeWithSignature(\"pool()\");\n        calls[1] = abi.encodeWithSignature(\"totalDebtRatio()\");\n        calls[2] = abi.encodeWithSignature(\"totalDebt()\");\n        calls[3] = abi.encodeWithSignature(\"getStrategies()\");\n        calls[4] = abi.encodeWithSignature(\"getWithdrawQueue()\");\n    }\n\n    function _checkResults(bytes[] memory _beforeResults, bytes[] memory _afterResults) internal pure override {\n        address beforePool = abi.decode(_beforeResults[0], (address));\n        uint256 beforeTotalDebtRatio = abi.decode(_beforeResults[1], (uint256));\n        uint256 beforeTotalDebt = abi.decode(_beforeResults[2], (uint256));\n        address[] memory beforeGetStrategies = abi.decode(_beforeResults[3], (address[]));\n        address[] memory beforeGetWithdrawQueue = abi.decode(_beforeResults[4], (address[]));\n\n        address afterPool = abi.decode(_afterResults[0], (address));\n        uint256 afterTotalDebtRatio = abi.decode(_afterResults[1], (uint256));\n        uint256 afterTotalDebt = abi.decode(_afterResults[2], (uint256));\n        address[] memory afterGetStrategies = abi.decode(_afterResults[3], (address[]));\n        address[] memory afterGetWithdrawQueue = abi.decode(_afterResults[4], (address[]));\n\n        require(\n            beforePool == afterPool && beforeTotalDebtRatio == afterTotalDebtRatio && beforeTotalDebt == afterTotalDebt,\n            \"simple-fields-test-failed\"\n        );\n        require(\n            beforeGetStrategies.length == afterGetStrategies.length &&\n                beforeGetWithdrawQueue.length == afterGetWithdrawQueue.length,\n            \"dynamic-fields-test-failed\"\n        );\n    }\n}\n"
    },
    "contracts/strategies/convex/vfr/ConvexStable3PoolStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./ConvexStableStrategy.sol\";\n\n//solhint-disable no-empty-blocks\ncontract ConvexStable3PoolStrategy is ConvexStableStrategy {\n    address private constant THREEPOOL = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\n    address private constant THREECRV = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\n    address private constant GAUGE = 0xbFcF63294aD7105dEa65aA58F8AE5BE2D9d0952A;\n\n    // Convex Pool ID for 3Pool\n    uint256 internal constant CONVEX_POOL_ID = 9;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        uint256 _collateralIdx,\n        string memory _name\n    ) ConvexStableStrategy(_pool, THREEPOOL, THREECRV, GAUGE, _swapManager, _collateralIdx, CONVEX_POOL_ID, _name) {}\n}\n"
    },
    "contracts/strategies/compound/vfr/CompoundCoverageStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../CompoundStrategy.sol\";\nimport \"../../VFR.sol\";\n\n// solhint-disable no-empty-blocks\ncontract CompoundCoverageStrategy is CompoundStrategy, VFR {\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _comptroller,\n        address _rewardToken,\n        address _receiptToken,\n        string memory _name\n    ) CompoundStrategy(_pool, _swapManager, _comptroller, _rewardToken, _receiptToken, _name) {}\n\n    function _realizeProfit(uint256 _totalDebt) internal override returns (uint256 _profit) {\n        _profit = _handleCoverageProfit(pool, super._realizeProfit(_totalDebt));\n    }\n}\n"
    },
    "contracts/strategies/compound/earn/EarnCompoundStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../CompoundStrategy.sol\";\nimport \"../../Earn.sol\";\nimport \"../../../interfaces/vesper/IPoolRewards.sol\";\n\n/// @title This strategy will deposit collateral token in Compound and earn drip in an another token.\ncontract EarnCompoundStrategy is CompoundStrategy, Earn {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable no-empty-blocks\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _comptroller,\n        address _rewardToken,\n        address _receiptToken,\n        address _dripToken,\n        string memory _name\n    ) CompoundStrategy(_pool, _swapManager, _comptroller, _rewardToken, _receiptToken, _name) Earn(_dripToken) {}\n\n    // solhint-enable no-empty-blocks\n\n    function totalValueCurrent() public virtual override(Strategy, CompoundStrategy) returns (uint256 _totalValue) {\n        _totalValue = CompoundStrategy.totalValueCurrent();\n    }\n\n    function _setupOracles() internal override(Strategy, CompoundStrategy) {\n        CompoundStrategy._setupOracles();\n    }\n\n    function _claimRewardsAndConvertTo(address _toToken) internal override(Strategy, CompoundStrategy) {\n        CompoundStrategy._claimRewardsAndConvertTo(_toToken);\n    }\n\n    function _realizeProfit(uint256 _totalDebt)\n        internal\n        virtual\n        override(Strategy, CompoundStrategy)\n        returns (uint256)\n    {\n        _claimRewardsAndConvertTo(address(dripToken));\n        uint256 _collateralBalance = _convertToCollateral(cToken.balanceOf(address(this)));\n        if (_collateralBalance > _totalDebt) {\n            _withdrawHere(_collateralBalance - _totalDebt);\n        }\n        _convertCollateralToDrip();\n        _forwardEarning();\n        return 0;\n    }\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override(Strategy, CompoundStrategy) {\n        collateralToken.safeApprove(pool, _amount);\n        collateralToken.safeApprove(address(cToken), _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            if (rewardToken != address(0)) IERC20(rewardToken).safeApprove(address(swapManager.ROUTERS(i)), _amount);\n\n            collateralToken.safeApprove(address(swapManager.ROUTERS(i)), _amount);\n        }\n    }\n}\n"
    },
    "contracts/strategies/compound/earn/EarnCompoundStrategyETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./EarnCompoundStrategy.sol\";\nimport \"../../../interfaces/token/IToken.sol\";\n\n// solhint-disable no-empty-blocks\n/// @title Deposit ETH/WETH in Compound and earn interest in DAI.\ncontract EarnCompoundStrategyETH is EarnCompoundStrategy {\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _comptroller,\n        address _rewardToken,\n        address _receiptToken,\n        address _dripToken,\n        string memory _name\n    ) EarnCompoundStrategy(_pool, _swapManager, _comptroller, _rewardToken, _receiptToken, _dripToken, _name) {}\n\n    /// @dev Only receive ETH from either cToken or WETH\n    receive() external payable {\n        require(msg.sender == address(cToken) || msg.sender == WETH, \"not-allowed-to-send-ether\");\n    }\n\n    /**\n     * @dev This hook get called after collateral is redeemed from Compound\n     * Vesper deals in WETH as collateral so convert ETH to WETH\n     */\n    function _afterRedeem() internal override {\n        TokenLike(WETH).deposit{value: address(this).balance}();\n    }\n\n    /**\n     * @dev During reinvest we have WETH as collateral but Compound accepts ETH.\n     * Withdraw ETH from WETH before calling mint in Compound.\n     */\n    function _reinvest() internal override {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n        if (_collateralBalance != 0) {\n            TokenLike(WETH).withdraw(_collateralBalance);\n            cToken.mint{value: _collateralBalance}();\n        }\n    }\n}\n"
    },
    "contracts/strategies/compound/CompoundStrategyETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./CompoundStrategy.sol\";\nimport \"../../interfaces/token/IToken.sol\";\n\n// solhint-disable no-empty-blocks\n/// @title Deposit ETH/WETH in Compound and earn interest.\ncontract CompoundStrategyETH is CompoundStrategy {\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _comptroller,\n        address _rewardToken,\n        address _receiptToken,\n        string memory _name\n    ) CompoundStrategy(_pool, _swapManager, _comptroller, _rewardToken, _receiptToken, _name) {}\n\n    /// @dev Only receive ETH from either cToken or WETH\n    receive() external payable {\n        require(msg.sender == address(cToken) || msg.sender == WETH, \"not-allowed-to-send-ether\");\n    }\n\n    /**\n     * @dev This hook get called after collateral is redeemed from Compound\n     * Vesper deals in WETH as collateral so convert ETH to WETH\n     */\n    function _afterRedeem() internal override {\n        TokenLike(WETH).deposit{value: address(this).balance}();\n    }\n\n    /**\n     * @dev During reinvest we have WETH as collateral but Compound accepts ETH.\n     * Withdraw ETH from WETH before calling mint in Compound.\n     */\n    function _reinvest() internal override {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n        if (_collateralBalance != 0) {\n            TokenLike(WETH).withdraw(_collateralBalance);\n            cToken.mint{value: _collateralBalance}();\n        }\n    }\n}\n"
    },
    "contracts/strategies/compound/CompoundXYStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../Strategy.sol\";\nimport \"../../interfaces/compound/ICompound.sol\";\nimport \"../../interfaces/oracle/IUniswapV3Oracle.sol\";\nimport \"../../interfaces/token/IToken.sol\";\n\n/// @title This strategy will deposit collateral token in Compound and based on position\n/// it will borrow another token. Supply X borrow Y and keep borrowed amount here\nabstract contract CompoundXYStrategy is Strategy {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"4.0.0\";\n\n    uint256 internal constant MAX_BPS = 10_000; //100%\n    uint256 public minBorrowRatio = 4_500; // 45%\n    uint256 public maxBorrowRatio = 6_000; // 60%\n    uint256 public minBorrowLimit;\n    uint256 public maxBorrowLimit;\n    address public borrowToken;\n\n    address public immutable rewardToken;\n    address public immutable rewardDistributor;\n    Comptroller public comptroller;\n\n    CToken public immutable supplyCToken;\n    CToken public borrowCToken;\n\n    IUniswapV3Oracle internal constant ORACLE = IUniswapV3Oracle(0x0F1f5A87f99f0918e6C81F16E59F3518698221Ff);\n    address internal constant CETH = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\n    uint32 internal constant TWAP_PERIOD = 3600;\n\n    event UpdatedBorrowCToken(address indexed previousBorrowCToken, address indexed newBorrowCToken);\n    event UpdatedBorrowRatio(\n        uint256 previousMinBorrowRatio,\n        uint256 newMinBorrowRatio,\n        uint256 previousMaxBorrowRatio,\n        uint256 newMaxBorrowRatio\n    );\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _comptroller,\n        address _rewardDistributor,\n        address _rewardToken,\n        address _receiptToken,\n        address _borrowCToken,\n        string memory _name\n    ) Strategy(_pool, _swapManager, _receiptToken) {\n        require(_receiptToken != address(0), \"cToken-address-is-zero\");\n        require(_comptroller != address(0), \"comptroller-address-is-zero\");\n        require(_rewardDistributor != address(0), \"rewardDistributor-is-zero\");\n        require(_rewardToken != address(0), \"rewardToken-address-is-zero\");\n\n        NAME = _name;\n\n        comptroller = Comptroller(_comptroller);\n        rewardToken = _rewardToken;\n        rewardDistributor = _rewardDistributor;\n\n        supplyCToken = CToken(_receiptToken);\n        borrowCToken = CToken(_borrowCToken);\n        borrowToken = _getBorrowToken(_borrowCToken);\n\n        address[] memory _cTokens = new address[](2);\n        _cTokens[0] = _receiptToken;\n        _cTokens[1] = _borrowCToken;\n        comptroller.enterMarkets(_cTokens);\n        (, uint256 _collateralFactorMantissa, ) = comptroller.markets(_receiptToken);\n        minBorrowLimit = (minBorrowRatio * 1e18) / _collateralFactorMantissa;\n        maxBorrowLimit = (maxBorrowRatio * 1e18) / _collateralFactorMantissa;\n    }\n\n    /**\n     * @notice Recover extra borrow tokens from strategy\n     * @dev If we get liquidation in Compound, we will have borrowToken sitting in strategy.\n     * This function allows to recover idle borrow token amount.\n     * @param _amountToRecover Amount of borrow token we want to recover in 1 call.\n     *      Set it 0 to recover all available borrow tokens\n     */\n    function recoverBorrowToken(uint256 _amountToRecover) external onlyKeeper {\n        uint256 _borrowBalanceHere = IERC20(borrowToken).balanceOf(address(this));\n        uint256 _borrowInCompound = borrowCToken.borrowBalanceStored(address(this));\n\n        if (_borrowBalanceHere > _borrowInCompound) {\n            uint256 _extraBorrowBalance = _borrowBalanceHere - _borrowInCompound;\n            uint256 _recoveryAmount =\n                (_amountToRecover != 0 && _extraBorrowBalance > _amountToRecover)\n                    ? _amountToRecover\n                    : _extraBorrowBalance;\n            // Do swap and transfer\n            uint256 _collateralBefore = collateralToken.balanceOf(address(this));\n            _safeSwap(borrowToken, address(collateralToken), _recoveryAmount);\n            collateralToken.transfer(pool, collateralToken.balanceOf(address(this)) - _collateralBefore);\n        }\n    }\n\n    /**\n     * @notice Update borrow CToken\n     * @dev Repay borrow for old borrow CToken and borrow for new borrow CToken\n     * @param _newBorrowCToken Address of new CToken\n     */\n    function updateBorrowCToken(address _newBorrowCToken) external virtual onlyGovernor {\n        require(_newBorrowCToken != address(0), \"newBorrowCToken-address-is-zero\");\n        // Repay whole borrow\n        _repay(borrowCToken.borrowBalanceCurrent(address(this)), true);\n\n        // Manage market position in Compound\n        comptroller.exitMarket(address(borrowCToken));\n        address[] memory _cTokens = new address[](1);\n        _cTokens[0] = _newBorrowCToken;\n        comptroller.enterMarkets(_cTokens);\n\n        // Reset approval for old borrowCToken\n        IERC20(borrowToken).safeApprove(address(borrowCToken), 0);\n\n        // Update token address\n        emit UpdatedBorrowCToken(address(borrowCToken), _newBorrowCToken);\n        borrowCToken = CToken(_newBorrowCToken);\n        borrowToken = _getBorrowToken(_newBorrowCToken);\n\n        // Approve new borrowCToken\n        IERC20(borrowToken).safeApprove(_newBorrowCToken, type(uint256).max);\n\n        // Borrow again\n        (uint256 _borrowAmount, ) = _calculateBorrowPosition(0, true);\n        _borrowY(_borrowAmount);\n    }\n\n    /**\n     * @notice Update upper and lower borrow ratio\n     * @dev It is possible to set 0 as _minBorrowRatio to not borrow anything\n     * @param _minBorrowRatio Minimum % we want to borrow\n     * @param _maxBorrowRatio Maximum % we want to borrow\n     */\n    function updateBorrowRatio(uint256 _minBorrowRatio, uint256 _maxBorrowRatio) external onlyGovernor {\n        (, uint256 _collateralFactorMantissa, ) = comptroller.markets(address(supplyCToken));\n        require(_maxBorrowRatio < (_collateralFactorMantissa / 1e14), \"invalid-max-borrow-ratio\");\n        require(_maxBorrowRatio > _minBorrowRatio, \"max-should-be-higher-than-min\");\n        emit UpdatedBorrowRatio(minBorrowRatio, _minBorrowRatio, maxBorrowRatio, _maxBorrowRatio);\n        minBorrowRatio = _minBorrowRatio;\n        maxBorrowRatio = _maxBorrowRatio;\n\n        minBorrowLimit = (_minBorrowRatio * 1e18) / _collateralFactorMantissa;\n        maxBorrowLimit = (_maxBorrowRatio * 1e18) / _collateralFactorMantissa;\n    }\n\n    /**\n     * @notice Repay all borrow amount and set min borrow limit to 0.\n     * @dev This action usually done when loss is detected in strategy.\n     * @dev 0 borrow limit make sure that any future rebalance do not borrow again.\n     */\n    function repayAll() external onlyKeeper {\n        _repay(borrowCToken.borrowBalanceCurrent(address(this)), true);\n        minBorrowLimit = 0;\n        minBorrowRatio = 0;\n    }\n\n    /**\n     * @notice Calculate total value based on rewardToken claimed, supply and borrow position\n     * @dev Report total value in collateral token\n     * @dev Claimed rewardToken will stay in strategy until next rebalance\n     */\n    function totalValueCurrent() external override returns (uint256 _totalValue) {\n        _claimRewards();\n        supplyCToken.exchangeRateCurrent();\n        borrowCToken.exchangeRateCurrent();\n        _totalValue = _calculateTotalValue(IERC20(rewardToken).balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Current borrow ratio, calculated as current borrow divide by current supply as borrow\n     * Return value is based on basis points, i.e. 7500 = 75% ratio\n     */\n    function currentBorrowRatio() external view returns (uint256) {\n        uint256 _cTokenAmount = supplyCToken.balanceOf(address(this));\n        uint256 _supply = (_cTokenAmount * supplyCToken.exchangeRateStored()) / 1e18;\n        uint256 _currentBorrow = borrowCToken.borrowBalanceStored(address(this));\n        if (_currentBorrow == 0) {\n            return 0;\n        }\n        (, uint256 _maxBorrow, ) = swapManager.bestOutputFixedInput(address(collateralToken), borrowToken, _supply);\n        return _maxBorrow == 0 ? 0 : (_currentBorrow * MAX_BPS) / _maxBorrow;\n    }\n\n    /**\n     * @notice Calculate total value using rewardToken accrued, supply and borrow position\n     * @dev Compound calculate rewardToken accrued and store it when user interact with\n     * Compound contracts, i.e. deposit, withdraw or transfer tokens.\n     * So _getRewardAccrued() will return stored rewardToken accrued amount, which is older\n     * @dev For up to date value check totalValueCurrent()\n     */\n    function totalValue() public view virtual override returns (uint256 _totalValue) {\n        _totalValue = _calculateTotalValue(_getRewardAccrued());\n    }\n\n    /**\n     * @notice Calculate current position using claimed rewardToken and current borrow.\n     */\n    function isLossMaking() external returns (bool) {\n        _claimRewards();\n        uint256 _rewardAccrued = IERC20(rewardToken).balanceOf(address(this));\n        uint256 _borrow = borrowCToken.borrowBalanceCurrent(address(this));\n        uint256 _borrowBalanceHere = _getBorrowBalance();\n        // If we are short on borrow amount then check if we can pay interest using accrued rewardToken\n        if (_borrow > _borrowBalanceHere) {\n            (, uint256 _rewardNeededForRepay, ) =\n                swapManager.bestInputFixedOutput(rewardToken, borrowToken, _borrow - _borrowBalanceHere);\n            // Accrued rewardToken are not enough to pay interest on borrow\n            if (_rewardNeededForRepay > _rewardAccrued) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function isReservedToken(address _token) public view virtual override returns (bool) {\n        return\n            _token == address(supplyCToken) ||\n            _token == rewardToken ||\n            _token == address(collateralToken) ||\n            _token == borrowToken;\n    }\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override {\n        collateralToken.safeApprove(pool, _amount);\n        collateralToken.safeApprove(address(supplyCToken), _amount);\n        IERC20(borrowToken).safeApprove(address(borrowCToken), _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            IERC20(rewardToken).safeApprove(address(swapManager.ROUTERS(i)), _amount);\n            collateralToken.safeApprove(address(swapManager.ROUTERS(i)), _amount);\n            IERC20(borrowToken).safeApprove(address(swapManager.ROUTERS(i)), _amount);\n        }\n    }\n\n    function _getRewardAccrued() internal view virtual returns (uint256 _rewardAccrued) {\n        _rewardAccrued = comptroller.compAccrued(address(this));\n    }\n\n    /**\n     * @notice Claim rewardToken and transfer to new strategy\n     * @param _newStrategy Address of new strategy.\n     */\n    function _beforeMigration(address _newStrategy) internal virtual override {\n        require(IStrategy(_newStrategy).token() == address(supplyCToken), \"wrong-receipt-token\");\n        _repay(borrowCToken.borrowBalanceCurrent(address(this)), true);\n    }\n\n    /**\n     * @notice Calculate borrow position based on current supply, borrow, amount being deposited or\n     * withdraw and borrow limits.\n     * @param _amount Collateral amount\n     * @param _isDeposit Flag indicating whether we are depositing _amount or withdrawing\n     * @return _position Amount of borrow that need to be adjusted\n     * @return _shouldRepay Flag indicating whether _position is borrow amount or repay amount\n     */\n    function _calculateBorrowPosition(uint256 _amount, bool _isDeposit)\n        internal\n        returns (uint256 _position, bool _shouldRepay)\n    {\n        uint256 _currentBorrow = borrowCToken.borrowBalanceCurrent(address(this));\n        // If minimum borrow limit set to 0 then repay borrow\n        if (minBorrowLimit == 0) {\n            return (_currentBorrow, true);\n        }\n\n        uint256 _supply = supplyCToken.balanceOfUnderlying(address(this));\n        (, uint256 _collateralFactorMantissa, ) = comptroller.markets(address(supplyCToken));\n\n        // In case of withdraw, _amount can be greater than _supply\n        uint256 _newSupply = _isDeposit ? _supply + _amount : _supply > _amount ? _supply - _amount : 0;\n\n        // Calculate max borrow based on supply and market rate\n        uint256 _maxBorrowAsCollateral = (_newSupply * _collateralFactorMantissa) / 1e18;\n        (, uint256 _maxBorrow, ) =\n            swapManager.bestOutputFixedInput(address(collateralToken), borrowToken, _maxBorrowAsCollateral);\n        // If maxBorrow is zero, we should repay total amount of borrow\n        if (_maxBorrow == 0) {\n            return (_currentBorrow, true);\n        }\n\n        uint256 _borrowUpperBound = (_maxBorrow * maxBorrowLimit) / MAX_BPS;\n        uint256 _borrowLowerBound = (_maxBorrow * minBorrowLimit) / MAX_BPS;\n\n        // If our current borrow is greater than max borrow allowed, then we will have to repay\n        // some to achieve safe position else borrow more.\n        if (_currentBorrow > _borrowUpperBound) {\n            _shouldRepay = true;\n            // If borrow > upperBound then it is greater than lowerBound too.\n            _position = _currentBorrow - _borrowLowerBound;\n        } else if (_currentBorrow < _borrowLowerBound) {\n            _shouldRepay = false;\n            // We can borrow more.\n            _position = _borrowLowerBound - _currentBorrow;\n        }\n    }\n\n    /**\n     * @dev rewardToken is converted to collateral and if we have some borrow interest to pay,\n     * it will go come from collateral.\n     * @dev Report total value in collateral token\n     */\n    function _calculateTotalValue(uint256 _rewardAccrued) internal view virtual returns (uint256 _totalValue) {\n        uint256 _rewardAsCollateral;\n        if (_rewardAccrued != 0) {\n            (, _rewardAsCollateral, ) = swapManager.bestOutputFixedInput(\n                rewardToken,\n                address(collateralToken),\n                _rewardAccrued\n            );\n        }\n        uint256 _collateralInCompound =\n            (supplyCToken.balanceOf(address(this)) * supplyCToken.exchangeRateStored()) / 1e18;\n\n        uint256 _borrowBalanceHere = _getBorrowBalance();\n        uint256 _borrowInCompound = borrowCToken.borrowBalanceStored(address(this));\n\n        uint256 _collateralNeededForRepay;\n        if (_borrowInCompound > _borrowBalanceHere) {\n            (, _collateralNeededForRepay, ) = swapManager.bestInputFixedOutput(\n                address(collateralToken),\n                borrowToken,\n                _borrowInCompound - _borrowBalanceHere\n            );\n        }\n        _totalValue =\n            _rewardAsCollateral +\n            _collateralInCompound +\n            collateralToken.balanceOf(address(this)) -\n            _collateralNeededForRepay;\n    }\n\n    /// @notice Get the borrow balance strategy is holding\n    function _getBorrowBalance() internal view virtual returns (uint256) {\n        return IERC20(borrowToken).balanceOf(address(this));\n    }\n\n    /// @notice Claim rewardToken\n    function _claimRewards() internal virtual {\n        address[] memory _markets = new address[](2);\n        _markets[0] = address(supplyCToken);\n        _markets[1] = address(borrowCToken);\n        comptroller.claimComp(address(this), _markets);\n    }\n\n    /// @notice Claim rewardToken and convert rewardToken into collateral token.\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\n        _claimRewards();\n        uint256 _rewardAmount = IERC20(rewardToken).balanceOf(address(this));\n        if (_rewardAmount != 0) {\n            _safeSwap(rewardToken, _toToken, _rewardAmount);\n        }\n    }\n\n    /**\n     * @notice Generate report for pools accounting and also send profit and any payback to pool.\n     * @dev Claim rewardToken and first convert rewardToken to borrowToken to cover interest, if any, on borrowed amount.\n     * Convert remaining rewardToken to collateral.\n     */\n    function _generateReport()\n        internal\n        override\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _payback\n        )\n    {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\n\n        // Claim any reward we have.\n        _claimRewards();\n\n        uint256 _borrow = borrowCToken.borrowBalanceCurrent(address(this));\n        uint256 _borrowBalanceHere = _getBorrowBalance();\n        // _borrow increases every block. There can be a scenario when rewardToken are not\n        // enough to cover interest diff for borrow, reinvest function will handle\n        // collateral liquidation\n        if (_borrow > _borrowBalanceHere) {\n            _swapToBorrowToken(rewardToken, _borrow - _borrowBalanceHere);\n            // Read borrow balance again as we just swap some rewardToken to borrow token\n            _borrowBalanceHere = _getBorrowBalance();\n        } else {\n            // When _borrowBalanceHere exceeds _borrow balance from compound\n            // Customize this hook to handle the excess profit\n            _rebalanceBorrow(_borrowBalanceHere - _borrow);\n        }\n\n        uint256 _rewardRemaining = IERC20(rewardToken).balanceOf(address(this));\n        if (_rewardRemaining != 0) {\n            _safeSwap(rewardToken, address(collateralToken), _rewardRemaining);\n        }\n\n        // Any collateral here is profit\n        _profit = collateralToken.balanceOf(address(this));\n        uint256 _collateralInCompound = supplyCToken.balanceOfUnderlying(address(this));\n        uint256 _profitToWithdraw;\n\n        if (_collateralInCompound > _totalDebt) {\n            _profitToWithdraw = _collateralInCompound - _totalDebt;\n            _profit += _profitToWithdraw;\n        } else {\n            _loss = _totalDebt - _collateralInCompound;\n        }\n\n        uint256 _totalAmountToWithdraw = _excessDebt + _profitToWithdraw;\n        if (_totalAmountToWithdraw != 0) {\n            uint256 _withdrawn = _withdrawHere(_totalAmountToWithdraw);\n            // Any amount withdrawn over _profitToWithdraw is payback for pool\n            if (_withdrawn > _profitToWithdraw) {\n                _payback = _withdrawn - _profitToWithdraw;\n            }\n        }\n    }\n\n    /// @notice Deposit collateral in Compound and adjust borrow position\n    function _reinvest() internal virtual override {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n\n        (uint256 _borrowAmount, bool _shouldRepay) = _calculateBorrowPosition(_collateralBalance, true);\n        if (_shouldRepay) {\n            // Repay _borrowAmount to maintain safe position\n            _repay(_borrowAmount, false);\n            _mintX(collateralToken.balanceOf(address(this)));\n        } else {\n            // Happy path, mint more borrow more\n            _mintX(_collateralBalance);\n            _borrowY(_borrowAmount);\n        }\n    }\n\n    /**\n     * @notice Repay borrow amount\n     * @dev Claim rewardToken and convert to collateral. Swap collateral to borrowToken as needed.\n     * @param _repayAmount BorrowToken amount that we should repay to maintain safe position.\n     * @param _shouldClaimComp Flag indicating should we claim rewardToken and convert to collateral or not.\n     */\n    function _repay(uint256 _repayAmount, bool _shouldClaimComp) internal {\n        if (_repayAmount != 0) {\n            uint256 _borrowBalanceHere = _getBorrowBalance();\n            // Liability is more than what we have.\n            // To repay loan - convert all rewards to collateral, if asked, and redeem collateral(if needed).\n            // This scenario is rare and if system works okay it will/might happen during final repay only.\n            if (_repayAmount > _borrowBalanceHere) {\n                if (_shouldClaimComp) {\n                    // Claim rewardToken and convert those to collateral.\n                    _claimRewardsAndConvertTo(address(collateralToken));\n                }\n\n                uint256 _currentBorrow = borrowCToken.borrowBalanceCurrent(address(this));\n                // For example this is final repay and 100 blocks has passed since last withdraw/rebalance,\n                // _currentBorrow is increasing due to interest. Now if _repayAmount > _borrowBalanceHere is true\n                // _currentBorrow > _borrowBalanceHere is also true.\n                // To maintain safe position we always try to keep _currentBorrow = _borrowBalanceHere\n\n                // Swap collateral to borrowToken to repay borrow and also maintain safe position\n                // Here borrowToken amount needed is (_currentBorrow - _borrowBalanceHere)\n                _swapToBorrowToken(address(collateralToken), _currentBorrow - _borrowBalanceHere);\n            }\n            _repayY(_repayAmount);\n        }\n    }\n\n    /**\n     * @notice Swap given token to borrowToken\n     * @param _from From token, token which will be swapped with borrowToken\n     * @param _shortOnBorrow Expected output of this swap\n     */\n    function _swapToBorrowToken(address _from, uint256 _shortOnBorrow) internal {\n        // Looking for _amountIn using fixed output amount\n        (address[] memory _path, uint256 _amountIn, uint256 _rIdx) =\n            swapManager.bestInputFixedOutput(_from, borrowToken, _shortOnBorrow);\n        if (_amountIn != 0) {\n            uint256 _fromBalanceHere = IERC20(_from).balanceOf(address(this));\n            // If we do not have enough _from token to get expected output, either get\n            // some _from token or adjust expected output.\n            if (_amountIn > _fromBalanceHere) {\n                if (_from == address(collateralToken)) {\n                    // Redeem some collateral, so that we have enough collateral to get expected output\n                    _redeemX(_amountIn - _fromBalanceHere);\n                } else {\n                    _amountIn = _fromBalanceHere;\n                    // Adjust expected output based on _from token balance we have.\n                    _shortOnBorrow = swapManager.safeGetAmountsOut(_amountIn, _path, _rIdx)[_path.length - 1];\n                }\n            }\n            swapManager.ROUTERS(_rIdx).swapTokensForExactTokens(\n                _shortOnBorrow,\n                _amountIn,\n                _path,\n                address(this),\n                block.timestamp\n            );\n        }\n    }\n\n    /// @dev Withdraw collateral and transfer it to pool\n    function _withdraw(uint256 _amount) internal override {\n        collateralToken.safeTransfer(pool, _withdrawHere(_amount));\n    }\n\n    /// @dev Withdraw collateral here. Do not transfer to pool\n    function _withdrawHere(uint256 _amount) internal returns (uint256) {\n        (uint256 _repayAmount, bool _shouldRepay) = _calculateBorrowPosition(_amount, false);\n        if (_shouldRepay) {\n            _repay(_repayAmount, true);\n        }\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\n        _redeemX(_amount);\n        uint256 _collateralAfter = collateralToken.balanceOf(address(this));\n\n        return _collateralAfter - _collateralBefore;\n    }\n\n    function _getBorrowToken(address _cToken) private view returns (address) {\n        // If cETH\n        if (_cToken == CETH) {\n            return WETH;\n        }\n        return CToken(_cToken).underlying();\n    }\n\n    function _safeSwap(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn\n    ) private {\n        uint256 _minAmountOut =\n            swapSlippage != 10000\n                ? _calcAmtOutAfterSlippage(\n                    ORACLE.assetToAsset(_tokenIn, _amountIn, _tokenOut, TWAP_PERIOD),\n                    swapSlippage\n                )\n                : 1;\n        _safeSwap(_tokenIn, _tokenOut, _amountIn, _minAmountOut);\n    }\n\n    //////////////////// Compound wrapper functions //////////////////////////////\n    /**\n     * @dev Compound support ETH as collateral not WETH. So ETH strategy can override\n     * _mintX and _redeemX functions and handle wrap/unwrap of WETH.\n     */\n    function _mintX(uint256 _amount) internal virtual {\n        if (_amount != 0) {\n            require(supplyCToken.mint(_amount) == 0, \"supply-to-compound-failed\");\n        }\n    }\n\n    function _redeemX(uint256 _amount) internal virtual {\n        require(supplyCToken.redeemUnderlying(_amount) == 0, \"withdraw-from-compound-failed\");\n    }\n\n    /// @dev BorrowToken can be updated at run time and if it is WETH then wrap borrowed ETH into WETH\n    function _borrowY(uint256 _amount) internal {\n        if (_amount != 0) {\n            require(borrowCToken.borrow(_amount) == 0, \"borrow-from-compound-failed\");\n            if (borrowToken == WETH) {\n                TokenLike(WETH).deposit{value: address(this).balance}();\n            }\n            _afterBorrowY(_amount);\n        }\n    }\n\n    /// @dev BorrowToken can be updated at run time and if it is WETH then unwrap WETH as ETH before repay\n    function _repayY(uint256 _amount) internal {\n        _beforeRepayY(_amount);\n        if (borrowToken == WETH) {\n            TokenLike(WETH).withdraw(_amount);\n            borrowCToken.repayBorrow{value: _amount}();\n        } else {\n            require(borrowCToken.repayBorrow(_amount) == 0, \"repay-to-compound-failed\");\n        }\n    }\n\n    /// @dev Hook that executes after borrowing collateral\n    /// solhint-disable-next-line no-empty-blocks\n    function _afterBorrowY(uint256 _amount) internal virtual {}\n\n    /// @dev Hook that executes before repaying borrowed collateral\n    /// solhint-disable-next-line no-empty-blocks\n    function _beforeRepayY(uint256 _amount) internal virtual {}\n\n    /// @dev Hook to handle when actual borrowed balance is > compound borrow account\n    /// solhint-disable-next-line no-empty-blocks\n    function _rebalanceBorrow(uint256 _excessBorrow) internal virtual {}\n\n    //////////////////////////////////////////////////////////////////////////////\n\n    /* solhint-disable no-empty-blocks */\n\n    // We overridden _generateReport which eliminates need of below function.\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {}\n\n    function _realizeProfit(uint256 _totalDebt) internal virtual override returns (uint256) {}\n\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {}\n\n    /* solhint-enable no-empty-blocks */\n}\n"
    },
    "contracts/strategies/compound/VesperCompoundXYStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./CompoundXYStrategy.sol\";\nimport \"../../interfaces/vesper/IVesperPool.sol\";\n\n// solhint-disable no-empty-blocks\n/// @title Deposit Collateral in Compound and earn interest by depositing borrowed token in a Vesper Pool.\ncontract VesperCompoundXYStrategy is CompoundXYStrategy {\n    using SafeERC20 for IERC20;\n\n    // Destination Grow Pool for borrowed Token\n    address public immutable vPool;\n    address internal constant VSP = 0x1b40183EFB4Dd766f11bDa7A7c3AD8982e998421;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _comptroller,\n        address _rewardDistributor,\n        address _rewardToken,\n        address _receiptToken,\n        address _borrowCToken,\n        address _vPool,\n        string memory _name\n    )\n        CompoundXYStrategy(\n            _pool,\n            _swapManager,\n            _comptroller,\n            _rewardDistributor,\n            _rewardToken,\n            _receiptToken,\n            _borrowCToken,\n            _name\n        )\n    {\n        require(address(IVesperPool(_vPool).token()) == borrowToken, \"not-a-valid-dai-pool\");\n        vPool = _vPool;\n    }\n\n    function updateBorrowCToken(address _newBorrowCToken) external override onlyGovernor {}\n\n    /// @notice Gets amount of borrowed Y collateral in strategy + Y collateral amount deposited in vPool\n    function borrowBalance() external view returns (uint256) {\n        return _getBorrowBalance();\n    }\n\n    function _approveToken(uint256 _amount) internal override {\n        super._approveToken(_amount);\n        IERC20(borrowToken).safeApprove(vPool, _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            IERC20(VSP).safeApprove(address(swapManager.ROUTERS(i)), _amount);\n        }\n    }\n\n    /// @notice Withdraw _shares proportional to collateral _amount from vPool\n    function _withdrawFromVesperPool(uint256 _amount) internal {\n        uint256 _pricePerShare = IVesperPool(vPool).pricePerShare();\n        uint256 _shares = (_amount * 1e18) / _pricePerShare;\n        _shares = _amount > ((_shares * _pricePerShare) / 1e18) ? _shares + 1 : _shares;\n\n        uint256 _maxShares = IERC20(vPool).balanceOf(address(this));\n\n        IVesperPool(vPool).whitelistedWithdraw(_shares > _maxShares ? _maxShares : _shares);\n    }\n\n    /// @notice After borrowing Y, deposit to Vesper Pool\n    function _afterBorrowY(uint256 _amount) internal override {\n        IVesperPool(vPool).deposit(_amount);\n    }\n\n    /// @notice Before repaying Y, withdraw it from Vesper Pool\n    function _beforeRepayY(uint256 _amount) internal override {\n        _withdrawFromVesperPool(_amount);\n    }\n\n    /// @notice Borrowed Y balance deposited in Vesper Pool\n    function _getBorrowBalance() internal view override returns (uint256) {\n        return\n            IERC20(borrowToken).balanceOf(address(this)) +\n            ((IVesperPool(vPool).pricePerShare() * IVesperPool(vPool).balanceOf(address(this))) / 1e18);\n    }\n\n    function _rebalanceBorrow(uint256 _excessBorrow) internal override {\n        if (_excessBorrow != 0) {\n            uint256 _borrowedHereBefore = IERC20(borrowToken).balanceOf(address(this));\n            _withdrawFromVesperPool(_excessBorrow);\n            uint256 _borrowedHere = IERC20(borrowToken).balanceOf(address(this)) - _borrowedHereBefore;\n            if (_borrowedHere != 0) {\n                _safeSwap(borrowToken, address(collateralToken), _borrowedHere, 1);\n            }\n        }\n    }\n\n    function _claimRewardsAndConvertTo(address _toToken) internal override {\n        super._claimRewardsAndConvertTo(_toToken);\n        uint256 _vspAmount = IERC20(VSP).balanceOf(address(this));\n        if (_vspAmount > 0) {\n            _safeSwap(VSP, _toToken, _vspAmount, 1);\n        }\n    }\n}\n"
    },
    "contracts/strategies/compound/CompoundXYStrategyETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./CompoundXYStrategy.sol\";\n\n// solhint-disable no-empty-blocks\n/// @title Deposit ETH/WETH in Compound and earn interest.\ncontract CompoundXYStrategyETH is CompoundXYStrategy {\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _comptroller,\n        address _rewardDistributor,\n        address _rewardToken,\n        address _receiptToken,\n        address _borrowCToken,\n        string memory _name\n    )\n        CompoundXYStrategy(\n            _pool,\n            _swapManager,\n            _comptroller,\n            _rewardDistributor,\n            _rewardToken,\n            _receiptToken,\n            _borrowCToken,\n            _name\n        )\n    {}\n\n    /// @dev Only receive ETH from either cToken or WETH\n    receive() external payable {\n        require(msg.sender == address(supplyCToken) || msg.sender == WETH, \"not-allowed-to-send-ether\");\n    }\n\n    /// @dev Unwrap ETH and supply in Compound\n    function _mintX(uint256 _amount) internal override {\n        if (_amount != 0) {\n            TokenLike(WETH).withdraw(_amount);\n            supplyCToken.mint{value: _amount}();\n        }\n    }\n\n    /// @dev Withdraw ETH from Compound and Wrap those as WETH\n    function _redeemX(uint256 _amount) internal override {\n        super._redeemX(_amount);\n        TokenLike(WETH).deposit{value: address(this).balance}();\n    }\n}\n"
    },
    "contracts/interfaces/compound/IComptrollerMultiReward.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\nimport \"./ICompound.sol\";\n\ninterface ComptrollerMultiReward {\n    function claimReward(uint8 rewardType, address holder) external;\n\n    function rewardDistributor() external view returns (address);\n\n    function markets(address market)\n        external\n        view\n        returns (\n            bool isListed,\n            uint256 collateralFactorMantissa,\n            uint8 version\n        );\n}\n\ninterface IRewardDistributor {\n    function rewardAccrued(uint8 rewardType, address holder) external view returns (uint256);\n\n    function admin() external view returns (address);\n\n    function _setRewardSpeed(\n        uint8 rewardType,\n        address jToken,\n        uint256 rewardSupplySpeed,\n        uint256 rewardBorrowSpeed\n    ) external;\n}\n"
    },
    "contracts/strategies/compound/CompoundMultiRewardAvalancheStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../compound/CompoundStrategy.sol\";\nimport \"../../interfaces/compound/IComptrollerMultiReward.sol\";\nimport \"../../interfaces/token/IToken.sol\";\n\n/// @title This strategy will deposit collateral token in a Compound Fork on avalanche and Earn Interest\ncontract CompoundMultiRewardAvalancheStrategy is CompoundStrategy {\n    using SafeERC20 for IERC20;\n\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n    address public rewardDistributor;\n\n    event RewardDistributorUpdated(address indexed _oldRewardDistributor, address indexed _newRewardDistributor);\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _comptroller,\n        address _rewardDistributor,\n        address _rewardToken,\n        address _receiptToken,\n        string memory _name\n    ) CompoundStrategy(_pool, _swapManager, _comptroller, _rewardToken, _receiptToken, _name) {\n        WETH = WAVAX;\n        require(_rewardDistributor != address(0), \"invalid-reward-distributor-addr\");\n        rewardDistributor = _rewardDistributor;\n    }\n\n    // Updates rewardDistributor of the Compound fork, in case it changes over time\n    function updateRewardDistributor(address _newRewardDistributor) external onlyKeeper {\n        require(_newRewardDistributor != address(0), \"invalid-reward-distributor-addr\");\n        emit RewardDistributorUpdated(rewardDistributor, _newRewardDistributor);\n        rewardDistributor = _newRewardDistributor;\n    }\n\n    //solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override {\n        super._approveToken(_amount);\n\n        // Approve router to swap extra wAVAX rewards\n        // Expect for the case when collateral is wAVAX itself\n        if (address(collateralToken) != WAVAX) {\n            for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n                IERC20(WAVAX).safeApprove(address(swapManager.ROUTERS(i)), _amount);\n            }\n        }\n    }\n\n    //solhint-disable-next-line no-empty-blocks\n    function _claimRewards() internal override {}\n\n    /// @notice Claim Protocol rewards + AVAX and convert them into collateral token.\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\n        ComptrollerMultiReward(address(COMPTROLLER)).claimReward(0, address(this)); // Claim protocol rewards\n        ComptrollerMultiReward(address(COMPTROLLER)).claimReward(1, address(this)); // Claim native AVAX (optional)\n\n        uint256 _rewardAmount = IERC20(rewardToken).balanceOf(address(this));\n        if (_rewardAmount != 0) {\n            _safeSwap(rewardToken, _toToken, _rewardAmount, 1);\n        }\n        uint256 _avaxRewardAmount = address(this).balance;\n        if (_avaxRewardAmount != 0) {\n            TokenLike(WAVAX).deposit{value: _avaxRewardAmount}();\n            if (_toToken != WAVAX) {\n                _safeSwap(WAVAX, _toToken, _avaxRewardAmount, 1);\n            }\n        }\n    }\n\n    /// @notice Get main Rewards accrued\n    function _getRewardAccrued() internal view virtual override returns (uint256 _rewardAccrued) {\n        _rewardAccrued = IRewardDistributor(rewardDistributor).rewardAccrued(0, address(this));\n    }\n}\n"
    },
    "contracts/strategies/compound/BenqiCompoundMultiRewardAvalancheStrategyAVAX.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./CompoundMultiRewardAvalancheStrategy.sol\";\nimport \"../../interfaces/token/IToken.sol\";\n\ncontract BenqiCompoundMultiRewardAvalancheStrategyAVAX is CompoundMultiRewardAvalancheStrategy {\n    //solhint-disable no-empty-blocks\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _comptroller,\n        address _rewardDistributor,\n        address _rewardToken,\n        address _receiptToken,\n        string memory _name\n    )\n        CompoundMultiRewardAvalancheStrategy(\n            _pool,\n            _swapManager,\n            _comptroller,\n            _rewardDistributor,\n            _rewardToken,\n            _receiptToken,\n            _name\n        )\n    {}\n\n    function _afterRedeem() internal override {\n        TokenLike(WAVAX).deposit{value: address(this).balance}();\n    }\n\n    function _reinvest() internal override {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n        if (_collateralBalance != 0) {\n            TokenLike(WAVAX).withdraw(_collateralBalance);\n            cToken.mint{value: _collateralBalance}();\n        }\n    }\n}\n"
    },
    "contracts/strategies/compound/CompoundLeverageAvalancheStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./CompoundLeverageStrategy.sol\";\nimport \"../../interfaces/compound/IComptrollerMultiReward.sol\";\n\ncontract CompoundLeverageAvalancheStrategy is CompoundLeverageStrategy {\n    using SafeERC20 for IERC20;\n\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _comptroller,\n        address _rewardDistributor,\n        address _rewardToken,\n        address _aaveAddressProvider,\n        address _receiptToken,\n        string memory _name\n    )\n        CompoundLeverageStrategy(\n            _pool,\n            _swapManager,\n            _comptroller,\n            _rewardDistributor,\n            _rewardToken,\n            _aaveAddressProvider,\n            _receiptToken,\n            _name\n        )\n    {\n        WETH = WAVAX;\n    }\n\n    //solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override {\n        collateralToken.safeApprove(pool, _amount);\n        collateralToken.safeApprove(address(cToken), _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            IERC20(rewardToken).safeApprove(address(swapManager.ROUTERS(i)), _amount);\n            IERC20(WAVAX).safeApprove(address(swapManager.ROUTERS(i)), _amount);\n        }\n        FlashLoanHelper._approveToken(address(collateralToken), _amount);\n    }\n\n    /// @notice Get main Rewards accrued\n    function _getRewardAccrued() internal view override returns (uint256 _rewardAccrued) {\n        _rewardAccrued = IRewardDistributor(rewardDistributor).rewardAccrued(0, address(this));\n    }\n\n    /// @notice Claim Protocol rewards + AVAX\n    function _claimRewards() internal override {\n        ComptrollerMultiReward(address(comptroller)).claimReward(0, address(this)); // Claim protocol rewards\n        ComptrollerMultiReward(address(comptroller)).claimReward(1, address(this)); // Claim native AVAX (optional)\n    }\n\n    function _safeSwap(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn\n    ) internal override {\n        // Removed UniV3 Oracle slippage check on Avalanche\n        _safeSwap(_tokenIn, _tokenOut, _amountIn, 1);\n    }\n\n    /// @dev DyDx isn't currently on Avalanche\n    //solhint-disable-next-line no-empty-blocks\n    function updateDyDxStatus(bool _status) external override onlyGovernor {}\n}\n"
    },
    "contracts/strategies/compound/BenqiCompoundLeverageAvalancheStrategyAVAX.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./CompoundLeverageAvalancheStrategy.sol\";\nimport \"../../interfaces/token/IToken.sol\";\n\ncontract BenqiCompoundLeverageAvalancheStrategyAVAX is CompoundLeverageAvalancheStrategy {\n    //solhint-disable no-empty-blocks\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _comptroller,\n        address _rewardDistributor,\n        address _rewardToken,\n        address _aaveAddressProvider,\n        address _receiptToken,\n        string memory _name\n    )\n        CompoundLeverageAvalancheStrategy(\n            _pool,\n            _swapManager,\n            _comptroller,\n            _rewardDistributor,\n            _rewardToken,\n            _aaveAddressProvider,\n            _receiptToken,\n            _name\n        )\n    {}\n\n    function _mint(uint256 _amount) internal override {\n        _withdrawETH(_amount);\n        cToken.mint{value: _amount}();\n    }\n\n    function _redeemUnderlying(uint256 _amount) internal override {\n        super._redeemUnderlying(_amount);\n        _depositETH();\n    }\n\n    function _borrowCollateral(uint256 _amount) internal override {\n        super._borrowCollateral(_amount);\n        _depositETH();\n    }\n\n    function _repayBorrow(uint256 _amount) internal override {\n        _withdrawETH(_amount);\n        cToken.repayBorrow{value: _amount}();\n    }\n\n    function _depositETH() internal {\n        TokenLike(WETH).deposit{value: address(this).balance}();\n    }\n\n    function _withdrawETH(uint256 _amount) internal {\n        TokenLike(WETH).withdraw(_amount);\n    }\n}\n"
    },
    "contracts/interfaces/alpha/ISafeBox.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../compound/ICompound.sol\";\n\ninterface ISafeBox is IERC20Metadata {\n    event Claim(address user, uint256 amount);\n\n    function cToken() external view returns (CToken);\n\n    // Not available for safeBoxEth\n    function uToken() external view returns (IERC20);\n\n    function deposit(uint256 amount) external;\n\n    // Overload for safeBoxEth\n    function deposit() external payable;\n\n    function withdraw(uint256 amount) external;\n\n    function claim(uint256 totalAmount, bytes32[] memory proof) external;\n\n    function claimAndWithdraw(\n        uint256 totalAmount,\n        bytes32[] memory proof,\n        uint256 withdrawAmount\n    ) external;\n}\n"
    },
    "contracts/strategies/alpha/AlphaLendStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../Strategy.sol\";\nimport \"../../interfaces/alpha/ISafeBox.sol\";\n\n/// @title This strategy will deposit collateral token in Alpha SafeBox (ibXYZv2) and earn interest.\ncontract AlphaLendStrategy is Strategy {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"4.0.0\";\n\n    address internal constant ALPHA = 0xa1faa113cbE53436Df28FF0aEe54275c13B40975;\n    ISafeBox internal safeBox;\n    uint256 internal immutable ibDecimals;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _receiptToken,\n        string memory _name\n    ) Strategy(_pool, _swapManager, _receiptToken) {\n        safeBox = ISafeBox(_receiptToken);\n        ibDecimals = safeBox.decimals();\n        _setupCheck(_pool);\n        NAME = _name;\n    }\n\n    function _setupCheck(address _pool) internal view virtual {\n        require(address(IVesperPool(_pool).token()) == address(safeBox.uToken()), \"u-token-mismatch\");\n    }\n\n    function _setupOracles() internal virtual override {\n        swapManager.createOrUpdateOracle(ALPHA, WETH, oraclePeriod, oracleRouterIdx);\n        if (address(collateralToken) != WETH) {\n            swapManager.createOrUpdateOracle(WETH, address(collateralToken), oraclePeriod, oracleRouterIdx);\n        }\n    }\n\n    function claimUTokenReward(uint256 amount, bytes32[] memory proof) external virtual onlyKeeper {\n        safeBox.claim(amount, proof);\n        IVesperPool(pool).reportEarning(collateralToken.balanceOf(address(this)), 0, 0);\n    }\n\n    function updateTokenRate() external returns (uint256) {\n        return safeBox.cToken().exchangeRateCurrent();\n    }\n\n    /**\n     * @notice Calculate total value using ALPHA accrued and cToken\n     * @dev Report total value in collateral token\n     */\n    function totalValue() public view virtual override returns (uint256 _totalValue) {\n        uint256 _alphaAmount = IERC20(ALPHA).balanceOf(address(this));\n        if (_alphaAmount != 0) {\n            (, _totalValue, ) = swapManager.bestOutputFixedInput(ALPHA, address(collateralToken), _alphaAmount);\n        }\n        _totalValue += _convertToCollateral(safeBox.balanceOf(address(this)));\n    }\n\n    function isReservedToken(address _token) public view virtual override returns (bool) {\n        return _token == receiptToken || _token == ALPHA;\n    }\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override {\n        collateralToken.safeApprove(pool, _amount);\n        collateralToken.safeApprove(address(safeBox), _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            IERC20(ALPHA).safeApprove(address(swapManager.ROUTERS(i)), _amount);\n        }\n    }\n\n    /// @notice Claim ALPHA and convert ALPHA into collateral token.\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\n        uint256 _alphaAmount = IERC20(ALPHA).balanceOf(address(this));\n        if (_alphaAmount != 0) {\n            uint256 minAmtOut =\n                (swapSlippage != 10000)\n                    ? _calcAmtOutAfterSlippage(\n                        _getOracleRate(_simpleOraclePath(ALPHA, _toToken), _alphaAmount),\n                        swapSlippage\n                    )\n                    : 1;\n            _safeSwap(ALPHA, _toToken, _alphaAmount, minAmtOut);\n        }\n    }\n\n    /// @notice Deposit collateral in Alpha\n    function _reinvest() internal virtual override {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n        if (_collateralBalance != 0) {\n            safeBox.deposit(_collateralBalance);\n        }\n    }\n\n    /// @dev Withdraw collateral and transfer it to pool\n    function _withdraw(uint256 _collateralAmount) internal override {\n        _withdrawHere(_collateralAmount);\n        collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)));\n    }\n\n    function _convertToCollateral(uint256 _ibAmount) internal view returns (uint256) {\n        return ((_ibAmount * safeBox.cToken().exchangeRateStored()) / 1e18);\n    }\n\n    function _convertToIb(uint256 _collateralAmount) internal view virtual returns (uint256) {\n        return (_collateralAmount * 1e18) / safeBox.cToken().exchangeRateStored();\n    }\n\n    function _withdrawHere(uint256 _collateralAmount) internal returns (uint256) {\n        uint256 _collateralBalanceBefore = collateralToken.balanceOf(address(this));\n        uint256 _sbBalance = safeBox.balanceOf(address(this));\n        uint256 _toWithdraw = _convertToIb(_collateralAmount);\n        // Make sure to withdraw requested amount\n        if (_collateralAmount > _convertToCollateral(_toWithdraw)) {\n            _toWithdraw += 1;\n        }\n        if (_toWithdraw > _sbBalance) {\n            _toWithdraw = _sbBalance;\n        }\n        safeBox.withdraw(_toWithdraw);\n        _afterDownstreamWithdrawal();\n        return collateralToken.balanceOf(address(this)) - _collateralBalanceBefore;\n    }\n\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {\n        if (_excessDebt != 0) {\n            _payback = _withdrawHere(_excessDebt);\n        }\n    }\n\n    function _realizeProfit(uint256 _totalDebt) internal virtual override returns (uint256) {\n        _claimRewardsAndConvertTo(address(collateralToken));\n        uint256 _collateralBalance = _convertToCollateral(safeBox.balanceOf(address(this)));\n        if (_collateralBalance > _totalDebt) {\n            _withdrawHere(_collateralBalance - _totalDebt);\n        }\n        return collateralToken.balanceOf(address(this));\n    }\n\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {\n        uint256 _collateralBalance = _convertToCollateral(safeBox.balanceOf(address(this)));\n        if (_collateralBalance < _totalDebt) {\n            _loss = _totalDebt - _collateralBalance;\n        }\n    }\n\n    /* solhint-disable no-empty-blocks */\n    function _afterDownstreamWithdrawal() internal virtual {}\n\n    function _beforeMigration(address _newStrategy) internal virtual override {}\n}\n"
    },
    "contracts/strategies/alpha/earn/EarnAlphaLendStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../AlphaLendStrategy.sol\";\nimport \"../../Earn.sol\";\n\n/// @title This strategy will deposit collateral token in Alpha Homora and earn drip in an another token.\ncontract EarnAlphaLendStrategy is AlphaLendStrategy, Earn {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable no-empty-blocks\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _receiptToken,\n        address _dripToken,\n        string memory _name\n    ) AlphaLendStrategy(_pool, _swapManager, _receiptToken, _name) Earn(_dripToken) {}\n\n    function _setupOracles() internal override(Strategy, AlphaLendStrategy) {\n        AlphaLendStrategy._setupOracles();\n    }\n\n    function _claimRewardsAndConvertTo(address _toToken) internal override(Strategy, AlphaLendStrategy) {\n        AlphaLendStrategy._claimRewardsAndConvertTo(_toToken);\n    }\n\n    function _realizeProfit(uint256 _totalDebt)\n        internal\n        virtual\n        override(Strategy, AlphaLendStrategy)\n        returns (uint256)\n    {\n        _claimRewardsAndConvertTo(address(dripToken));\n        uint256 _collateralBalance = _convertToCollateral(safeBox.balanceOf(address(this)));\n        if (_collateralBalance > _totalDebt) {\n            _withdrawHere(_collateralBalance - _totalDebt);\n        }\n        _convertCollateralToDrip();\n        _forwardEarning();\n        return 0;\n    }\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal override(Strategy, AlphaLendStrategy) {\n        collateralToken.safeApprove(pool, _amount);\n        collateralToken.safeApprove(address(safeBox), _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            IERC20(ALPHA).safeApprove(address(swapManager.ROUTERS(i)), _amount);\n            collateralToken.safeApprove(address(swapManager.ROUTERS(i)), _amount);\n        }\n    }\n}\n"
    },
    "contracts/strategies/alpha/earn/EarnAlphaLendStrategyETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./EarnAlphaLendStrategy.sol\";\nimport \"../../../interfaces/token/IToken.sol\";\n\n// solhint-disable no-empty-blocks\n/// @title Deposit ETH/WETH in Alpha Lend and earn interest in DAI.\ncontract EarnAlphaLendStrategyETH is EarnAlphaLendStrategy {\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _receiptToken,\n        address _dripToken,\n        string memory _name\n    ) EarnAlphaLendStrategy(_pool, _swapManager, _receiptToken, _dripToken, _name) {}\n\n    receive() external payable {\n        require((_msgSender() == address(safeBox)) || (_msgSender() == WETH), \"invalid-eth-sender\");\n    }\n\n    function _setupCheck(address _pool) internal view override {\n        require(address(IVesperPool(_pool).token()) == WETH, \"u-token-mismatch\");\n    }\n\n    function claimUTokenReward(uint256 amount, bytes32[] memory proof) external override onlyKeeper {\n        safeBox.claim(amount, proof);\n        uint256 _uBalance = address(this).balance;\n        TokenLike(WETH).deposit{value: _uBalance}();\n        _convertCollateralToDrip(_uBalance);\n        _forwardEarning();\n    }\n\n    /// @notice Deposit collateral in Alpha\n    function _reinvest() internal override {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n        if (_collateralBalance != 0) {\n            TokenLike(WETH).withdraw(_collateralBalance);\n            safeBox.deposit{value: _collateralBalance}();\n        }\n    }\n\n    function _afterDownstreamWithdrawal() internal override {\n        TokenLike(WETH).deposit{value: address(this).balance}();\n    }\n}\n"
    },
    "contracts/strategies/alpha/AlphaLendStrategyETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\n/* solhint-disable no-empty-blocks */\n\nimport \"./AlphaLendStrategy.sol\";\nimport \"../../interfaces/token/IToken.sol\";\n\n/// @title Deposit ETH in Alpha and earn interest.\ncontract AlphaLendStrategyETH is AlphaLendStrategy {\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _receiptToken,\n        string memory _name\n    ) AlphaLendStrategy(_pool, _swapManager, _receiptToken, _name) {}\n\n    receive() external payable {\n        require((_msgSender() == address(safeBox)) || (_msgSender() == WETH), \"invalid-eth-sender\");\n    }\n\n    function _setupCheck(address _pool) internal view override {\n        require(address(IVesperPool(_pool).token()) == WETH, \"u-token-mismatch\");\n    }\n\n    function claimUTokenReward(uint256 amount, bytes32[] memory proof) external override onlyKeeper {\n        safeBox.claim(amount, proof);\n        uint256 uBalance = address(this).balance;\n        TokenLike(WETH).deposit{value: uBalance}();\n        IVesperPool(pool).reportEarning(uBalance, 0, 0);\n    }\n\n    /// @notice Deposit collateral in Alpha\n    function _reinvest() internal override {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n        if (_collateralBalance != 0) {\n            TokenLike(WETH).withdraw(_collateralBalance);\n            safeBox.deposit{value: _collateralBalance}();\n        }\n    }\n\n    function _afterDownstreamWithdrawal() internal override {\n        TokenLike(WETH).deposit{value: address(this).balance}();\n    }\n}\n"
    },
    "contracts/strategies/rari-fuse/earn/EarnRariFuseStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../RariFuseStrategy.sol\";\nimport \"../../Earn.sol\";\n\n/// @title This strategy will deposit collateral token in RariFuse and earn drip in an another token.\ncontract EarnRariFuseStrategy is RariFuseStrategy, Earn {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable no-empty-blocks\n    constructor(\n        address _pool,\n        address _swapManager,\n        uint256 _fusePoolId,\n        IFusePoolDirectory _fusePoolDirectory,\n        address _dripToken,\n        string memory _name\n    ) RariFuseStrategy(_pool, _swapManager, _fusePoolId, _fusePoolDirectory, _name) Earn(_dripToken) {}\n\n    // solhint-enable no-empty-blocks\n\n    function totalValueCurrent() public virtual override(Strategy, CompoundStrategy) returns (uint256 _totalValue) {\n        _totalValue = totalValue();\n    }\n\n    function _setupOracles() internal override(Strategy, CompoundStrategy) {\n        CompoundStrategy._setupOracles();\n    }\n\n    // solhint-disable-next-line\n    function _claimRewardsAndConvertTo(address _toToken) internal override(Strategy, CompoundStrategy) {\n        CompoundStrategy._claimRewardsAndConvertTo(_toToken);\n    }\n\n    function _realizeProfit(uint256 _totalDebt)\n        internal\n        virtual\n        override(Strategy, CompoundStrategy)\n        returns (uint256)\n    {\n        _claimRewardsAndConvertTo(address(dripToken));\n        uint256 _collateralBalance = _convertToCollateral(cToken.balanceOf(address(this)));\n        if (_collateralBalance > _totalDebt) {\n            _withdrawHere(_collateralBalance - _totalDebt);\n        }\n        _convertCollateralToDrip();\n        _forwardEarning();\n        return 0;\n    }\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override(Strategy, CompoundStrategy) {\n        collateralToken.safeApprove(pool, _amount);\n        collateralToken.safeApprove(address(cToken), _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            collateralToken.safeApprove(address(swapManager.ROUTERS(i)), _amount);\n        }\n    }\n}\n"
    },
    "contracts/strategies/rari-fuse/earn/EarnRariFuseStrategyETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./EarnRariFuseStrategy.sol\";\nimport \"../../../interfaces/token/IToken.sol\";\n\n// solhint-disable no-empty-blocks\n/// @title Deposit ETH/WETH in RariFuse and earn interest in DAI.\ncontract EarnRariFuseStrategyETH is EarnRariFuseStrategy {\n    using RariCore for IFusePoolDirectory;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        uint256 _fusePoolId,\n        IFusePoolDirectory _fusePoolDirectory,\n        address _dripToken,\n        string memory _name\n    ) EarnRariFuseStrategy(_pool, _swapManager, _fusePoolId, _fusePoolDirectory, _dripToken, _name) {}\n\n    function migrateFusePool(uint256 _newPoolId) external override onlyKeeper {\n        address _newCToken = fusePoolDirectory.getCTokenByUnderlying(_newPoolId, address(0x0));\n        require(address(cToken) != _newCToken, \"same-fuse-pool\");\n        require(cToken.redeem(cToken.balanceOf(address(this))) == 0, \"withdraw-from-fuse-pool-failed\");\n        CToken(_newCToken).mint{value: address(this).balance}();\n        emit FusePoolChanged(_newPoolId, address(cToken), _newCToken);\n        cToken = CToken(_newCToken);\n        receiptToken = _newCToken;\n        fusePoolId = _newPoolId;\n    }\n\n    /// @dev Only receive ETH from either cToken or WETH\n    receive() external payable {\n        require(msg.sender == address(cToken) || msg.sender == WETH, \"not-allowed-to-send-ether\");\n    }\n\n    /**\n     * @dev This hook get called after collateral is redeemed from RariFuse\n     * Vesper deals in WETH as collateral so convert ETH to WETH\n     */\n    function _afterRedeem() internal override {\n        TokenLike(WETH).deposit{value: address(this).balance}();\n    }\n\n    /**\n     * @dev During reinvest we have WETH as collateral but RariFuse accepts ETH.\n     * Withdraw ETH from WETH before calling mint in RariFuse.\n     */\n    function _reinvest() internal override {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n        if (_collateralBalance != 0) {\n            TokenLike(WETH).withdraw(_collateralBalance);\n            cToken.mint{value: _collateralBalance}();\n        }\n    }\n}\n"
    },
    "contracts/pool/VETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./VPool.sol\";\nimport \"../interfaces/token/IToken.sol\";\n\n//solhint-disable no-empty-blocks\ncontract VETH is VPool {\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _token\n    ) VPool(_name, _symbol, _token) {}\n\n    /// @dev Handle incoming ETH to the contract address.\n    receive() external payable {\n        if (msg.sender != address(token)) {\n            deposit();\n        }\n    }\n\n    /// @dev Burns tokens/shares and returns the ETH value, after fee, of those.\n    function withdrawETH(uint256 _shares) external whenNotShutdown nonReentrant {\n        withdrawInETH = true;\n        _updateRewards(_msgSender());\n        _withdraw(_shares);\n        withdrawInETH = false;\n    }\n\n    /// @dev Burns tokens/shares and returns the ETH value and claim rewards if any\n    function withdrawETHAndClaim(uint256 _shares) external whenNotShutdown nonReentrant {\n        withdrawInETH = true;\n        _withdrawAndClaim(_shares);\n        withdrawInETH = false;\n    }\n\n    /**\n     * @dev After burning hook, it will be called during withdrawal process.\n     * It will withdraw collateral from strategy and transfer it to user.\n     */\n    function _afterBurning(uint256 _amount) internal override returns (uint256) {\n        if (withdrawInETH) {\n            TokenLike(address(token)).withdraw(_amount);\n            Address.sendValue(payable(_msgSender()), _amount);\n        } else {\n            super._afterBurning(_amount);\n        }\n        return _amount;\n    }\n\n    /**\n     * @dev Receives ETH and grants new tokens/shares to the sender depending\n     * on the value of pool's share.\n     */\n    function deposit() public payable whenNotPaused nonReentrant {\n        _updateRewards(_msgSender());\n        _deposit();\n    }\n\n    /// @dev Deposit ETH and claim rewards if any\n    function depositAndClaim() external payable whenNotPaused nonReentrant {\n        _claimRewards(_msgSender());\n        _deposit();\n    }\n\n    function _deposit() internal {\n        uint256 _shares = calculateMintage(msg.value);\n        // Wraps ETH in WETH\n        TokenLike(address(token)).deposit{value: msg.value}();\n        _mint(_msgSender(), _shares);\n        emit Deposit(_msgSender(), _shares, msg.value);\n    }\n}\n"
    },
    "contracts/pool/VPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"./VPoolBase.sol\";\n\n//solhint-disable no-empty-blocks\ncontract VPool is VPoolBase {\n    string public constant VERSION = \"4.0.0\";\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _token\n    ) VPoolBase(_name, _symbol, _token) {}\n\n    function initialize(\n        string memory _name,\n        string memory _symbol,\n        address _token,\n        address _poolAccountant\n    ) public initializer {\n        _initializeBase(_name, _symbol, _token, _poolAccountant);\n    }\n}\n"
    },
    "contracts/strategies/aave/AaveStrategyPolygon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\nimport \"../Strategy.sol\";\nimport \"../../interfaces/aave/IAave.sol\";\n\n/// @dev This strategy will deposit collateral token in Aave and earn interest.\ncontract AaveStrategyPolygon is Strategy {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"4.0.0\";\n\n    bytes32 private constant AAVE_PROVIDER_ID = 0x0100000000000000000000000000000000000000000000000000000000000000;\n    AaveLendingPool public aaveLendingPool;\n    AaveProtocolDataProvider public aaveProtocolDataProvider;\n    AaveIncentivesController public aaveIncentivesController;\n    AaveLendingPoolAddressesProvider public aaveAddressesProvider =\n        AaveLendingPoolAddressesProvider(0xd05e3E715d945B59290df0ae8eF85c1BdB684744);\n    address public rewardToken = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\n    AToken internal immutable aToken;\n    event UpdatedAddressesProvider(address _previousProvider, address _newProvider);\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _receiptToken,\n        string memory _name\n    ) Strategy(_pool, _swapManager, _receiptToken) {\n        require(_receiptToken != address(0), \"aToken-address-is-zero\");\n        aToken = AToken(_receiptToken);\n        // If there is no incentive then below call will fail\n        try AToken(_receiptToken).getIncentivesController() returns (address _aaveIncentivesController) {\n            aaveIncentivesController = AaveIncentivesController(_aaveIncentivesController);\n        } catch {} //solhint-disable no-empty-blocks\n        aaveLendingPool = AaveLendingPool(aaveAddressesProvider.getLendingPool());\n        aaveProtocolDataProvider = AaveProtocolDataProvider(aaveAddressesProvider.getAddress(AAVE_PROVIDER_ID));\n        NAME = _name;\n    }\n\n    /**\n     * @notice Report total value\n     * @dev aToken and collateral are 1:1\n     */\n    function totalValue() public view virtual override returns (uint256) {\n        if (address(aaveIncentivesController) == address(0)) {\n            // As there is no incentive return aToken balance as totalValue\n            return aToken.balanceOf(address(this));\n        }\n        address[] memory _assets = new address[](1);\n        _assets[0] = address(aToken);\n        uint256 _rewardAccrued = aaveIncentivesController.getRewardsBalance(_assets, address(this));\n        (, uint256 _rewardAsCollateral, ) =\n            swapManager.bestOutputFixedInput(rewardToken, address(collateralToken), _rewardAccrued);\n        // Total value = reward as collateral + aToken balance\n        return _rewardAsCollateral + aToken.balanceOf(address(this));\n    }\n\n    /**\n     * @notice Update address of Aave LendingPoolAddressesProvider\n     * @dev We will use new address to fetch lendingPool address and update that too.\n     */\n    function updateAddressesProvider(address _newAddressesProvider) external onlyGovernor {\n        require(_newAddressesProvider != address(0), \"provider-address-is-zero\");\n        require(address(aaveAddressesProvider) != _newAddressesProvider, \"same-addresses-provider\");\n        emit UpdatedAddressesProvider(address(aaveAddressesProvider), _newAddressesProvider);\n        aaveAddressesProvider = AaveLendingPoolAddressesProvider(_newAddressesProvider);\n        aaveLendingPool = AaveLendingPool(aaveAddressesProvider.getLendingPool());\n        aaveProtocolDataProvider = AaveProtocolDataProvider(aaveAddressesProvider.getAddress(AAVE_PROVIDER_ID));\n    }\n\n    function isReservedToken(address _token) public view override returns (bool) {\n        return _token == address(aToken) || _token == rewardToken;\n    }\n\n    /// @notice Large approval of token\n    function _approveToken(uint256 _amount) internal override {\n        collateralToken.safeApprove(pool, _amount);\n        collateralToken.safeApprove(address(aaveLendingPool), _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            IERC20(rewardToken).safeApprove(address(swapManager.ROUTERS(i)), _amount);\n        }\n    }\n\n    /**\n     * @notice Transfer StakeAave to newStrategy\n     * @param _newStrategy Address of newStrategy\n     */\n    //solhint-disable no-empty-blocks\n    function _beforeMigration(address _newStrategy) internal override {}\n\n    /// @notice Claim Aave rewards and convert to _toToken.\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\n        uint256 _rewardAmount = _claimRewards();\n        if (_rewardAmount != 0 && rewardToken != _toToken) {\n            _safeSwap(rewardToken, _toToken, _rewardAmount, 1);\n        }\n    }\n\n    /**\n     * @notice Claim rewards from Aave incentive controller\n     * @dev Return 0 if collateral has no incentive\n     */\n    function _claimRewards() internal returns (uint256) {\n        if (address(aaveIncentivesController) == address(0)) {\n            return 0;\n        }\n        address[] memory _assets = new address[](1);\n        _assets[0] = address(aToken);\n        aaveIncentivesController.claimRewards(_assets, type(uint256).max, address(this));\n        return IERC20(rewardToken).balanceOf(address(this));\n    }\n\n    /// @notice Deposit asset into Aave\n    function _deposit(uint256 _amount) internal {\n        if (_amount != 0) {\n            aaveLendingPool.deposit(address(collateralToken), _amount, address(this), 0);\n        }\n    }\n\n    /// @notice Withdraw collateral to payback excess debt\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {\n        if (_excessDebt != 0) {\n            _payback = _safeWithdraw(address(this), _excessDebt);\n        }\n    }\n\n    /// @notice Returns minimum of 2 given numbers\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @notice Calculate earning and withdraw it from Aave.\n     * @dev If somehow we got some collateral token in strategy then we want to\n     *  include those in profit. That's why we used 'return' outside 'if' condition.\n     * @param _totalDebt Total collateral debt of this strategy\n     * @return profit in collateral token\n     */\n    function _realizeProfit(uint256 _totalDebt) internal override returns (uint256) {\n        _claimRewardsAndConvertTo(address(collateralToken));\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\n        if (_aTokenBalance > _totalDebt) {\n            _withdraw(address(this), _aTokenBalance - _totalDebt);\n        }\n        return collateralToken.balanceOf(address(this));\n    }\n\n    /**\n     * @notice Calculate realized loss.\n     * @return _loss Realized loss in collateral token\n     */\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\n        if (_aTokenBalance < _totalDebt) {\n            _loss = _totalDebt - _aTokenBalance;\n        }\n    }\n\n    /// @notice Deposit collateral in Aave\n    function _reinvest() internal override {\n        _deposit(collateralToken.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Safe withdraw will make sure to check asking amount against available amount.\n     * @dev Check we have enough aToken and liquidity to support this withdraw\n     * @param _to Address that will receive collateral token.\n     * @param _amount Amount of collateral to withdraw.\n     * @return Actual collateral withdrawn\n     */\n    function _safeWithdraw(address _to, uint256 _amount) internal returns (uint256) {\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\n        // If Vesper becomes large liquidity provider in Aave(This happened in past in vUSDC 1.0)\n        // In this case we might have more aToken compare to available liquidity in Aave and any\n        // withdraw asking more than available liquidity will fail. To do safe withdraw, check\n        // _amount against available liquidity.\n        (uint256 _availableLiquidity, , , , , , , , , ) =\n            aaveProtocolDataProvider.getReserveData(address(collateralToken));\n        // Get minimum of _amount, _aTokenBalance and _availableLiquidity\n        return _withdraw(_to, _min(_amount, _min(_aTokenBalance, _availableLiquidity)));\n    }\n\n    /**\n     * @notice Withdraw given amount of collateral from Aave to pool\n     * @param _amount Amount of collateral to withdraw.\n     */\n    function _withdraw(uint256 _amount) internal override {\n        _safeWithdraw(pool, _amount);\n    }\n\n    /**\n     * @notice Withdraw given amount of collateral from Aave to given address\n     * @param _to Address that will receive collateral token.\n     * @param _amount Amount of collateral to withdraw.\n     * @return Actual collateral withdrawn\n     */\n    function _withdraw(address _to, uint256 _amount) internal returns (uint256) {\n        if (_amount != 0) {\n            require(\n                aaveLendingPool.withdraw(address(collateralToken), _amount, _to) == _amount,\n                \"withdrawn-amount-is-not-correct\"\n            );\n        }\n        return _amount;\n    }\n}\n"
    },
    "contracts/strategies/aave/AaveStrategyAvalanche.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\nimport \"../Strategy.sol\";\nimport \"../../interfaces/aave/IAave.sol\";\n\n/// @dev This strategy will deposit collateral token in Aave and earn interest.\ncontract AaveStrategyAvalanche is Strategy {\n    using SafeERC20 for IERC20;\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"4.0.1\";\n\n    bytes32 private constant AAVE_PROVIDER_ID = 0x0100000000000000000000000000000000000000000000000000000000000000;\n    AaveLendingPool public aaveLendingPool;\n    AaveProtocolDataProvider public aaveProtocolDataProvider;\n    AaveIncentivesController public aaveIncentivesController;\n    AaveLendingPoolAddressesProvider public aaveAddressesProvider =\n        AaveLendingPoolAddressesProvider(0xb6A86025F0FE1862B372cb0ca18CE3EDe02A318f);\n    address public rewardToken = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n    AToken internal immutable aToken;\n    event UpdatedAddressesProvider(address _previousProvider, address _newProvider);\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _receiptToken,\n        string memory _name\n    ) Strategy(_pool, _swapManager, _receiptToken) {\n        require(_receiptToken != address(0), \"aToken-address-is-zero\");\n        aToken = AToken(_receiptToken);\n        // If there is no incentive then below call will fail\n        try AToken(_receiptToken).getIncentivesController() returns (address _aaveIncentivesController) {\n            aaveIncentivesController = AaveIncentivesController(_aaveIncentivesController);\n        } catch {} //solhint-disable no-empty-blocks\n        aaveLendingPool = AaveLendingPool(aaveAddressesProvider.getLendingPool());\n        aaveProtocolDataProvider = AaveProtocolDataProvider(aaveAddressesProvider.getAddress(AAVE_PROVIDER_ID));\n        NAME = _name;\n    }\n\n    /**\n     * @notice Report total value\n     * @dev aToken and collateral are 1:1\n     */\n    function totalValue() public view virtual override returns (uint256) {\n        if (address(aaveIncentivesController) == address(0)) {\n            // As there is no incentive return aToken balance as totalValue\n            return aToken.balanceOf(address(this));\n        }\n        address[] memory _assets = new address[](1);\n        _assets[0] = address(aToken);\n        uint256 _rewardAccrued = aaveIncentivesController.getRewardsBalance(_assets, address(this));\n        (, uint256 _rewardAsCollateral, ) =\n            swapManager.bestOutputFixedInput(rewardToken, address(collateralToken), _rewardAccrued);\n        // Total value = reward as collateral + aToken balance\n        return _rewardAsCollateral + aToken.balanceOf(address(this));\n    }\n\n    /**\n     * @notice Update address of Aave LendingPoolAddressesProvider\n     * @dev We will use new address to fetch lendingPool address and update that too.\n     */\n    function updateAddressesProvider(address _newAddressesProvider) external onlyGovernor {\n        require(_newAddressesProvider != address(0), \"provider-address-is-zero\");\n        require(address(aaveAddressesProvider) != _newAddressesProvider, \"same-addresses-provider\");\n        emit UpdatedAddressesProvider(address(aaveAddressesProvider), _newAddressesProvider);\n        aaveAddressesProvider = AaveLendingPoolAddressesProvider(_newAddressesProvider);\n        aaveLendingPool = AaveLendingPool(aaveAddressesProvider.getLendingPool());\n        aaveProtocolDataProvider = AaveProtocolDataProvider(aaveAddressesProvider.getAddress(AAVE_PROVIDER_ID));\n    }\n\n    function isReservedToken(address _token) public view override returns (bool) {\n        return _token == address(aToken) || _token == rewardToken;\n    }\n\n    /// @notice Large approval of token\n    function _approveToken(uint256 _amount) internal override {\n        collateralToken.safeApprove(pool, _amount);\n        collateralToken.safeApprove(address(aaveLendingPool), _amount);\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\n            IERC20(rewardToken).safeApprove(address(swapManager.ROUTERS(i)), _amount);\n        }\n    }\n\n    /**\n     * @notice Transfer StakeAave to newStrategy\n     * @param _newStrategy Address of newStrategy\n     */\n    //solhint-disable no-empty-blocks\n    function _beforeMigration(address _newStrategy) internal override {}\n\n    /// @notice Claim Aave rewards and convert to _toToken.\n    function _claimRewardsAndConvertTo(address _toToken) internal override {\n        uint256 _rewardAmount = _claimRewards();\n        if (rewardToken != _toToken && _rewardAmount != 0) {\n            _safeSwap(rewardToken, _toToken, _rewardAmount, 1);\n        }\n    }\n\n    /**\n     * @notice Claim rewards from Aave incentive controller\n     * @dev Return 0 if collateral has no incentive\n     */\n    function _claimRewards() internal returns (uint256) {\n        if (address(aaveIncentivesController) == address(0)) {\n            return 0;\n        }\n        address[] memory _assets = new address[](1);\n        _assets[0] = address(aToken);\n        aaveIncentivesController.claimRewards(_assets, type(uint256).max, address(this));\n        return IERC20(rewardToken).balanceOf(address(this));\n    }\n\n    /// @notice Deposit asset into Aave\n    function _deposit(uint256 _amount) internal {\n        if (_amount != 0) {\n            aaveLendingPool.deposit(address(collateralToken), _amount, address(this), 0);\n        }\n    }\n\n    /// @notice Withdraw collateral to payback excess debt\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {\n        if (_excessDebt != 0) {\n            _payback = _safeWithdraw(address(this), _excessDebt);\n        }\n    }\n\n    /// @notice Returns minimum of 2 given numbers\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @notice Calculate earning and withdraw it from Aave.\n     * @dev If somehow we got some collateral token in strategy then we want to\n     *  include those in profit. That's why we used 'return' outside 'if' condition.\n     * @param _totalDebt Total collateral debt of this strategy\n     * @return profit in collateral token\n     */\n    function _realizeProfit(uint256 _totalDebt) internal override returns (uint256) {\n        _claimRewardsAndConvertTo(address(collateralToken));\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\n        if (_aTokenBalance > _totalDebt) {\n            _withdraw(address(this), _aTokenBalance - _totalDebt);\n        }\n        return collateralToken.balanceOf(address(this));\n    }\n\n    /**\n     * @notice Calculate realized loss.\n     * @return _loss Realized loss in collateral token\n     */\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\n        if (_aTokenBalance < _totalDebt) {\n            _loss = _totalDebt - _aTokenBalance;\n        }\n    }\n\n    /// @notice Deposit collateral in Aave\n    function _reinvest() internal override {\n        _deposit(collateralToken.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Safe withdraw will make sure to check asking amount against available amount.\n     * @dev Check we have enough aToken and liquidity to support this withdraw\n     * @param _to Address that will receive collateral token.\n     * @param _amount Amount of collateral to withdraw.\n     * @return Actual collateral withdrawn\n     */\n    function _safeWithdraw(address _to, uint256 _amount) internal returns (uint256) {\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\n        // If Vesper becomes large liquidity provider in Aave(This happened in past in vUSDC 1.0)\n        // In this case we might have more aToken compare to available liquidity in Aave and any\n        // withdraw asking more than available liquidity will fail. To do safe withdraw, check\n        // _amount against available liquidity.\n        (uint256 _availableLiquidity, , , , , , , , , ) =\n            aaveProtocolDataProvider.getReserveData(address(collateralToken));\n        // Get minimum of _amount, _aTokenBalance and _availableLiquidity\n        return _withdraw(_to, _min(_amount, _min(_aTokenBalance, _availableLiquidity)));\n    }\n\n    /**\n     * @notice Withdraw given amount of collateral from Aave to pool\n     * @param _amount Amount of collateral to withdraw.\n     */\n    function _withdraw(uint256 _amount) internal override {\n        _safeWithdraw(pool, _amount);\n    }\n\n    /**\n     * @notice Withdraw given amount of collateral from Aave to given address\n     * @param _to Address that will receive collateral token.\n     * @param _amount Amount of collateral to withdraw.\n     * @return Actual collateral withdrawn\n     */\n    function _withdraw(address _to, uint256 _amount) internal returns (uint256) {\n        if (_amount != 0) {\n            require(\n                aaveLendingPool.withdraw(address(collateralToken), _amount, _to) == _amount,\n                \"withdrawn-amount-is-not-correct\"\n            );\n        }\n        return _amount;\n    }\n}\n"
    },
    "contracts/test/VSPTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n// This is test contract\n// solhint-disable no-empty-blocks\ncontract VSP is ERC20 {\n    constructor() ERC20(\"VesperToken\", \"VSP\") {}\n\n    /// @dev Mint test VSP\n    function mint(address _recipient, uint256 _amount) external {\n        _mint(_recipient, _amount);\n    }\n}\n"
    },
    "contracts/strategies/maker/earn/EarnVesperMakerStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\n\nimport \"../VesperMakerStrategy.sol\";\nimport \"../../Earn.sol\";\n\n/// @dev This strategy will deposit collateral token in Maker, borrow Dai and\n/// deposit borrowed DAI in Vesper pool to earn interest.\ncontract EarnVesperMakerStrategy is VesperMakerStrategy, Earn {\n    using SafeERC20 for IERC20;\n\n    constructor(\n        address _pool,\n        address _cm,\n        address _swapManager,\n        address _vPool,\n        bytes32 _collateralType,\n        address _dripToken,\n        string memory _name\n    ) VesperMakerStrategy(_pool, _cm, _swapManager, _vPool, _collateralType, _name) Earn(_dripToken) {\n        require(address(IVesperPool(_vPool).token()) == DAI, \"not-a-valid-dai-pool\");\n        address _dripContract = IVesperPool(_pool).poolRewards();\n        address _growPool = IEarnDrip(_dripContract).growToken();\n        // underlying vPool of MakerStrategy must be equal to the growToken\n        // Otherwise we cannot forward earnings without withdrawing/redepositing first\n        // Example: Underlying vPool is vDAI v2 and growToken is vDAI v3 won't work\n        require(receiptToken == _growPool, \"not-a-valid-grow-pool\");\n    }\n\n    function _claimRewardsAndConvertTo(address _toToken) internal override(Strategy, VesperMakerStrategy) {\n        VesperMakerStrategy._claimRewardsAndConvertTo(_toToken);\n    }\n\n    function _rebalanceDaiInLender() internal override {\n        uint256 _daiDebt = cm.getVaultDebt(address(this));\n\n        // DAI balance collected from _claimRewardsAndConvertTo (VSP rewards)\n        uint256 _daiFromRewards = IERC20(dripToken).balanceOf(address(this));\n\n        address _dripContract = IVesperPool(pool).poolRewards();\n        address _growPool = IEarnDrip(_dripContract).growToken();\n\n        if (_daiFromRewards != 0) {\n            // If we have any spare DAI collected from _claimRewardsAndConvertTo\n            // We want to deposit them in vPool\n            IVesperPool(_growPool).deposit(_daiFromRewards);\n        }\n\n        // DAI balance deposited in vPool\n        uint256 _daiBalance = _getDaiBalance();\n\n        if (_daiBalance > _daiDebt) {\n            // If actual DAI balance in vPool has increased we want to forward this to EarnDrip\n            uint256 _daiEarned = _daiBalance - _daiDebt;\n            uint256 _vAmount = (_daiEarned * 1e18) / IVesperPool(receiptToken).pricePerShare();\n\n            if (_vAmount != 0) {\n                totalEarned += _daiEarned;\n\n                (, uint256 _interestFee, , , , , , ) = IVesperPool(pool).strategy(address(this));\n                uint256 _growPoolBalance = IERC20(_growPool).balanceOf(address(this));\n                uint256 _growPoolShares = (_vAmount > _growPoolBalance) ? _growPoolBalance : _vAmount;\n                uint256 _fee = (_growPoolShares * _interestFee) / 10000;\n                if (_fee != 0) {\n                    IERC20(_growPool).safeTransfer(feeCollector, _fee);\n                    _growPoolShares = _growPoolShares - _fee;\n                }\n                IERC20(_growPool).safeTransfer(_dripContract, _growPoolShares);\n                IEarnDrip(_dripContract).notifyRewardAmount(_growPool, _growPoolShares, dripPeriod);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculate earning and convert it to collateral token\n     * @dev Also claim rewards if available.\n     *      Withdraw excess DAI from lender.\n     *      Swap net earned DAI to collateral token\n     * @return profit in collateral token\n     */\n    function _realizeProfit(\n        uint256 /*_totalDebt*/\n    ) internal virtual override(Strategy, MakerStrategy) returns (uint256) {\n        _claimRewardsAndConvertTo(dripToken);\n        _rebalanceDaiInLender();\n        return collateralToken.balanceOf(address(this));\n    }\n}\n"
    },
    "contracts/test/IVesperPoolTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.3;\nimport \"../interfaces/vesper/IVesperPool.sol\";\n\ninterface IVesperPoolTest is IVesperPool {\n    function strategies(uint256) external view returns (address);\n\n    function feeWhitelist() external view returns (address);\n\n    function isFeeWhitelisted(address) external view returns (bool);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function VERSION() external view returns (string memory);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}