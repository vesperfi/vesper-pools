{
  "address": "0x1b6c5bddaf46f5e28a4b2730f64ca060e2325513",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardDuration",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "existingRewardTokens",
          "type": "address[]"
        }
      ],
      "name": "RewardTokenAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newRewardToken",
          "type": "address"
        }
      ],
      "name": "addRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_claimableAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isRewardToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardDuration",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardDurations",
          "type": "uint256[]"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardForDuration",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardForDuration",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardPerTokenRate",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2134e458457ede344baee83d37316638dc6e3cf658d6623c340828fccd1f6007",
  "receipt": {
    "to": null,
    "from": "0x76d266dfd3754f090488ae12f6bd115cd7e77ebd",
    "contractAddress": "0x1b6c5bddaf46f5e28a4b2730f64ca060e2325513",
    "transactionIndex": "0x1",
    "gasUsed": "0x20ab59",
    "logsBloom": "0x
    "blockHash": "0x592b96f3fb4ea3fdfc10f57c65dac8c2c3c43e48ad2bf06cbfad5773c138810d",
    "transactionHash": "0xe6ca97c647ab5d59bcd689d190837fa86317bf768d8107a1d4856d961a7d2eb3",
    "logs": [],
    "blockNumber": "0xcd4944",
    "cumulativeGasUsed": "0x20fd61",
    "status": "0x1"
  },
  "args": [],
  "solcInputHash": "35595fa56767f29adba4fce9eac5fb19",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardDuration\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"existingRewardTokens\",\"type\":\"address[]\"}],\"name\":\"RewardTokenAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRewardToken\",\"type\":\"address\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimableAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardDuration\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardDurations\",\"type\":\"uint256[]\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardForDuration\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardForDuration\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardPerTokenRate\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimReward(address)\":{\"details\":\"This function will claim rewards for all tokens being rewarded\"},\"claimable(address)\":{\"returns\":{\"_claimableAmounts\":\"Array of claimable for token on same index in rewardTokens\",\"_rewardTokens\":\"Array of tokens being rewarded\"}},\"initialize(address,address[])\":{\"details\":\"Called by proxy to initialize this contract\",\"params\":{\"_pool\":\"Vesper pool address\",\"_rewardTokens\":\"Array of reward token addresses\"}},\"notifyRewardAmount(address[],uint256[],uint256[])\":{\"details\":\"Also updates reward rate and reward earning period.\",\"params\":{\"_rewardAmounts\":\"Rewards amount for token on same index in rewardTokens array\",\"_rewardDurations\":\"Duration for which reward will be distributed\",\"_rewardTokens\":\"Tokens being rewarded\"}},\"rewardPerToken()\":{\"returns\":{\"_rewardPerTokenRate\":\"Array of Rewards rate for token on same index in rewardTokens\",\"_rewardTokens\":\"Array of tokens being rewarded\"}}},\"title\":\"Distribute rewards based on vesper pool balance and supply\",\"version\":1},\"userdoc\":{\"events\":{\"RewardAdded(address,uint256,uint256)\":{\"notice\":\"Emitted after reward added\"},\"RewardPaid(address,address,uint256)\":{\"notice\":\"Emitted whenever any user claim rewards\"},\"RewardTokenAdded(address,address[])\":{\"notice\":\"Emitted after adding new rewards token into rewardTokens array\"}},\"kind\":\"user\",\"methods\":{\"addRewardToken(address)\":{\"notice\":\"Add new reward token in existing rewardsToken array\"},\"claimReward(address)\":{\"notice\":\"Claim earned rewards.\"},\"claimable(address)\":{\"notice\":\"Returns claimable reward amount.\"},\"getRewardTokens()\":{\"notice\":\"Provides easy access to all rewardTokens\"},\"isRewardToken(address)\":{\"notice\":\"Reward token to valid/invalid flag mapping\"},\"lastTimeRewardApplicable(address)\":{\"notice\":\"Returns timestamp of last reward update\"},\"lastUpdateTime(address)\":{\"notice\":\"Reward token to Last reward drip update time stamp mapping\"},\"notifyRewardAmount(address[],uint256[],uint256[])\":{\"notice\":\"Notify that reward is added. Only authorized caller can call\"},\"periodFinish(address)\":{\"notice\":\"Reward token to period ending of current reward\"},\"pool()\":{\"notice\":\"Vesper pool address\"},\"rewardDuration(address)\":{\"notice\":\"Reward token to Duration of current reward distribution\"},\"rewardPerToken()\":{\"notice\":\"Rewards rate per pool token\"},\"rewardPerTokenStored(address)\":{\"notice\":\"Reward token to Reward per token mapping. Calculated and stored at last drip update\"},\"rewardRates(address)\":{\"notice\":\"Reward token to current reward rate mapping\"},\"rewardTokens(uint256)\":{\"notice\":\"Array of reward token addresses\"},\"rewards(address,address)\":{\"notice\":\"RewardToken => User => Rewards earned till last reward update\"},\"updateReward(address)\":{\"notice\":\"Updated reward for given account.\"},\"userRewardPerTokenPaid(address,address)\":{\"notice\":\"Reward token => User => Reward per token stored at last reward update\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pool/PoolRewards.sol\":\"PoolRewards\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IPoolRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IPoolRewards {\\n    /// Emitted after reward added\\n    event RewardAdded(address indexed rewardToken, uint256 reward, uint256 rewardDuration);\\n    /// Emitted whenever any user claim rewards\\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\\n    /// Emitted after adding new rewards token into rewardTokens array\\n    event RewardTokenAdded(address indexed rewardToken, address[] existingRewardTokens);\\n\\n    function claimReward(address) external;\\n\\n    function notifyRewardAmount(\\n        address _rewardToken,\\n        uint256 _rewardAmount,\\n        uint256 _rewardDuration\\n    ) external;\\n\\n    function notifyRewardAmount(\\n        address[] memory _rewardTokens,\\n        uint256[] memory _rewardAmounts,\\n        uint256[] memory _rewardDurations\\n    ) external;\\n\\n    function updateReward(address) external;\\n\\n    function claimable(address _account)\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts);\\n\\n    function lastTimeRewardApplicable(address _rewardToken) external view returns (uint256);\\n\\n    function rewardForDuration()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration);\\n\\n    function rewardPerToken()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate);\\n}\\n\",\"keccak256\":\"0x2c32aea3476eebd75122915430df1c37e7a40778402f3c72aa3b6a40301cb485\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVesperPool is IERC20 {\\n    function deposit() external payable;\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function poolRewards() external returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function resetApproval() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function withdrawETH(uint256 _amount) external;\\n\\n    function whitelistedWithdraw(uint256 _amount) external;\\n\\n    function governor() external view returns (address);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address _address) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address _address) external view returns (bool);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee,\\n            uint256 _debtRate,\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio\\n        );\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n\\n    // Function to get pricePerShare from V2 pools\\n    function getPricePerShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x938b275f1e200fabee7dec960f95f7c82e934de107e12a2acac487d624d190c4\",\"license\":\"MIT\"},\"contracts/pool/PoolRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/vesper/IPoolRewards.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\n\\ncontract PoolRewardsStorage {\\n    /// Vesper pool address\\n    address public pool;\\n\\n    /// Array of reward token addresses\\n    address[] public rewardTokens;\\n\\n    /// Reward token to valid/invalid flag mapping\\n    mapping(address => bool) public isRewardToken;\\n\\n    /// Reward token to period ending of current reward\\n    mapping(address => uint256) public periodFinish;\\n\\n    /// Reward token to current reward rate mapping\\n    mapping(address => uint256) public rewardRates;\\n\\n    /// Reward token to Duration of current reward distribution\\n    mapping(address => uint256) public rewardDuration;\\n\\n    /// Reward token to Last reward drip update time stamp mapping\\n    mapping(address => uint256) public lastUpdateTime;\\n\\n    /// Reward token to Reward per token mapping. Calculated and stored at last drip update\\n    mapping(address => uint256) public rewardPerTokenStored;\\n\\n    /// Reward token => User => Reward per token stored at last reward update\\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\\n\\n    /// RewardToken => User => Rewards earned till last reward update\\n    mapping(address => mapping(address => uint256)) public rewards;\\n}\\n\\n/// @title Distribute rewards based on vesper pool balance and supply\\ncontract PoolRewards is Initializable, IPoolRewards, ReentrancyGuard, PoolRewardsStorage {\\n    string public constant VERSION = \\\"4.0.0\\\";\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Called by proxy to initialize this contract\\n     * @param _pool Vesper pool address\\n     * @param _rewardTokens Array of reward token addresses\\n     */\\n    function initialize(address _pool, address[] memory _rewardTokens) public initializer {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_rewardTokens.length != 0, \\\"invalid-reward-tokens\\\");\\n        pool = _pool;\\n        rewardTokens = _rewardTokens;\\n        for (uint256 i = 0; i < _rewardTokens.length; i++) {\\n            isRewardToken[_rewardTokens[i]] = true;\\n        }\\n    }\\n\\n    modifier onlyAuthorized() {\\n        require(msg.sender == IVesperPool(pool).governor(), \\\"not-authorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Notify that reward is added. Only authorized caller can call\\n     * @dev Also updates reward rate and reward earning period.\\n     * @param _rewardTokens Tokens being rewarded\\n     * @param _rewardAmounts Rewards amount for token on same index in rewardTokens array\\n     * @param _rewardDurations Duration for which reward will be distributed\\n     */\\n    function notifyRewardAmount(\\n        address[] memory _rewardTokens,\\n        uint256[] memory _rewardAmounts,\\n        uint256[] memory _rewardDurations\\n    ) external virtual override onlyAuthorized {\\n        _notifyRewardAmount(_rewardTokens, _rewardAmounts, _rewardDurations, IERC20(pool).totalSupply());\\n    }\\n\\n    function notifyRewardAmount(\\n        address _rewardToken,\\n        uint256 _rewardAmount,\\n        uint256 _rewardDuration\\n    ) external virtual override onlyAuthorized {\\n        _notifyRewardAmount(_rewardToken, _rewardAmount, _rewardDuration, IERC20(pool).totalSupply());\\n    }\\n\\n    /// @notice Add new reward token in existing rewardsToken array\\n    function addRewardToken(address _newRewardToken) external onlyAuthorized {\\n        require(_newRewardToken != address(0), \\\"reward-token-address-zero\\\");\\n        require(!isRewardToken[_newRewardToken], \\\"reward-token-already-exist\\\");\\n        emit RewardTokenAdded(_newRewardToken, rewardTokens);\\n        rewardTokens.push(_newRewardToken);\\n        isRewardToken[_newRewardToken] = true;\\n    }\\n\\n    /**\\n     * @notice Claim earned rewards.\\n     * @dev This function will claim rewards for all tokens being rewarded\\n     */\\n    function claimReward(address _account) external virtual override nonReentrant {\\n        uint256 _totalSupply = IERC20(pool).totalSupply();\\n        uint256 _balance = IERC20(pool).balanceOf(_account);\\n        uint256 _len = rewardTokens.length;\\n        for (uint256 i = 0; i < _len; i++) {\\n            address _rewardToken = rewardTokens[i];\\n            _updateReward(_rewardToken, _account, _totalSupply, _balance);\\n\\n            // Claim rewards\\n            uint256 _reward = rewards[_rewardToken][_account];\\n            if (_reward != 0 && _reward <= IERC20(_rewardToken).balanceOf(address(this))) {\\n                _claimReward(_rewardToken, _account, _reward);\\n                emit RewardPaid(_account, _rewardToken, _reward);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Updated reward for given account.\\n     */\\n    function updateReward(address _account) external override {\\n        uint256 _totalSupply = IERC20(pool).totalSupply();\\n        uint256 _balance = IERC20(pool).balanceOf(_account);\\n        uint256 _len = rewardTokens.length;\\n        for (uint256 i = 0; i < _len; i++) {\\n            _updateReward(rewardTokens[i], _account, _totalSupply, _balance);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns claimable reward amount.\\n     * @return _rewardTokens Array of tokens being rewarded\\n     * @return _claimableAmounts Array of claimable for token on same index in rewardTokens\\n     */\\n    function claimable(address _account)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts)\\n    {\\n        uint256 _totalSupply = IERC20(pool).totalSupply();\\n        uint256 _balance = IERC20(pool).balanceOf(_account);\\n        uint256 _len = rewardTokens.length;\\n        _claimableAmounts = new uint256[](_len);\\n        for (uint256 i = 0; i < _len; i++) {\\n            _claimableAmounts[i] = _claimable(rewardTokens[i], _account, _totalSupply, _balance);\\n        }\\n        _rewardTokens = rewardTokens;\\n    }\\n\\n    /// @notice Provides easy access to all rewardTokens\\n    function getRewardTokens() external view returns (address[] memory) {\\n        return rewardTokens;\\n    }\\n\\n    /// @notice Returns timestamp of last reward update\\n    function lastTimeRewardApplicable(address _rewardToken) public view override returns (uint256) {\\n        return block.timestamp < periodFinish[_rewardToken] ? block.timestamp : periodFinish[_rewardToken];\\n    }\\n\\n    function rewardForDuration()\\n        external\\n        view\\n        override\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration)\\n    {\\n        uint256 _len = rewardTokens.length;\\n        _rewardForDuration = new uint256[](_len);\\n        for (uint256 i = 0; i < _len; i++) {\\n            _rewardForDuration[i] = rewardRates[rewardTokens[i]] * rewardDuration[rewardTokens[i]];\\n        }\\n        _rewardTokens = rewardTokens;\\n    }\\n\\n    /**\\n     * @notice Rewards rate per pool token\\n     * @return _rewardTokens Array of tokens being rewarded\\n     * @return _rewardPerTokenRate Array of Rewards rate for token on same index in rewardTokens\\n     */\\n    function rewardPerToken()\\n        external\\n        view\\n        override\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate)\\n    {\\n        uint256 _totalSupply = IERC20(pool).totalSupply();\\n        uint256 _len = rewardTokens.length;\\n        _rewardPerTokenRate = new uint256[](_len);\\n        for (uint256 i = 0; i < _len; i++) {\\n            _rewardPerTokenRate[i] = _rewardPerToken(rewardTokens[i], _totalSupply);\\n        }\\n        _rewardTokens = rewardTokens;\\n    }\\n\\n    function _claimable(\\n        address _rewardToken,\\n        address _account,\\n        uint256 _totalSupply,\\n        uint256 _balance\\n    ) internal view returns (uint256) {\\n        uint256 _rewardPerTokenAvailable =\\n            _rewardPerToken(_rewardToken, _totalSupply) - userRewardPerTokenPaid[_rewardToken][_account];\\n        uint256 _rewardsEarnedSinceLastUpdate = (_balance * _rewardPerTokenAvailable) / 1e18;\\n        return rewards[_rewardToken][_account] + _rewardsEarnedSinceLastUpdate;\\n    }\\n\\n    function _claimReward(\\n        address _rewardToken,\\n        address _account,\\n        uint256 _reward\\n    ) internal virtual {\\n        // Mark reward as claimed\\n        rewards[_rewardToken][_account] = 0;\\n        // Transfer reward\\n        IERC20(_rewardToken).safeTransfer(_account, _reward);\\n    }\\n\\n    // There are scenarios when extending contract will override external methods and\\n    // end up calling internal function. Hence providing internal functions\\n    function _notifyRewardAmount(\\n        address[] memory _rewardTokens,\\n        uint256[] memory _rewardAmounts,\\n        uint256[] memory _rewardDurations,\\n        uint256 _totalSupply\\n    ) internal {\\n        uint256 _len = _rewardTokens.length;\\n        uint256 _amountsLen = _rewardAmounts.length;\\n        uint256 _durationsLen = _rewardDurations.length;\\n        require(_len != 0, \\\"invalid-reward-tokens\\\");\\n        require(_amountsLen != 0, \\\"invalid-reward-amounts\\\");\\n        require(_durationsLen != 0, \\\"invalid-reward-durations\\\");\\n        require(_len == _amountsLen && _len == _durationsLen, \\\"array-length-mismatch\\\");\\n        for (uint256 i = 0; i < _len; i++) {\\n            _notifyRewardAmount(_rewardTokens[i], _rewardAmounts[i], _rewardDurations[i], _totalSupply);\\n        }\\n    }\\n\\n    function _notifyRewardAmount(\\n        address _rewardToken,\\n        uint256 _rewardAmount,\\n        uint256 _rewardDuration,\\n        uint256 _totalSupply\\n    ) internal {\\n        require(_rewardToken != address(0), \\\"incorrect-reward-token\\\");\\n        require(_rewardAmount != 0, \\\"incorrect-reward-amount\\\");\\n        require(_rewardDuration != 0, \\\"incorrect-reward-duration\\\");\\n        require(isRewardToken[_rewardToken], \\\"invalid-reward-token\\\");\\n\\n        // Update rewards earned so far\\n        rewardPerTokenStored[_rewardToken] = _rewardPerToken(_rewardToken, _totalSupply);\\n        if (block.timestamp >= periodFinish[_rewardToken]) {\\n            rewardRates[_rewardToken] = _rewardAmount / _rewardDuration;\\n        } else {\\n            uint256 remainingPeriod = periodFinish[_rewardToken] - block.timestamp;\\n\\n            uint256 leftover = remainingPeriod * rewardRates[_rewardToken];\\n            rewardRates[_rewardToken] = (_rewardAmount + leftover) / _rewardDuration;\\n        }\\n        // Safety check\\n        uint256 balance = IERC20(_rewardToken).balanceOf(address(this));\\n        require(rewardRates[_rewardToken] <= (balance / _rewardDuration), \\\"rewards-too-high\\\");\\n        // Start new drip time\\n        rewardDuration[_rewardToken] = _rewardDuration;\\n        lastUpdateTime[_rewardToken] = block.timestamp;\\n        periodFinish[_rewardToken] = block.timestamp + _rewardDuration;\\n        emit RewardAdded(_rewardToken, _rewardAmount, _rewardDuration);\\n    }\\n\\n    function _rewardPerToken(address _rewardToken, uint256 _totalSupply) internal view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored[_rewardToken];\\n        }\\n\\n        uint256 _timeSinceLastUpdate = lastTimeRewardApplicable(_rewardToken) - lastUpdateTime[_rewardToken];\\n        uint256 _rewardsSinceLastUpdate = _timeSinceLastUpdate * rewardRates[_rewardToken];\\n        uint256 _rewardsPerTokenSinceLastUpdate = (_rewardsSinceLastUpdate * 1e18) / _totalSupply;\\n        return rewardPerTokenStored[_rewardToken] + _rewardsPerTokenSinceLastUpdate;\\n    }\\n\\n    function _updateReward(\\n        address _rewardToken,\\n        address _account,\\n        uint256 _totalSupply,\\n        uint256 _balance\\n    ) internal {\\n        uint256 _rewardPerTokenStored = _rewardPerToken(_rewardToken, _totalSupply);\\n        rewardPerTokenStored[_rewardToken] = _rewardPerTokenStored;\\n        lastUpdateTime[_rewardToken] = lastTimeRewardApplicable(_rewardToken);\\n        if (_account != address(0)) {\\n            rewards[_rewardToken][_account] = _claimable(_rewardToken, _account, _totalSupply, _balance);\\n            userRewardPerTokenPaid[_rewardToken][_account] = _rewardPerTokenStored;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x655e2203ea405573136da164ffb49de67798cbb5adfc1b7c2a939014aa6bf7cb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001805561255e806100246000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80639ce43f90116100b8578063cd3daf9d1161007c578063cd3daf9d14610301578063d279c19114610309578063da09d19d1461031c578063e70b9e271461033c578063e9c5448814610367578063ffa1ad741461038757610142565b80639ce43f9014610273578063a3cd8ac414610293578063b5fd73f8146102a6578063bcd68eb6146102d9578063c4f59f9b146102ec57610142565b8063632447c91161010a578063632447c9146101f4578063638634ee146102075780636946a2351461021a5780637035ab98146102225780637bb7bed11461024d578063946d92041461026057610142565b806316f0115b146101475780631c03e6cc146101705780632ce9aead146101855780633d3b2603146101b3578063402914f5146101d3575b600080fd5b60025461015a906001600160a01b031681565b604051610167919061228e565b60405180910390f35b61018361017e36600461206b565b6103b8565b005b6101a561019336600461206b565b60086020526000908152604090205481565b604051908152602001610167565b6101a56101c136600461206b565b60066020526000908152604090205481565b6101e66101e136600461206b565b6105db565b6040516101679291906122b5565b61018361020236600461206b565b610833565b6101a561021536600461206b565b6109a1565b6101e66109e6565b6101a56102303660046120a3565b600a60209081526000928352604080842090915290825290205481565b61015a61025b3660046121ff565b610ba3565b61018361026e3660046120db565b610bcd565b6101a561028136600461206b565b60096020526000908152604090205481565b6101836102a1366004612128565b610d93565b6102c96102b436600461206b565b60046020526000908152604090205460ff1681565b6040519015158152602001610167565b6101836102e736600461215c565b610eda565b6102f4611021565b60405161016791906122a2565b6101e6611083565b61018361031736600461206b565b611251565b6101a561032a36600461206b565b60056020526000908152604090205481565b6101a561034a3660046120a3565b600b60209081526000928352604080842090915290825290205481565b6101a561037536600461206b565b60076020526000908152604090205481565b6103ab604051806040016040528060058152602001640342e302e360dc1b81525081565b604051610167919061234e565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561040657600080fd5b505afa15801561041a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043e9190612087565b6001600160a01b0316336001600160a01b0316146104775760405162461bcd60e51b815260040161046e906123b0565b60405180910390fd5b6001600160a01b0381166104c95760405162461bcd60e51b81526020600482015260196024820152787265776172642d746f6b656e2d616464726573732d7a65726f60381b604482015260640161046e565b6001600160a01b03811660009081526004602052604090205460ff16156105325760405162461bcd60e51b815260206004820152601a60248201527f7265776172642d746f6b656e2d616c72656164792d6578697374000000000000604482015260640161046e565b806001600160a01b03167f438dc3ee1ea07ec168befb145c10eb363aad7cbec063f8a006b032031582ac2b600360405161056c91906122fe565b60405180910390a26003805460018181019092557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b039093166001600160a01b031990931683179055600091825260046020526040909120805460ff19169091179055565b6060806000600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561062e57600080fd5b505afa158015610642573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106669190612217565b6002546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061069c90889060040161228e565b60206040518083038186803b1580156106b457600080fd5b505afa1580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec9190612217565b600354909150806001600160401b0381111561071857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610741578160200160208202803683370190505b50935060005b818110156107cd576107906003828154811061077357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316888686611531565b8582815181106107b057634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806107c5816124c9565b915050610747565b50600380548060200260200160405190810160405280929190818152602001828054801561082457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610806575b50505050509450505050915091565b600254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561087857600080fd5b505afa15801561088c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b09190612217565b6002546040516370a0823160e01b81529192506000916001600160a01b03909116906370a08231906108e690869060040161228e565b60206040518083038186803b1580156108fe57600080fd5b505afa158015610912573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109369190612217565b60035490915060005b8181101561099a576109886003828154811061096b57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03168686866115cf565b80610992816124c9565b91505061093f565b5050505050565b6001600160a01b03811660009081526005602052604081205442106109de576001600160a01b0382166000908152600560205260409020546109e0565b425b92915050565b6003546060908190806001600160401b03811115610a1457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610a3d578160200160208202803683370190505b50915060005b81811015610b40576007600060038381548110610a7057634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001908152602001600020546006600060038481548110610ad457634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168352820192909252604001902054610b039190612463565b838281518110610b2357634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610b38816124c9565b915050610a43565b506003805480602002602001604051908101604052809291908181526020018280548015610b9757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b79575b50505050509250509091565b60038181548110610bb357600080fd5b6000918252602090912001546001600160a01b0316905081565b600054610100900460ff1680610be6575060005460ff16155b610c495760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161046e565b600054610100900460ff16158015610c6b576000805461ffff19166101011790555b6001600160a01b038316610cb85760405162461bcd60e51b8152602060048201526014602482015273706f6f6c2d616464726573732d69732d7a65726f60601b604482015260640161046e565b8151610cd65760405162461bcd60e51b815260040161046e90612381565b600280546001600160a01b0319166001600160a01b0385161790558151610d04906003906020850190611f1c565b5060005b8251811015610d7b57600160046000858481518110610d3757634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610d73816124c9565b915050610d08565b508015610d8e576000805461ff00191690555b505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610de157600080fd5b505afa158015610df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e199190612087565b6001600160a01b0316336001600160a01b031614610e495760405162461bcd60e51b815260040161046e906123b0565b610d8e838383600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e9d57600080fd5b505afa158015610eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed59190612217565b611678565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2857600080fd5b505afa158015610f3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f609190612087565b6001600160a01b0316336001600160a01b031614610f905760405162461bcd60e51b815260040161046e906123b0565b610d8e838383600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fe457600080fd5b505afa158015610ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101c9190612217565b611a0a565b6060600380548060200260200160405190810160405280929190818152602001828054801561107957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161105b575b5050505050905090565b6060806000600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110d657600080fd5b505afa1580156110ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110e9190612217565b600354909150806001600160401b0381111561113a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611163578160200160208202803683370190505b50925060005b818110156111ed576111b06003828154811061119557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031684611bb5565b8482815181106111d057634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806111e5816124c9565b915050611169565b50600380548060200260200160405190810160405280929190818152602001828054801561124457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611226575b5050505050935050509091565b600260015414156112a45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161046e565b6002600181905554604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156112ee57600080fd5b505afa158015611302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113269190612217565b6002546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061135c90869060040161228e565b60206040518083038186803b15801561137457600080fd5b505afa158015611388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ac9190612217565b60035490915060005b81811015611526576000600382815481106113e057634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169050611403818787876115cf565b6001600160a01b038082166000908152600b60209081526040808320938a168352929052205480158015906114b357506040516370a0823160e01b81526001600160a01b038316906370a082319061145f90309060040161228e565b60206040518083038186803b15801561147757600080fd5b505afa15801561148b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114af9190612217565b8111155b15611511576114c3828883611c80565b816001600160a01b0316876001600160a01b03167f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e8360405161150891815260200190565b60405180910390a35b5050808061151e906124c9565b9150506113b5565b505060018055505050565b6001600160a01b038085166000908152600a6020908152604080832093871683529290529081205481906115658786611bb5565b61156f9190612482565b90506000670de0b6b3a76400006115868386612463565b6115909190612443565b6001600160a01b038089166000908152600b60209081526040808320938b16835292905220549091506115c490829061242b565b979650505050505050565b60006115db8584611bb5565b6001600160a01b03861660009081526009602052604090208190559050611601856109a1565b6001600160a01b0380871660009081526008602052604090209190915584161561099a5761163185858585611531565b6001600160a01b038087166000818152600b60209081526040808320948a1680845294825280832095909555918152600a8252838120928152919052208190555050505050565b6001600160a01b0384166116c75760405162461bcd60e51b815260206004820152601660248201527534b731b7b93932b1ba16b932bbb0b93216ba37b5b2b760511b604482015260640161046e565b8261170e5760405162461bcd60e51b81526020600482015260176024820152761a5b98dbdc9c9958dd0b5c995dd85c990b585b5bdd5b9d604a1b604482015260640161046e565b816117575760405162461bcd60e51b815260206004820152601960248201527834b731b7b93932b1ba16b932bbb0b93216b23ab930ba34b7b760391b604482015260640161046e565b6001600160a01b03841660009081526004602052604090205460ff166117b65760405162461bcd60e51b815260206004820152601460248201527334b73b30b634b216b932bbb0b93216ba37b5b2b760611b604482015260640161046e565b6117c08482611bb5565b6001600160a01b0385166000908152600960209081526040808320939093556005905220544210611813576117f58284612443565b6001600160a01b038516600090815260066020526040902055611891565b6001600160a01b038416600090815260056020526040812054611837904290612482565b6001600160a01b0386166000908152600660205260408120549192509061185e9083612463565b90508361186b828761242b565b6118759190612443565b6001600160a01b03871660009081526006602052604090205550505b6040516370a0823160e01b81526000906001600160a01b038616906370a08231906118c090309060040161228e565b60206040518083038186803b1580156118d857600080fd5b505afa1580156118ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119109190612217565b905061191c8382612443565b6001600160a01b03861660009081526006602052604090205411156119765760405162461bcd60e51b815260206004820152601060248201526f0e4caeec2e4c8e65ae8dede5ad0d2ced60831b604482015260640161046e565b6001600160a01b03851660009081526007602090815260408083208690556008909152902042908190556119ab90849061242b565b6001600160a01b03861660008181526005602090815260409182902093909355805187815292830186905290917f6a6f77044107a33658235d41bedbbaf2fe9ccdceb313143c947a5e76e1ec8474910160405180910390a25050505050565b83518351835182611a2d5760405162461bcd60e51b815260040161046e90612381565b81611a735760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d7265776172642d616d6f756e747360501b604482015260640161046e565b80611abb5760405162461bcd60e51b8152602060048201526018602482015277696e76616c69642d7265776172642d6475726174696f6e7360401b604482015260640161046e565b8183148015611ac957508083145b611b0d5760405162461bcd60e51b81526020600482015260156024820152740c2e4e4c2f25ad8cadccee8d05adad2e6dac2e8c6d605b1b604482015260640161046e565b60005b83811015611bab57611b99888281518110611b3b57634e487b7160e01b600052603260045260246000fd5b6020026020010151888381518110611b6357634e487b7160e01b600052603260045260246000fd5b6020026020010151888481518110611b8b57634e487b7160e01b600052603260045260246000fd5b602002602001015188611678565b80611ba3816124c9565b915050611b10565b5050505050505050565b600081611bdb57506001600160a01b0382166000908152600960205260409020546109e0565b6001600160a01b038316600090815260086020526040812054611bfd856109a1565b611c079190612482565b6001600160a01b03851660009081526006602052604081205491925090611c2e9083612463565b9050600084611c4583670de0b6b3a7640000612463565b611c4f9190612443565b6001600160a01b038716600090815260096020526040902054909150611c7690829061242b565b9695505050505050565b6001600160a01b038381166000818152600b60209081526040808320948716808452948252808320839055805160248101959095526044808601879052815180870390910181526064909501815284820180516001600160e01b031663a9059cbb60e01b17905280518082019091528181527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656491810191909152610d8e9386928692869286929091611d359084908490611db2565b805190915015610d8e5780806020019051810190611d5391906121df565b610d8e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161046e565b6060611dc18484600085611dcb565b90505b9392505050565b606082471015611e2c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161046e565b843b611e7a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161046e565b600080866001600160a01b03168587604051611e969190612272565b60006040518083038185875af1925050503d8060008114611ed3576040519150601f19603f3d011682016040523d82523d6000602084013e611ed8565b606091505b50915091506115c482828660608315611ef2575081611dc4565b825115611f025782518084602001fd5b8160405162461bcd60e51b815260040161046e919061234e565b828054828255906000526020600020908101928215611f71579160200282015b82811115611f7157825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611f3c565b50611f7d929150611f81565b5090565b5b80821115611f7d5760008155600101611f82565b600082601f830112611fa6578081fd5b81356020611fbb611fb683612408565b6123d8565b80838252828201915082860187848660051b8901011115611fda578586fd5b855b85811015612001578135611fef81612510565b84529284019290840190600101611fdc565b5090979650505050505050565b600082601f83011261201e578081fd5b8135602061202e611fb683612408565b80838252828201915082860187848660051b890101111561204d578586fd5b855b858110156120015781358452928401929084019060010161204f565b60006020828403121561207c578081fd5b8135611dc481612510565b600060208284031215612098578081fd5b8151611dc481612510565b600080604083850312156120b5578081fd5b82356120c081612510565b915060208301356120d081612510565b809150509250929050565b600080604083850312156120ed578182fd5b82356120f881612510565b915060208301356001600160401b03811115612112578182fd5b61211e85828601611f96565b9150509250929050565b60008060006060848603121561213c578081fd5b833561214781612510565b95602085013595506040909401359392505050565b600080600060608486031215612170578283fd5b83356001600160401b0380821115612186578485fd5b61219287838801611f96565b945060208601359150808211156121a7578384fd5b6121b38783880161200e565b935060408601359150808211156121c8578283fd5b506121d58682870161200e565b9150509250925092565b6000602082840312156121f0578081fd5b81518015158114611dc4578182fd5b600060208284031215612210578081fd5b5035919050565b600060208284031215612228578081fd5b5051919050565b6000815180845260208085019450808401835b838110156122675781516001600160a01b031687529582019590820190600101612242565b509495945050505050565b60008251612284818460208701612499565b9190910192915050565b6001600160a01b0391909116815260200190565b600060208252611dc4602083018461222f565b6000604082526122c8604083018561222f565b828103602084810191909152845180835285820192820190845b81811015612001578451835293830193918301916001016122e2565b6020808252825482820181905260008481528281209092916040850190845b818110156123425783546001600160a01b03168352600193840193928501920161231d565b50909695505050505050565b600060208252825180602084015261236d816040850160208701612499565b601f01601f19169190910160400192915050565b602080825260159082015274696e76616c69642d7265776172642d746f6b656e7360581b604082015260600190565b6020808252600e908201526d1b9bdd0b585d5d1a1bdc9a5e995960921b604082015260600190565b604051601f8201601f191681016001600160401b0381118282101715612400576124006124fa565b604052919050565b60006001600160401b03821115612421576124216124fa565b5060051b60200190565b6000821982111561243e5761243e6124e4565b500190565b60008261245e57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561247d5761247d6124e4565b500290565b600082821015612494576124946124e4565b500390565b60005b838110156124b457818101518382015260200161249c565b838111156124c3576000848401525b50505050565b60006000198214156124dd576124dd6124e4565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461252557600080fd5b5056fea2646970667358221220ffcd4e2a81ad4bc67ed4da22f7f3aba1f9cea68e1b4a8d2346392916f4049d9a64736f6c63430008030033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimReward(address)": {
        "details": "This function will claim rewards for all tokens being rewarded"
      },
      "claimable(address)": {
        "returns": {
          "_claimableAmounts": "Array of claimable for token on same index in rewardTokens",
          "_rewardTokens": "Array of tokens being rewarded"
        }
      },
      "initialize(address,address[])": {
        "details": "Called by proxy to initialize this contract",
        "params": {
          "_pool": "Vesper pool address",
          "_rewardTokens": "Array of reward token addresses"
        }
      },
      "notifyRewardAmount(address[],uint256[],uint256[])": {
        "details": "Also updates reward rate and reward earning period.",
        "params": {
          "_rewardAmounts": "Rewards amount for token on same index in rewardTokens array",
          "_rewardDurations": "Duration for which reward will be distributed",
          "_rewardTokens": "Tokens being rewarded"
        }
      },
      "rewardPerToken()": {
        "returns": {
          "_rewardPerTokenRate": "Array of Rewards rate for token on same index in rewardTokens",
          "_rewardTokens": "Array of tokens being rewarded"
        }
      }
    },
    "title": "Distribute rewards based on vesper pool balance and supply",
    "version": 1
  },
  "userdoc": {
    "events": {
      "RewardAdded(address,uint256,uint256)": {
        "notice": "Emitted after reward added"
      },
      "RewardPaid(address,address,uint256)": {
        "notice": "Emitted whenever any user claim rewards"
      },
      "RewardTokenAdded(address,address[])": {
        "notice": "Emitted after adding new rewards token into rewardTokens array"
      }
    },
    "kind": "user",
    "methods": {
      "addRewardToken(address)": {
        "notice": "Add new reward token in existing rewardsToken array"
      },
      "claimReward(address)": {
        "notice": "Claim earned rewards."
      },
      "claimable(address)": {
        "notice": "Returns claimable reward amount."
      },
      "getRewardTokens()": {
        "notice": "Provides easy access to all rewardTokens"
      },
      "isRewardToken(address)": {
        "notice": "Reward token to valid/invalid flag mapping"
      },
      "lastTimeRewardApplicable(address)": {
        "notice": "Returns timestamp of last reward update"
      },
      "lastUpdateTime(address)": {
        "notice": "Reward token to Last reward drip update time stamp mapping"
      },
      "notifyRewardAmount(address[],uint256[],uint256[])": {
        "notice": "Notify that reward is added. Only authorized caller can call"
      },
      "periodFinish(address)": {
        "notice": "Reward token to period ending of current reward"
      },
      "pool()": {
        "notice": "Vesper pool address"
      },
      "rewardDuration(address)": {
        "notice": "Reward token to Duration of current reward distribution"
      },
      "rewardPerToken()": {
        "notice": "Rewards rate per pool token"
      },
      "rewardPerTokenStored(address)": {
        "notice": "Reward token to Reward per token mapping. Calculated and stored at last drip update"
      },
      "rewardRates(address)": {
        "notice": "Reward token to current reward rate mapping"
      },
      "rewardTokens(uint256)": {
        "notice": "Array of reward token addresses"
      },
      "rewards(address,address)": {
        "notice": "RewardToken => User => Rewards earned till last reward update"
      },
      "updateReward(address)": {
        "notice": "Updated reward for given account."
      },
      "userRewardPerTokenPaid(address,address)": {
        "notice": "Reward token => User => Reward per token stored at last reward update"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 887,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 890,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 938,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10115,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "pool",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10119,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 10124,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "isRewardToken",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10129,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "periodFinish",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10134,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "rewardRates",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10139,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "rewardDuration",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10144,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10149,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10156,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 10163,
        "contract": "contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "rewards",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}