{
  "address": "0xAf147FD4C72807AFdd3CCFDcf3CF6a2587E88127",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralIdx",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "DepositFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCrvSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCrvSlippage",
          "type": "uint256"
        }
      ],
      "name": "UpdatedCrvSlippage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRouterIdx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "UpdatedOracleConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousSwapManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSwapManager",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSwapSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "UpdatedSwapSlippage",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CRV",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRV_MINTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amtNeeded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "calcWithdrawLpAs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lpToWithdraw",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakeAmt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimableRewardsInCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardAsCollateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "coinDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "coins",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "convertFrom18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvLp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvPool",
      "outputs": [
        {
          "internalType": "contract IStableSwapUnderlying",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimalConversionFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositError",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        }
      ],
      "name": "getLpValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "getLpValueAs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oraclePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleRouterIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setCheckpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        }
      ],
      "name": "setRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setupOracles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapManager",
      "outputs": [
        {
          "internalType": "contract ISwapManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValueCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newCrvSlippage",
          "type": "uint256"
        }
      ],
      "name": "updateCrvSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "updateOracleConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "name": "updateSwapManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "updateSwapSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdRateTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfbf127f00e349e3923a669822ca23c79ea08f8c8725f629db8abc53719b83cc0",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0xAf147FD4C72807AFdd3CCFDcf3CF6a2587E88127",
    "transactionIndex": 17,
    "gasUsed": "5148666",
    "logsBloom": "0x
    "blockHash": "0x22f06a7b9ee28a6704d7f47d3cf189977ad68789d2dc08b583e78f24210d59d4",
    "transactionHash": "0xfbf127f00e349e3923a669822ca23c79ea08f8c8725f629db8abc53719b83cc0",
    "logs": [],
    "blockNumber": 13366158,
    "cumulativeGasUsed": "7700558",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5323F445A8665239222b117aE095423a238F5706",
    "0xEbedFD259c9FB1F5c0ab9A9f24E79F8d80E29B23",
    0,
    "CrvA3PoolStrategyDAI"
  ],
  "solcInputHash": "35595fa56767f29adba4fce9eac5fb19",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralIdx\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"DepositFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCrvSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCrvSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdatedCrvSlippage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRouterIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"UpdatedOracleConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"UpdatedSwapManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdatedSwapSlippage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CRV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV_MINTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amtNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"calcWithdrawLpAs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpToWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableRewardsInCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAsCollateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coinDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertFrom18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvLp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvPool\",\"outputs\":[{\"internalType\":\"contract IStableSwapUnderlying\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalConversionFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositError\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"getLpValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getLpValueAs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRouterIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setCheckpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"}],\"name\":\"setRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCrvSlippage\",\"type\":\"uint256\"}],\"name\":\"updateCrvSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"updateOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"updateSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdRateTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken()\":{\"details\":\"Approve all required tokens\"},\"claimableRewardsInCollateral()\":{\"details\":\"Claimable rewards estimated into pool's collateral value\"},\"convertFrom18(uint256)\":{\"details\":\"Convert from 18 decimals to token defined decimals.\"},\"isReservedToken(address)\":{\"details\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"details\":\"Rebalance profit, loss and investment of this strategy\"},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"setRewardTokens(address[])\":{\"details\":\"Rewards token in gauge can be updated any time. Governor can set reward tokens Different version of gauge has different method to read reward tokens better governor set it\"},\"sweepERC20(address)\":{\"details\":\"sweep given token to feeCollector of strategy\",\"params\":{\"_fromToken\":\"token address to sweep\"}},\"totalValue()\":{\"details\":\"Report total value in collateral token\"},\"totalValueCurrent()\":{\"details\":\"Report total value in collateral token\"},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapManager(address)\":{\"params\":{\"_swapManager\":\"swap manager address\"}},\"withdraw(uint256)\":{\"details\":\"Withdraw collateral token from lending pool.\",\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"title\":\"This strategy will deposit collateral token in Curve Aave 3Pool and earn interest.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"token()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"totalValue()\":{\"notice\":\"Calculate total value of asset under management\"},\"totalValueCurrent()\":{\"notice\":\"Calculate total value of asset under management (in real-time)\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapManager(address)\":{\"notice\":\"Update swap manager address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol\":\"CrvA3PoolAvaxStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xc37d85b96c2a8d7bc09f25958e0a81394bf5780286444147ddf875fa628d53ce\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/interfaces/aave/IAave.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface AaveLendingPoolAddressesProvider {\\n    function getLendingPool() external view returns (address);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n}\\n\\ninterface AToken is IERC20 {\\n    /**\\n     * @dev Returns the address of the incentives controller contract\\n     **/\\n    function getIncentivesController() external view returns (address);\\n\\n    function mint(\\n        address user,\\n        uint256 amount,\\n        uint256 index\\n    ) external returns (bool);\\n\\n    function burn(\\n        address user,\\n        address receiverOfUnderlying,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n}\\n\\ninterface AaveIncentivesController {\\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n}\\n\\ninterface AaveLendingPool {\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) external;\\n}\\n\\ninterface AaveProtocolDataProvider {\\n    function getReserveTokensAddresses(address asset)\\n        external\\n        view\\n        returns (\\n            address aTokenAddress,\\n            address stableDebtTokenAddress,\\n            address variableDebtTokenAddress\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n\\n    function getReserveConfigurationData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n}\\n\\n//solhint-disable func-name-mixedcase\\ninterface StakedAave is IERC20 {\\n    function claimRewards(address to, uint256 amount) external;\\n\\n    function cooldown() external;\\n\\n    function stake(address onBehalfOf, uint256 amount) external;\\n\\n    function redeem(address to, uint256 amount) external;\\n\\n    function getTotalRewardsBalance(address staker) external view returns (uint256);\\n\\n    function stakersCooldowns(address staker) external view returns (uint256);\\n\\n    function COOLDOWN_SECONDS() external view returns (uint256);\\n\\n    function UNSTAKE_WINDOW() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x12d0c369dde23148086c8b5fcffcd69df2959d08d1d331fdab59f8e5240347fc\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/* solhint-disable func-name-mixedcase */\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\ninterface ISwapManager {\\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\\n\\n    function N_DEX() external view returns (uint256);\\n\\n    function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\\n\\n    function bestOutputFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountOut,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function bestInputFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountIn,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function safeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function safeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function comparePathsFixedInput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function comparePathsFixedOutput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function oracleCount() external view returns (uint256);\\n\\n    function oracleAt(uint256 idx) external view returns (address);\\n\\n    function getOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function createOrUpdateOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external returns (address oracleAddr);\\n\\n    function consultForFree(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\\n\\n    /// get the data we want and pay the gas to update\\n    function consult(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    )\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint256 lastUpdatedAt,\\n            bool updated\\n        );\\n\\n    function updateOracles() external returns (uint256 updated, uint256 expected);\\n\\n    function updateOracles(address[] memory _oracleAddrs) external returns (uint256 updated, uint256 expected);\\n}\\n\",\"keccak256\":\"0xbfaebdde57187f71c2c9f430002c310cd51638967deb4cc9d58877e1f2bf562e\",\"license\":\"MIT\"},\"contracts/interfaces/curve/IDepositZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.3;\\n\\ninterface IDepositZap4x {\\n    function calc_token_amount(\\n        address _pool,\\n        uint256[4] memory _amounts,\\n        bool is_deposit\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(\\n        address _pool,\\n        uint256[4] memory _amounts,\\n        uint256 _min_mint_amount\\n    ) external;\\n\\n    function remove_liquidity(\\n        address _pool,\\n        uint256 _amount,\\n        uint256[4] memory _min_amounts\\n    ) external;\\n\\n    function remove_liquidity_one_coin(\\n        address _pool,\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external;\\n\\n    function calc_withdraw_one_coin(\\n        address _pool,\\n        uint256 _token_amount,\\n        int128 i\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd5c0c0936a08994420353a17fca31d90a748d6628265c3447f20e9ec608cc232\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ILiquidityGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Not a complete interface, but should have what we need\\ninterface ILiquidityGaugeV2 is IERC20 {\\n    function deposit(uint256 _value) external;\\n\\n    function deposit(uint256 _value, address addr) external;\\n\\n    function withdraw(uint256 _value) external;\\n\\n    function claim_rewards(address addr) external;\\n\\n    function claimable_tokens(address addr) external returns (uint256);\\n\\n    function claimable_reward(address, address) external returns (uint256);\\n\\n    function integrate_fraction(address addr) external view returns (uint256);\\n\\n    function user_checkpoint(address addr) external returns (bool);\\n\\n    function reward_integral(address) external view returns (uint256);\\n\\n    function reward_integral_for(address, address) external view returns (uint256);\\n\\n    function lp_token() external view returns (address);\\n\\n    function reward_count() external view returns (uint256);\\n\\n    function reward_tokens(uint256 _i) external view returns (address);\\n}\\n\\ninterface ILiquidityGaugeV3 is ILiquidityGaugeV2 {\\n    function claimable_reward(address addr, address token) external view override returns (uint256);\\n}\\n\\n/* solhint-enable */\\n\",\"keccak256\":\"0xbef06cb6dada77250c856cd508dc62e1059c6dc333fa08b94e100672aae8d65e\",\"license\":\"MIT\"},\"contracts/interfaces/curve/IMetapoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/* solhint-disable func-name-mixedcase*/\\npragma solidity 0.8.3;\\n\\ninterface IMetapoolFactory {\\n    function get_underlying_coins(address _pool) external view returns (address[8] memory _coins);\\n\\n    function get_underlying_decimals(address _pool) external view returns (uint256[8] memory _decimals);\\n}\\n\",\"keccak256\":\"0x62bda23db6e8fcb65ea30d0c06cd7c8ff25a160630f8fd623ed965893d005d97\",\"license\":\"MIT\"},\"contracts/interfaces/curve/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.3;\\n\\n// Not a complete interface, but should have what we need\\ninterface IStableSwap {\\n    function coins(uint256 i) external view returns (address);\\n\\n    function fee() external view returns (uint256); // fee * 1e10\\n\\n    function lp_token() external view returns (address);\\n\\n    function A() external view returns (uint256);\\n\\n    function A_precise() external view returns (uint256);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external;\\n}\\n\\ninterface IStableSwapV2 {\\n    function coins(int128 i) external view returns (address);\\n}\\n\\ninterface IStableSwapUnderlying is IStableSwap {\\n    function underlying_coins(uint256 i) external view returns (address);\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount,\\n        bool _use_underlying\\n    ) external;\\n}\\n\\ninterface IStableSwap2x is IStableSwap {\\n    function calc_token_amount(uint256[2] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[2] memory _amounts, uint256 _max_burn_amount)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface IStableSwap3x is IStableSwap {\\n    function calc_token_amount(uint256[3] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[3] memory _amounts, uint256 _max_burn_amount)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface IStableSwap4x is IStableSwap {\\n    function calc_token_amount(uint256[4] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[4] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[4] memory _amounts, uint256 _max_burn_amount)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface IStableSwap2xUnderlying is IStableSwap2x, IStableSwapUnderlying {\\n    function add_liquidity(\\n        uint256[2] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 amount,\\n        uint256[2] calldata min_amounts,\\n        bool use_underlying\\n    ) external;\\n}\\n\\ninterface IStableSwap3xUnderlying is IStableSwap3x, IStableSwapUnderlying {\\n    function add_liquidity(\\n        uint256[3] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[3] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 amount,\\n        uint256[3] calldata min_amounts,\\n        bool use_underlying\\n    ) external;\\n}\\n\\ninterface IStableSwap4xUnderlying is IStableSwap4x, IStableSwapUnderlying {\\n    function add_liquidity(\\n        uint256[4] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[4] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 amount,\\n        uint256[4] calldata min_amounts,\\n        bool use_underlying\\n    ) external;\\n}\\n\\n/* solhint-enable */\\n\",\"keccak256\":\"0x535c76ea0e71d0a78375eb7575e877721a00625d038ae76e47186746e5cc66c2\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ITokenMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.3;\\n\\n// Not a complete interface, but should have what we need\\ninterface ITokenMinter {\\n    function minted(address arg0, address arg1) external view returns (uint256);\\n\\n    function mint(address gauge_addr) external;\\n}\\n/* solhint-enable */\\n\",\"keccak256\":\"0x847383c018c99992963c94c37b641ef7272cbc0ef38d4b17759b6f4423e43090\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface IStrategy {\\n    function rebalance() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalValueCurrent() external returns (uint256);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0xdf2335cb2ab1ae53919cb05ef89b3c0b223565c2ddb2e3d972a25e471230d417\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVesperPool is IERC20 {\\n    function deposit() external payable;\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function poolRewards() external returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function resetApproval() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function withdrawETH(uint256 _amount) external;\\n\\n    function whitelistedWithdraw(uint256 _amount) external;\\n\\n    function governor() external view returns (address);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address _address) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address _address) external view returns (bool);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee,\\n            uint256 _debtRate,\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio\\n        );\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n\\n    // Function to get pricePerShare from V2 pools\\n    function getPricePerShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x938b275f1e200fabee7dec960f95f7c82e934de107e12a2acac487d624d190c4\",\"license\":\"MIT\"},\"contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/bloq/ISwapManager.sol\\\";\\nimport \\\"../interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    // solhint-disable-next-line  var-name-mixedcase\\n    address internal WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    ISwapManager public swapManager;\\n\\n    uint256 public oraclePeriod = 3600; // 1h\\n    uint256 public oracleRouterIdx = 0; // Uniswap V2\\n    uint256 public swapSlippage = 10000; // 100% Don't use oracles by default\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\\n    event UpdatedSwapSlippage(uint256 oldSwapSlippage, uint256 newSwapSlippage);\\n    event UpdatedOracleConfig(uint256 oldPeriod, uint256 newPeriod, uint256 oldRouterIdx, uint256 newRouterIdx);\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken\\n    ) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        swapManager = ISwapManager(_swapManager);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swap manager address\\n     * @param _swapManager swap manager address\\n     */\\n    function updateSwapManager(address _swapManager) external onlyGovernor {\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        require(_swapManager != address(swapManager), \\\"sm-is-same\\\");\\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\\n        swapManager = ISwapManager(_swapManager);\\n    }\\n\\n    function updateSwapSlippage(uint256 _newSwapSlippage) external onlyGovernor {\\n        require(_newSwapSlippage <= 10000, \\\"invalid-slippage-value\\\");\\n        emit UpdatedSwapSlippage(swapSlippage, _newSwapSlippage);\\n        swapSlippage = _newSwapSlippage;\\n    }\\n\\n    function updateOracleConfig(uint256 _newPeriod, uint256 _newRouterIdx) external onlyGovernor {\\n        require(_newRouterIdx < swapManager.N_DEX(), \\\"invalid-router-index\\\");\\n        if (_newPeriod == 0) _newPeriod = oraclePeriod;\\n        require(_newPeriod > 59, \\\"invalid-oracle-period\\\");\\n        emit UpdatedOracleConfig(oraclePeriod, _newPeriod, oracleRouterIdx, _newRouterIdx);\\n        oraclePeriod = _newPeriod;\\n        oracleRouterIdx = _newRouterIdx;\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken() external onlyKeeper {\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    function setupOracles() external onlyKeeper {\\n        _setupOracles();\\n    }\\n\\n    /**\\n     * @dev Withdraw collateral token from lending pool.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        _withdraw(_amount);\\n    }\\n\\n    /**\\n     * @dev Rebalance profit, loss and investment of this strategy\\n     */\\n    function rebalance() external virtual override onlyKeeper {\\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _reinvest();\\n    }\\n\\n    /**\\n     * @dev sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /**\\n     * @notice Calculate total value of asset under management\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view virtual override returns (uint256 _value);\\n\\n    /**\\n     * @notice Calculate total value of asset under management (in real-time)\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValueCurrent() external virtual override returns (uint256) {\\n        return totalValue();\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /**\\n     * @notice some strategy may want to prepare before doing migration.\\n        Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    /**\\n     *  @notice Generate report for current profit and loss. Also liquidate asset to payback\\n     * excess debt, if any.\\n     * @return _profit Calculate any realized profit and convert it to collateral, if not already.\\n     * @return _loss Calculate any loss that strategy has made on investment. Convert into collateral token.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function _generateReport()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n        _profit = _realizeProfit(_totalDebt);\\n        _loss = _realizeLoss(_totalDebt);\\n        _payback = _liquidate(_excessDebt);\\n    }\\n\\n    function _calcAmtOutAfterSlippage(uint256 _amount, uint256 _slippage) internal pure returns (uint256) {\\n        return (_amount * (10000 - _slippage)) / (10000);\\n    }\\n\\n    function _simpleOraclePath(address _from, address _to) internal view returns (address[] memory path) {\\n        if (_from == WETH || _to == WETH) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = WETH;\\n            path[2] = _to;\\n        }\\n    }\\n\\n    function _consultOracle(\\n        address _from,\\n        address _to,\\n        uint256 _amt\\n    ) internal returns (uint256, bool) {\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            (bool _success, bytes memory _returnData) =\\n                address(swapManager).call(\\n                    abi.encodePacked(swapManager.consult.selector, abi.encode(_from, _to, _amt, oraclePeriod, i))\\n                );\\n            if (_success) {\\n                (uint256 rate, uint256 lastUpdate, ) = abi.decode(_returnData, (uint256, uint256, bool));\\n                if ((lastUpdate > (block.timestamp - oraclePeriod)) && (rate != 0)) return (rate, true);\\n                return (0, false);\\n            }\\n        }\\n        return (0, false);\\n    }\\n\\n    function _getOracleRate(address[] memory path, uint256 _amountIn) internal returns (uint256 amountOut) {\\n        require(path.length > 1, \\\"invalid-oracle-path\\\");\\n        amountOut = _amountIn;\\n        bool isValid;\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            (amountOut, isValid) = _consultOracle(path[i], path[i + 1], amountOut);\\n            require(isValid, \\\"invalid-oracle-rate\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe swap via Uniswap / Sushiswap (better rate of the two)\\n     * @dev There are many scenarios when token swap via Uniswap can fail, so this\\n     * method will wrap Uniswap call in a 'try catch' to make it fail safe.\\n     * however, this method will throw minAmountOut is not met\\n     * @param _from address of from token\\n     * @param _to address of to token\\n     * @param _amountIn Amount to be swapped\\n     * @param _minAmountOut minimum amount out\\n     */\\n    function _safeSwap(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) internal {\\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\\n            swapManager.bestOutputFixedInput(_from, _to, _amountIn);\\n        if (_minAmountOut == 0) _minAmountOut = 1;\\n        if (amountOut != 0) {\\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\\n                _amountIn,\\n                _minAmountOut,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    // These methods can be implemented by the inheriting strategy.\\n    /* solhint-disable no-empty-blocks */\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual {}\\n\\n    /**\\n     * @notice Set up any oracles that are needed for this strategy.\\n     */\\n    function _setupOracles() internal virtual {}\\n\\n    /* solhint-enable */\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdraw(uint256 _amount) internal virtual;\\n\\n    function _approveToken(uint256 _amount) internal virtual;\\n\\n    /**\\n     * @notice Withdraw collateral to payback excess debt in pool.\\n     * @param _excessDebt Excess debt of strategy in collateral token\\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\\n     */\\n    function _liquidate(uint256 _excessDebt) internal virtual returns (uint256 _payback);\\n\\n    /**\\n     * @notice Calculate earning and withdraw/convert it into collateral token.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _profit Profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal virtual returns (uint256 _profit);\\n\\n    /**\\n     * @notice Calculate loss\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _loss Realized loss in collateral token\\n     */\\n    function _realizeLoss(uint256 _totalDebt) internal virtual returns (uint256 _loss);\\n\\n    /**\\n     * @notice Reinvest collateral.\\n     * @dev Once we file report back in pool, we might have some collateral in hand\\n     * which we want to reinvest aka deposit in lender/provider.\\n     */\\n    function _reinvest() internal virtual;\\n}\\n\",\"keccak256\":\"0x5b96b930f1ddb6914b7545e1f25e80f63e98eeb76537174e4b53d9cdd8ad4a18\",\"license\":\"MIT\"},\"contracts/strategies/curve/CrvBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"../../interfaces/curve/IStableSwap.sol\\\";\\nimport \\\"../../interfaces/curve/ILiquidityGauge.sol\\\";\\nimport \\\"../../interfaces/curve/ITokenMinter.sol\\\";\\nimport \\\"../../interfaces/curve/IMetapoolFactory.sol\\\";\\nimport \\\"../../interfaces/curve/IDepositZap.sol\\\";\\n\\nabstract contract CrvBase {\\n    using SafeERC20 for IERC20;\\n\\n    address public constant CRV_MINTER = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\\n\\n    // solhint-disable-next-line  var-name-mixedcase\\n    address public CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n    IStableSwapUnderlying public immutable crvPool;\\n    address public immutable crvLp;\\n    address public immutable crvGauge;\\n\\n    constructor(\\n        address _pool,\\n        address _lp,\\n        address _gauge\\n    ) {\\n        require(_pool != address(0x0), \\\"CRVMgr: invalid curve pool\\\");\\n        require(_lp != address(0x0), \\\"CRVMgr: invalid lp token\\\");\\n        require(_gauge != address(0x0), \\\"CRVMgr: invalid gauge\\\");\\n\\n        crvPool = IStableSwapUnderlying(_pool);\\n        crvLp = _lp;\\n        crvGauge = _gauge;\\n    }\\n\\n    function _minimumLpPrice(uint256 _safeRate) internal view returns (uint256) {\\n        return ((crvPool.get_virtual_price() * _safeRate) / 1e18);\\n    }\\n\\n    function _withdrawAsFromCrvPool(\\n        uint256 _lpAmount,\\n        uint256 _minAmt,\\n        uint256 i\\n    ) internal virtual {\\n        crvPool.remove_liquidity_one_coin(_lpAmount, SafeCast.toInt128(int256(i)), _minAmt);\\n    }\\n\\n    function _withdrawAllAs(uint256 i) internal virtual {\\n        uint256 lpAmt = IERC20(crvLp).balanceOf(address(this));\\n        if (lpAmt != 0) {\\n            crvPool.remove_liquidity_one_coin(lpAmt, SafeCast.toInt128(int256(i)), 0);\\n        }\\n    }\\n\\n    function calcWithdrawLpAs(uint256 _amtNeeded, uint256 i)\\n        public\\n        view\\n        returns (uint256 lpToWithdraw, uint256 unstakeAmt)\\n    {\\n        uint256 lp = getLp();\\n        uint256 tlp = totalLp();\\n        lpToWithdraw = (_amtNeeded * tlp) / getLpValueAs(tlp, i);\\n        lpToWithdraw = (lpToWithdraw > tlp) ? tlp : lpToWithdraw;\\n        if (lpToWithdraw > lp) {\\n            unstakeAmt = lpToWithdraw - lp;\\n        }\\n    }\\n\\n    function getLpValueAs(uint256 _lpAmount, uint256 i) public view virtual returns (uint256) {\\n        return (_lpAmount != 0) ? crvPool.calc_withdraw_one_coin(_lpAmount, SafeCast.toInt128(int256(i))) : 0;\\n    }\\n\\n    // While this is inaccurate in terms of slippage, this gives us the\\n    // best estimate (least manipulatable value) to calculate share price\\n    function getLpValue(uint256 _lpAmount) public view virtual returns (uint256) {\\n        return (_lpAmount != 0) ? (crvPool.get_virtual_price() * _lpAmount) / 1e18 : 0;\\n    }\\n\\n    function setCheckpoint() external {\\n        _setCheckpoint();\\n    }\\n\\n    // requires that gauge has approval for lp token\\n    function _stakeAllLp() internal virtual {\\n        uint256 balance = IERC20(crvLp).balanceOf(address(this));\\n        if (balance != 0) {\\n            ILiquidityGaugeV2(crvGauge).deposit(balance);\\n        }\\n    }\\n\\n    function _unstakeAllLp() internal virtual {\\n        _unstakeLp(IERC20(crvGauge).balanceOf(address(this)));\\n    }\\n\\n    function _unstakeLp(uint256 _amount) internal virtual {\\n        if (_amount != 0) {\\n            ILiquidityGaugeV2(crvGauge).withdraw(_amount);\\n        }\\n    }\\n\\n    function _claimRewards() internal virtual {\\n        ITokenMinter(CRV_MINTER).mint(crvGauge);\\n    }\\n\\n    function _setCheckpoint() internal virtual {\\n        ILiquidityGaugeV2(crvGauge).user_checkpoint(address(this));\\n    }\\n\\n    function totalStaked() public view virtual returns (uint256 total) {\\n        total = IERC20(crvGauge).balanceOf(address(this));\\n    }\\n\\n    function totalLp() public view virtual returns (uint256 total) {\\n        total = getLp() + IERC20(crvGauge).balanceOf(address(this));\\n    }\\n\\n    // Gets LP value not staked in gauge\\n    function getLp() public view virtual returns (uint256 total) {\\n        total = IERC20(crvLp).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xcd71fa956116af5443a2ea5638c1e181686c0b0da01b964540185f16d2ffbc47\",\"license\":\"MIT\"},\"contracts/strategies/curve/CrvPoolStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"../Strategy.sol\\\";\\nimport \\\"./CrvBase.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in a Curve Pool and earn interest.\\nabstract contract CrvPoolStrategyBase is CrvBase, Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    string public NAME;\\n    string public constant VERSION = \\\"4.0.0\\\";\\n\\n    mapping(address => bool) internal reservedToken;\\n\\n    uint256 public immutable collIdx;\\n    uint256 public usdRate;\\n    uint256 public usdRateTimestamp;\\n\\n    address[] public coins;\\n    uint256[] public coinDecimals;\\n    address[] public rewardTokens;\\n    bool public depositError;\\n\\n    uint256 public crvSlippage = 10; // 10000 is 100%; 10 is 0.1%\\n    uint256 public decimalConversionFactor; // It will be used in converting value to/from 18 decimals\\n\\n    // No. of pooled tokens in the Pool\\n    uint256 internal immutable n;\\n    event UpdatedCrvSlippage(uint256 oldCrvSlippage, uint256 newCrvSlippage);\\n\\n    event DepositFailed(string reason);\\n\\n    constructor(\\n        address _pool,\\n        address _crvPool,\\n        address _crvLp,\\n        address _crvGauge,\\n        address _swapManager,\\n        uint256 _collateralIdx,\\n        uint256 _n,\\n        string memory _name\\n    )\\n        CrvBase(_crvPool, _crvLp, _crvGauge) // 3Pool Manager\\n        Strategy(_pool, _swapManager, _crvLp)\\n    {\\n        require(_collateralIdx < _n, \\\"invalid-collateral\\\");\\n\\n        n = _n;\\n        reservedToken[_crvLp] = true;\\n        reservedToken[CRV] = true;\\n        collIdx = _collateralIdx;\\n        _init(_crvPool, _n);\\n        require(coins[_collateralIdx] == address(IVesperPool(_pool).token()), \\\"collateral-mismatch\\\");\\n        // Assuming token supports 18 or less decimals. _init will initialize coins array\\n        uint256 _decimals = IERC20Metadata(coins[_collateralIdx]).decimals();\\n        decimalConversionFactor = 10**(18 - _decimals);\\n        NAME = _name;\\n        rewardTokens.push(CRV);\\n    }\\n\\n    /// @dev Rewards token in gauge can be updated any time. Governor can set reward tokens\\n    /// Different version of gauge has different method to read reward tokens better governor set it\\n    function setRewardTokens(address[] memory _rewardTokens) external virtual onlyGovernor {\\n        rewardTokens = _rewardTokens;\\n        for (uint256 i = 0; i < _rewardTokens.length; i++) {\\n            require(\\n                _rewardTokens[i] != receiptToken &&\\n                    _rewardTokens[i] != address(collateralToken) &&\\n                    _rewardTokens[i] != pool &&\\n                    _rewardTokens[i] != crvLp,\\n                \\\"Invalid reward token\\\"\\n            );\\n            reservedToken[_rewardTokens[i]] = true;\\n        }\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n        _setupOracles();\\n    }\\n\\n    function updateCrvSlippage(uint256 _newCrvSlippage) external onlyGovernor {\\n        require(_newCrvSlippage < 10000, \\\"invalid-slippage-value\\\");\\n        emit UpdatedCrvSlippage(crvSlippage, _newCrvSlippage);\\n        crvSlippage - _newCrvSlippage;\\n    }\\n\\n    /// @dev Claimable rewards estimated into pool's collateral value\\n    function claimableRewardsInCollateral() public view virtual returns (uint256 rewardAsCollateral) {\\n        //Total Mintable - Previously minted\\n        uint256 claimable =\\n            ILiquidityGaugeV2(crvGauge).integrate_fraction(address(this)) -\\n                ITokenMinter(CRV_MINTER).minted(address(this), crvGauge);\\n        if (claimable != 0) {\\n            (, rewardAsCollateral, ) = swapManager.bestOutputFixedInput(CRV, address(collateralToken), claimable);\\n        }\\n    }\\n\\n    /// @dev Convert from 18 decimals to token defined decimals.\\n    function convertFrom18(uint256 _amount) public view returns (uint256) {\\n        return _amount / decimalConversionFactor;\\n    }\\n\\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view override returns (bool) {\\n        return reservedToken[_token];\\n    }\\n\\n    /**\\n     * @notice Calculate total value of asset under management\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view virtual override returns (uint256 _value) {\\n        _value =\\n            collateralToken.balanceOf(address(this)) +\\n            convertFrom18(_calcAmtOutAfterSlippage(getLpValue(totalLp()), crvSlippage)) +\\n            claimableRewardsInCollateral();\\n    }\\n\\n    function _setupOracles() internal virtual override {\\n        _safeCreateOrUpdateOracle(CRV, WETH);\\n        for (uint256 i = 0; i < n; i++) {\\n            _safeCreateOrUpdateOracle(coins[i], WETH);\\n        }\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            _safeCreateOrUpdateOracle(rewardTokens[i], WETH);\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates Oracle pair preventing revert if it doesn't exist in a DEX\\n     */\\n    function _safeCreateOrUpdateOracle(address _tokenA, address _tokenB) internal {\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            // solhint-disable no-empty-blocks\\n            try swapManager.createOrUpdateOracle(_tokenA, _tokenB, oraclePeriod, i) {\\n                break;\\n            } catch Error(\\n                string memory /* reason */\\n            ) {}\\n            // solhint-enable no-empty-blocks\\n        }\\n    }\\n\\n    // given the rates of 3 stablecoins compared with a common denominator\\n    // return the lowest divided by the highest\\n    function _getSafeUsdRate() internal returns (uint256) {\\n        // use a stored rate if we've looked it up recently\\n        if (usdRateTimestamp > block.timestamp - oraclePeriod && usdRate != 0) return usdRate;\\n        // otherwise, calculate a rate and store it.\\n        uint256 lowest;\\n        uint256 highest;\\n        for (uint256 i = 0; i < n; i++) {\\n            // get the rate for $1\\n            (uint256 rate, bool isValid) = _consultOracle(coins[i], WETH, 10**coinDecimals[i]);\\n            if (isValid) {\\n                if (lowest == 0 || rate < lowest) {\\n                    lowest = rate;\\n                }\\n                if (highest < rate) {\\n                    highest = rate;\\n                }\\n            }\\n        }\\n        // We only need to check one of them because if a single valid rate is returned,\\n        // highest == lowest and highest > 0 && lowest > 0\\n        require(lowest != 0, \\\"no-oracle-rates\\\");\\n        usdRateTimestamp = block.timestamp;\\n        usdRate = (lowest * 1e18) / highest;\\n        return usdRate;\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        collateralToken.safeApprove(pool, _amount);\\n        collateralToken.safeApprove(address(crvPool), _amount);\\n        for (uint256 j = 0; j < swapManager.N_DEX(); j++) {\\n            for (uint256 i = 0; i < rewardTokens.length; i++) {\\n                IERC20(rewardTokens[i]).safeApprove(address(swapManager.ROUTERS(j)), _amount);\\n            }\\n            collateralToken.safeApprove(address(swapManager.ROUTERS(j)), _amount);\\n        }\\n        IERC20(crvLp).safeApprove(crvGauge, _amount);\\n    }\\n\\n    function _init(address _crvPool, uint256 _n) internal virtual {\\n        for (uint256 i = 0; i < _n; i++) {\\n            coins.push(IStableSwapUnderlying(_crvPool).coins(i));\\n            coinDecimals.push(IERC20Metadata(coins[i]).decimals());\\n        }\\n    }\\n\\n    function _reinvest() internal override {\\n        depositError = false;\\n        uint256 amt = collateralToken.balanceOf(address(this));\\n        depositError = !_depositToCurve(amt);\\n        _stakeAllLp();\\n    }\\n\\n    function _depositToCurve(uint256 amt) internal virtual returns (bool) {\\n        if (amt != 0) {\\n            uint256[3] memory depositAmounts;\\n            depositAmounts[collIdx] = amt;\\n            uint256 expectedOut =\\n                _calcAmtOutAfterSlippage(\\n                    IStableSwap3xUnderlying(address(crvPool)).calc_token_amount(depositAmounts, true),\\n                    crvSlippage\\n                );\\n            uint256 minLpAmount =\\n                ((amt * _getSafeUsdRate()) / crvPool.get_virtual_price()) * 10**(18 - coinDecimals[collIdx]);\\n            if (expectedOut > minLpAmount) minLpAmount = expectedOut;\\n            // solhint-disable-next-line no-empty-blocks\\n            try IStableSwap3xUnderlying(address(crvPool)).add_liquidity(depositAmounts, minLpAmount) {} catch Error(\\n                string memory reason\\n            ) {\\n                emit DepositFailed(reason);\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _withdraw(uint256 _amount) internal override {\\n        // This adds some gas but will save loss on exchange fees\\n        uint256 balanceHere = collateralToken.balanceOf(address(this));\\n        if (_amount > balanceHere) {\\n            _unstakeAndWithdrawAsCollateral(_amount - balanceHere);\\n        }\\n        collateralToken.safeTransfer(pool, _amount);\\n    }\\n\\n    function _unstakeAndWithdrawAsCollateral(uint256 _amount) internal returns (uint256 toWithdraw) {\\n        if (_amount == 0) return 0;\\n        uint256 i = collIdx;\\n        (uint256 lpToWithdraw, uint256 unstakeAmt) = calcWithdrawLpAs(_amount, i);\\n        _unstakeLp(unstakeAmt);\\n        uint256 minAmtOut =\\n            convertFrom18(\\n                (lpToWithdraw * _calcAmtOutAfterSlippage(_minimumLpPrice(_getSafeUsdRate()), crvSlippage)) / 1e18\\n            );\\n        _withdrawAsFromCrvPool(lpToWithdraw, minAmtOut, i);\\n        toWithdraw = collateralToken.balanceOf(address(this));\\n        if (toWithdraw > _amount) toWithdraw = _amount;\\n    }\\n\\n    /**\\n     * @notice some strategy may want to prepare before doing migration. \\n        Example In Maker old strategy want to give vault ownership to new strategy\\n     */\\n    function _beforeMigration(\\n        address /*_newStrategy*/\\n    ) internal override {\\n        _unstakeAllLp();\\n    }\\n\\n    /**\\n     * @notice Curve pool may have more than one reward token. Child contract should override _claimRewards\\n     */\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\\n        _claimRewards();\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            uint256 _amt = IERC20(rewardTokens[i]).balanceOf(address(this));\\n            if (_amt != 0) {\\n                uint256 _minAmtOut;\\n                if (swapSlippage < 10000) {\\n                    (uint256 _minWethOut, bool _isValid) = _consultOracle(rewardTokens[i], WETH, _amt);\\n                    (uint256 _minTokenOut, bool _isValidTwo) = _consultOracle(WETH, _toToken, _minWethOut);\\n                    require(_isValid, \\\"stale-reward-oracle\\\");\\n                    require(_isValidTwo, \\\"stale-collateral-oracle\\\");\\n                    _minAmtOut = _calcAmtOutAfterSlippage(_minTokenOut, swapSlippage);\\n                }\\n                _safeSwap(rewardTokens[i], _toToken, _amt, _minAmtOut);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral to payback excess debt in pool.\\n     * @param _excessDebt Excess debt of strategy in collateral token\\n     * @param _extra additional amount to unstake and withdraw, in collateral token\\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\\n     */\\n    function _liquidate(uint256 _excessDebt, uint256 _extra) internal returns (uint256 _payback) {\\n        _payback = _unstakeAndWithdrawAsCollateral(_excessDebt + _extra);\\n        // we dont want to return a value greater than we need to\\n        if (_payback > _excessDebt) _payback = _excessDebt;\\n    }\\n\\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {\\n        uint256 _collateralBalance = convertFrom18(_calcAmtOutAfterSlippage(getLpValue(totalLp()), crvSlippage));\\n        if (_collateralBalance < _totalDebt) {\\n            _loss = _totalDebt - _collateralBalance;\\n        }\\n    }\\n\\n    function _realizeGross(uint256 _totalDebt)\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _toUnstake\\n        )\\n    {\\n        uint256 baseline = collateralToken.balanceOf(address(this));\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n        uint256 newBalance = collateralToken.balanceOf(address(this));\\n        _profit = newBalance - baseline;\\n\\n        uint256 _collateralBalance =\\n            baseline + convertFrom18(_calcAmtOutAfterSlippage(getLpValue(totalLp()), crvSlippage));\\n        if (_collateralBalance > _totalDebt) {\\n            _profit += _collateralBalance - _totalDebt;\\n        } else {\\n            _loss = _totalDebt - _collateralBalance;\\n        }\\n\\n        if (_profit > _loss) {\\n            _profit = _profit - _loss;\\n            _loss = 0;\\n            if (_profit > newBalance) _toUnstake = _profit - newBalance;\\n        } else {\\n            _loss = _loss - _profit;\\n            _profit = 0;\\n        }\\n    }\\n\\n    function _generateReport()\\n        internal\\n        virtual\\n        override\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n        uint256 _toUnstake;\\n        (_profit, _loss, _toUnstake) = _realizeGross(_totalDebt);\\n        // only make call to unstake and withdraw once\\n        _payback = _liquidate(_excessDebt, _toUnstake);\\n    }\\n\\n    function rebalance() external virtual override onlyKeeper {\\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _reinvest();\\n        if (!depositError) {\\n            uint256 _depositLoss = _realizeLoss(IVesperPool(pool).totalDebtOf(address(this)));\\n            IVesperPool(pool).reportLoss(_depositLoss);\\n        }\\n    }\\n\\n    // Unused\\n    /* solhint-disable no-empty-blocks */\\n\\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {}\\n\\n    function _realizeProfit(uint256 _totalDebt) internal override returns (uint256 _profit) {}\\n}\\n\",\"keccak256\":\"0x0f8374a181b598da4c82a637b1917f680716a11049496126ae25dc96f440bd28\",\"license\":\"MIT\"},\"contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../../interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"../../../interfaces/aave/IAave.sol\\\";\\nimport \\\"../../Strategy.sol\\\";\\nimport \\\"./CrvA3PoolStrategyBase.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in Curve Aave 3Pool and earn interest.\\ncontract CrvA3PoolAvaxStrategy is CrvA3PoolStrategyBase {\\n    using SafeERC20 for IERC20;\\n    address private constant CRV_POOL = 0x7f90122BF0700F9E7e1F688fe926940E8839F353;\\n    address private constant LP = 0x1337BedC9D22ecbe766dF105c9623922A27963EC;\\n    address private constant GAUGE = 0x5B5CFE992AdAC0C9D48E05854B2d91C73a003858;\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        uint256 _collateralIdx,\\n        string memory _name\\n    ) CrvA3PoolStrategyBase(_pool, _swapManager, CRV_POOL, LP, GAUGE, _collateralIdx, _name) {\\n        CRV = 0x47536F17F4fF30e64A96a7555826b8f9e66ec468;\\n        WETH = 0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB;\\n        reservedToken[LP] = true;\\n        reservedToken[CRV] = true;\\n        delete rewardTokens;\\n        rewardTokens.push(CRV);\\n    }\\n\\n    /// @dev Claimable rewards estimated into pool's collateral value\\n    function claimableRewardsInCollateral() public view virtual override returns (uint256 rewardAsCollateral) {\\n        uint256 _claimable;\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            _claimable = ILiquidityGaugeV3(crvGauge).claimable_reward(address(this), rewardTokens[i]);\\n            if (_claimable > 0) {\\n                (, uint256 _reward, ) =\\n                    swapManager.bestOutputFixedInput(rewardTokens[i], address(collateralToken), _claimable);\\n                rewardAsCollateral += _reward;\\n            }\\n        }\\n    }\\n\\n    function _claimRewards() internal override {\\n        ILiquidityGaugeV2(crvGauge).claim_rewards(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa057c29bb1a37f95b3fc5ea6192806c870aa000e4e96155c2da1879027959b54\",\"license\":\"MIT\"},\"contracts/strategies/curve/a3Pool/CrvA3PoolStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../../interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"../../../interfaces/aave/IAave.sol\\\";\\nimport \\\"../../Strategy.sol\\\";\\nimport \\\"../CrvPoolStrategyBase.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in Curve Aave 3Pool and earn interest.\\nabstract contract CrvA3PoolStrategyBase is CrvPoolStrategyBase {\\n    using SafeERC20 for IERC20;\\n    uint256 internal constant N = 3;\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _crvPool,\\n        address _lp,\\n        address _gauge,\\n        uint256 _collateralIdx,\\n        string memory _name\\n    ) CrvPoolStrategyBase(_pool, _crvPool, _lp, _gauge, _swapManager, _collateralIdx, N, _name) {\\n        require(IStableSwap3xUnderlying(_crvPool).lp_token() == _lp, \\\"receipt-token-mismatch\\\");\\n    }\\n\\n    function _init(address _crvPool, uint256 _n) internal virtual override {\\n        address[] memory _coins = new address[](_n);\\n        uint256[] memory _coinDecimals = new uint256[](_n);\\n        for (uint256 i = 0; i < _n; i++) {\\n            _coins[i] = IStableSwap3xUnderlying(_crvPool).underlying_coins(i);\\n            _coinDecimals[i] = IERC20Metadata(_coins[i]).decimals();\\n        }\\n        coins = _coins;\\n        coinDecimals = _coinDecimals;\\n    }\\n\\n    function _claimRewards() internal virtual override {\\n        ITokenMinter(CRV_MINTER).mint(crvGauge);\\n        ILiquidityGaugeV2(crvGauge).claim_rewards(address(this));\\n    }\\n\\n    function _depositToCurve(uint256 _amt) internal override returns (bool) {\\n        if (_amt != 0) {\\n            uint256[3] memory _depositAmounts;\\n            _depositAmounts[collIdx] = _amt;\\n            uint256 _expectedOut =\\n                _calcAmtOutAfterSlippage(\\n                    IStableSwap3xUnderlying(address(crvPool)).calc_token_amount(_depositAmounts, true),\\n                    crvSlippage\\n                );\\n            uint256 _minLpAmount =\\n                ((_amt * _getSafeUsdRate()) / crvPool.get_virtual_price()) * 10**(18 - coinDecimals[collIdx]);\\n            if (_expectedOut > _minLpAmount) _minLpAmount = _expectedOut;\\n            // solhint-disable no-empty-blocks\\n            try\\n                IStableSwap3xUnderlying(address(crvPool)).add_liquidity(_depositAmounts, _minLpAmount, true)\\n            {} catch Error(string memory reason) {\\n                emit DepositFailed(reason);\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function _withdrawAsFromCrvPool(\\n        uint256 _lpAmount,\\n        uint256 _minAmt,\\n        uint256 i\\n    ) internal override {\\n        crvPool.remove_liquidity_one_coin(_lpAmount, SafeCast.toInt128(int256(i)), _minAmt, true);\\n    }\\n\\n    function _withdrawAllAs(uint256 i) internal override {\\n        uint256 lpAmt = IERC20(crvLp).balanceOf(address(this));\\n        if (lpAmt != 0) {\\n            crvPool.remove_liquidity_one_coin(lpAmt, SafeCast.toInt128(int256(i)), 0, true);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9da1289f3c8509f2fe602757abf36d7eb5eda68120d55d1862b2d23a9c59e7da\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610160604052600080546001600160a01b031990811673d533a949740bb3306d119cc777fa900ba034cd521782556001805490911673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2179055610e10600555600655612710600755600a6012553480156200006d57600080fd5b50604051620061ac380380620061ac833981016040819052620000909162000cbf565b8383737f90122bf0700f9e7e1f688fe926940e8839f353731337bedc9d22ecbe766df105c9623922a27963ec735b5cfe992adac0c9d48e05854b2d91c73a0038588686868585858986600387878487898189620000f1565b60405180910390fd5b6001600160a01b038216620001495760405162461bcd60e51b815260206004820152601860248201527f4352564d67723a20696e76616c6964206c7020746f6b656e00000000000000006044820152606401620000e8565b6001600160a01b038116620001a15760405162461bcd60e51b815260206004820152601560248201527f4352564d67723a20696e76616c696420676175676500000000000000000000006044820152606401620000e8565b6001600160601b0319606093841b811660805291831b821660a05290911b1660c0526001600160a01b0383166200021b5760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f0000000000000000000000006044820152606401620000e8565b6001600160a01b038216620002685760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b6044820152606401620000e8565b600480546001600160a01b0319166001600160a01b03848116919091178255606085901b6001600160601b0319166101005260408051637e062a3560e11b815290519186169263fc0c546a928282019260209290829003018186803b158015620002d157600080fd5b505afa158015620002e6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200030c919062000c99565b60601b6001600160601b03191660e052600280546001600160a01b0319166001600160a01b03831617905562000359620003433390565b60086200084060201b6200238e1790919060201c565b6200039b5760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401620000e8565b505050818310620003e45760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a590b58dbdb1b185d195c985b60721b6044820152606401620000e8565b6101408290526001600160a01b038681166000908152600b60205260408082208054600160ff199182168117909255835490941683529120805490921617905561012083905262000436878362000860565b876001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200047057600080fd5b505afa15801562000485573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004ab919062000c99565b6001600160a01b0316600e8481548110620004d657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316146200053a5760405162461bcd60e51b815260206004820152601360248201527f636f6c6c61746572616c2d6d69736d61746368000000000000000000000000006044820152606401620000e8565b6000600e84815481106200055e57634e487b7160e01b600052603260045260246000fd5b600091825260209182902001546040805163313ce56760e01b815290516001600160a01b039092169263313ce56792600480840193829003018186803b158015620005a857600080fd5b505afa158015620005bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005e3919062000dcb565b60ff169050620005f581601262000f23565b6200060290600a62000e3b565b60135581516200061a90600a90602085019062000b3b565b5050600080546010805460018101825592526000805160206200618c83398151915290910180546001600160a01b0319166001600160a01b0392831617905560408051634163183360e11b815290518e83169a50918f1698506382c630669750600480820197506020965091945084900301915082905086803b158015620006a157600080fd5b505afa158015620006b6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006dc919062000c99565b6001600160a01b031614620007345760405162461bcd60e51b815260206004820152601660248201527f726563656970742d746f6b656e2d6d69736d61746368000000000000000000006044820152606401620000e8565b5050600080546001600160a01b03199081167347536f17f4ff30e64a96a7555826b8f9e66ec4689081178355600180549092167349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab178255600b6020527f265ca44241ce4c44d06322f33147d603abfbe1f739a7a647be14b6baaa3ad061805460ff1990811684179091559083527f48a4bdeb674f7714dec85e0270ec895c966f817754ece97c112aeb5c4ae3e17880549091169091179055620007f5955060109450925062000bca915050565b5050600080546010805460018101825592526000805160206200618c83398151915290910180546001600160a01b0319166001600160a01b039092169190911790555062000fda9050565b600062000857836001600160a01b03841662000ae9565b90505b92915050565b6000816001600160401b038111156200088957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015620008b3578160200160208202803683370190505b5090506000826001600160401b03811115620008df57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801562000909578160200160208202803683370190505b50905060005b8381101562000ab657604051630b9947eb60e41b8152600481018290526001600160a01b0386169063b9947eb09060240160206040518083038186803b1580156200095957600080fd5b505afa1580156200096e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000994919062000c99565b838281518110620009b557634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050828181518110620009f657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801562000a3757600080fd5b505afa15801562000a4c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a72919062000dcb565b60ff1682828151811062000a9657634e487b7160e01b600052603260045260246000fd5b60209081029190910101528062000aad8162000f7a565b9150506200090f565b50815162000acc90600e90602085019062000bed565b50805162000ae290600f90602084019062000c45565b5050505050565b600081815260018301602052604081205462000b32575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200085a565b5060006200085a565b82805462000b499062000f3d565b90600052602060002090601f01602090048101928262000b6d576000855562000bb8565b82601f1062000b8857805160ff191683800117855562000bb8565b8280016001018555821562000bb8579182015b8281111562000bb857825182559160200191906001019062000b9b565b5062000bc692915062000c82565b5090565b508054600082559060005260206000209081019062000bea919062000c82565b50565b82805482825590600052602060002090810192821562000bb8579160200282015b8281111562000bb857825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000c0e565b82805482825590600052602060002090810192821562000bb8579160200282018281111562000bb857825182559160200191906001019062000b9b565b5b8082111562000bc6576000815560010162000c83565b60006020828403121562000cab578081fd5b815162000cb88162000fc4565b9392505050565b6000806000806080858703121562000cd5578283fd5b845162000ce28162000fc4565b8094505060208086015162000cf78162000fc4565b6040870151606088015191955093506001600160401b038082111562000d1b578384fd5b818801915088601f83011262000d2f578384fd5b81518181111562000d445762000d4462000fae565b604051601f8201601f19908116603f0116810190838211818310171562000d6f5762000d6f62000fae565b816040528281528b8684870101111562000d87578687fd5b8693505b8284101562000daa578484018601518185018701529285019262000d8b565b8284111562000dbb57868684830101525b989b979a50959850505050505050565b60006020828403121562000ddd578081fd5b815160ff8116811462000cb8578182fd5b80825b600180861162000e02575062000e32565b81870482111562000e175762000e1762000f98565b8086161562000e2557918102915b9490941c93800262000df1565b94509492505050565b600062000857600019848460008262000e575750600162000cb8565b8162000e665750600062000cb8565b816001811462000e7f576002811462000e8a5762000ebe565b600191505062000cb8565b60ff84111562000e9e5762000e9e62000f98565b6001841b91508482111562000eb75762000eb762000f98565b5062000cb8565b5060208310610133831016604e8410600b841016171562000ef6575081810a8381111562000ef05762000ef062000f98565b62000cb8565b62000f05848484600162000dee565b80860482111562000f1a5762000f1a62000f98565b02949350505050565b60008282101562000f385762000f3862000f98565b500390565b600181811c9082168062000f5257607f821691505b6020821081141562000f7457634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141562000f915762000f9162000f98565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811462000bea57600080fd5b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205161014051614fa4620011e8600039600081816126fb0152613c3d0152600081816103d201528181613238015281816135b001526136a0015260008181610324015281816106e8015281816108e601528181610bfb01528181610d8c01528181610fd1015281816111520152818161125e01528181611411015281816115f1015281816116660152818161171e0152818161195001528181611bb701528181611c5401528181611eb1015281816123e7015281816128a801528181612a120152612ab201526000818161059a01528181610b5101528181610d2701528181611de401528181611e88015281816120b2015281816121b8015281816123c5015281816124190152818161264c015281816127d60152818161288601528181612b98015281816132ca0152818161336e0152818161340f015261344d0152600081816106a001528181610a0801528181610f32015281816117a3015281816126b5015281816129610152818161397801528181613a5701528181613bcf01526142dd0152600081816104f101528181610df1015281816118420152818161269301526138d50152600081816105c101528181610839015281816110990152818161243b0152818161361001528181613701015281816137da01528181613da20152613dfb0152614fa46000f3fe608060405234801561001057600080fd5b50600436106102cc5760003560e01c8063817b1cd21161017d578063c6610657116100d9578063e00af4a711610092578063e00af4a714610649578063e645c2021461065c578063ec78e83214610664578063fb589de214610677578063fc0c546a1461068a578063fd57a4df1461069b578063ffa1ad74146106c2576102cc565b8063c6610657146105f6578063cd2d7ebe14610609578063ce5494bb14610612578063d2c35ce814610625578063d4c3eea014610638578063d572fd7f14610640576102cc565b806399b71d5c1161013657806399b71d5c1461055d578063a3f4df7e14610565578063a923b2a61461057a578063aa1018861461058d578063b2016bd414610595578063b20fdc0d146105bc578063c415b95c146105e3576102cc565b8063817b1cd21461051357806385cf1c551461051b5780638fe91ffb14610523578063945c91421461052c578063951dc22c1461053f57806396dd5a7814610554576102cc565b806342189c8f1161022c57806372db30f3116101e557806372db30f31461049257806374db9ad4146104a557806379b37a86146104c057806379d5279f146104c95780637bb7bed1146104d15780637d7c2a1c146104e45780637f44579b146104ec576102cc565b806342189c8f14610407578063440d7248146104105780634c36fad71461044c57806367f5e4b81461045f5780636fe702c014610472578063709d039d1461047f576102cc565b8063201e81a811610289578063201e81a814610364578063242c135d146103775780632e1a7d4d1461037f578063319a444d14610392578063379173bb146103ba57806337d265db146103cd5780634032b72b146103f4576102cc565b806304f4efc5146102d1578063058062b3146102e657806314ae9f2e1461030c57806316f0115b1461031f5780631aedeabe146103535780631eb69b771461035c575b600080fd5b6102e46102df366004614938565b6106e6565b005b6102f96102f4366004614938565b61081f565b6040519081526020015b60405180910390f35b6102e461031a3660046146f6565b6108e4565b6103467f000000000000000000000000000000000000000000000000000000000000000081565b6040516103039190614a70565b6102f960075481565b6102f96109f6565b6102e461037236600461472e565b610bf9565b6102f9610f18565b6102e461038d366004614938565b610fce565b6103a56103a0366004614968565b61101f565b60408051928352602083019190915201610303565b6102f96103c8366004614968565b611089565b6102f97f000000000000000000000000000000000000000000000000000000000000000081565b6102e46104023660046146f6565b611150565b6102f960055481565b61043c61041e3660046146f6565b6001600160a01b03166000908152600b602052604090205460ff1690565b6040519015158152602001610303565b6102e461045a3660046146f6565b61125c565b6102e461046d366004614938565b61140f565b60115461043c9060ff1681565b600454610346906001600160a01b031681565b6102f96104a0366004614938565b611532565b61034673d061d61a4d941c39e5453435b6345dc261c2fce081565b6102f9600c5481565b6102e4611553565b6103466104df366004614938565b61155d565b6102e4611587565b6103467f000000000000000000000000000000000000000000000000000000000000000081565b6102f9611789565b6102f9611828565b6102f960135481565b600054610346906001600160a01b031681565b610547611877565b6040516103039190614aa8565b6102f9600d5481565b6102e4611886565b61056d6118c0565b6040516103039190614afc565b6102e4610588366004614968565b61194e565b6102e4611b77565b6103467f000000000000000000000000000000000000000000000000000000000000000081565b6103467f000000000000000000000000000000000000000000000000000000000000000081565b600354610346906001600160a01b031681565b610346610604366004614938565b611ba4565b6102f960065481565b6102e46106203660046146f6565b611bb4565b6102e46106333660046146f6565b611eaf565b6102f9612078565b6102f960125481565b6102e46106573660046146f6565b612141565b6102f9612374565b600254610346906001600160a01b031681565b6102f9610685366004614938565b61237e565b6002546001600160a01b0316610346565b6103467f000000000000000000000000000000000000000000000000000000000000000081565b61056d604051806040016040528060058152602001640342e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561073f57600080fd5b505afa158015610753573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107779190614712565b6001600160a01b0316336001600160a01b0316146107b05760405162461bcd60e51b81526004016107a790614b8f565b60405180910390fd5b61271081106107d15760405162461bcd60e51b81526004016107a790614b5f565b60125460408051918252602082018390527f92a63de30132f370b1c9f477f770f1e326f1423d1b569641a4728fa610569f86910160405180910390a18060125461081b9190614dc4565b5050565b60008161082d5760006108dc565b670de0b6b3a7640000827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561089057600080fd5b505afa1580156108a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c89190614950565b6108d29190614da5565b6108dc9190614c71565b90505b919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561093d57600080fd5b505afa158015610951573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109759190614712565b6001600160a01b0316336001600160a01b0316146109a55760405162461bcd60e51b81526004016107a790614b8f565b6109b06008826123a3565b6109f35760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b60448201526064016107a7565b50565b60008060005b601054811015610bf4577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166333fd6f743060108481548110610a5757634e487b7160e01b600052603260045260246000fd5b60009182526020909120015460405160e084901b6001600160e01b03191681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b158015610aa957600080fd5b505afa158015610abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae19190614950565b91508115610be257600454601080546000926001600160a01b03169163e8f983c89185908110610b2157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516001600160e01b031960e084901b168152610b7b916001600160a01b0316907f0000000000000000000000000000000000000000000000000000000000000000908890600401614a84565b60006040518083038186803b158015610b9357600080fd5b505afa158015610ba7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bcf91908101906147d4565b509150610bde90508185614c59565b9350505b80610bec81614e69565b9150506109fc565b505090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5257600080fd5b505afa158015610c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8a9190614712565b6001600160a01b0316336001600160a01b031614610cba5760405162461bcd60e51b81526004016107a790614b8f565b8051610ccd906010906020840190614652565b5060005b8151811015610efa5760025482516001600160a01b0390911690839083908110610d0b57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614158015610d8357507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316828281518110610d6f57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614155b8015610de857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316828281518110610dd457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614155b8015610e4d57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316828281518110610e3957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614155b610e905760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b2103932bbb0b932103a37b5b2b760611b60448201526064016107a7565b6001600b6000848481518110610eb657634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610ef281614e69565b915050610cd1565b50610f0560006123b8565b610f106000196123b8565b6109f36126da565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610f67903090600401614a70565b60206040518083038186803b158015610f7f57600080fd5b505afa158015610f93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb79190614950565b610fbf611828565b610fc99190614c59565b905090565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146110165760405162461bcd60e51b81526004016107a790614bc6565b6109f3816127bc565b600080600061102c611828565b90506000611038610f18565b90506110448186611089565b61104e8288614da5565b6110589190614c71565b93508084116110675783611069565b805b9350818411156110805761107d8285614dc4565b92505b50509250929050565b600082611097576000611147565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cc2b27d7846110d0856128cd565b6040516001600160e01b031960e085901b1681526004810192909252600f0b602482015260440160206040518083038186803b15801561110f57600080fd5b505afa158015611123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111479190614950565b90505b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156111a957600080fd5b505afa1580156111bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e19190614712565b6001600160a01b0316336001600160a01b0316146112115760405162461bcd60e51b81526004016107a790614b8f565b61121c60088261238e565b6109f35760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b60448201526064016107a7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156112b557600080fd5b505afa1580156112c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ed9190614712565b6001600160a01b0316336001600160a01b03161461131d5760405162461bcd60e51b81526004016107a790614b8f565b6001600160a01b0381166113685760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b60448201526064016107a7565b6004546001600160a01b03828116911614156113b35760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b60448201526064016107a7565b6004546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600480546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561146857600080fd5b505afa15801561147c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a09190614712565b6001600160a01b0316336001600160a01b0316146114d05760405162461bcd60e51b81526004016107a790614b8f565b6127108111156114f25760405162461bcd60e51b81526004016107a790614b5f565b60075460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600755565b600f818154811061154257600080fd5b600091825260209091200154905081565b61155b61294a565b565b6010818154811061156d57600080fd5b6000918252602090912001546001600160a01b0316905081565b611594335b6008906129e8565b6115b05760405162461bcd60e51b81526004016107a790614b2f565b60008060006115bd612a0a565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b15801561163557600080fd5b505af1158015611649573d6000803e3d6000fd5b50505050611655612b74565b60115460ff166117845760006117057f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b81526004016116b09190614a70565b60206040518083038186803b1580156116c857600080fd5b505afa1580156116dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117009190614950565b612c40565b6040516306eeb69360e51b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ddd6d26090602401600060405180830381600087803b15801561176a57600080fd5b505af115801561177e573d6000803e3d6000fd5b50505050505b505050565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906117d8903090600401614a70565b60206040518083038186803b1580156117f057600080fd5b505afa158015611804573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc99190614950565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906117d8903090600401614a70565b6060610fc96008612c71565b90565b61188f3361158c565b6118ab5760405162461bcd60e51b81526004016107a790614b2f565b6118b560006123b8565b61155b6000196123b8565b600a80546118cd90614e07565b80601f01602080910402602001604051908101604052809291908181526020018280546118f990614e07565b80156119465780601f1061191b57610100808354040283529160200191611946565b820191906000526020600020905b81548152906001019060200180831161192957829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156119a757600080fd5b505afa1580156119bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119df9190614712565b6001600160a01b0316336001600160a01b031614611a0f5760405162461bcd60e51b81526004016107a790614b8f565b600480546040805163c2fba66760e01b815290516001600160a01b039092169263c2fba667928282019260209290829003018186803b158015611a5157600080fd5b505afa158015611a65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a899190614950565b8110611ace5760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b60448201526064016107a7565b81611ad95760055491505b603b8211611b215760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b60448201526064016107a7565b6005546006546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600591909155600655565b611b803361158c565b611b9c5760405162461bcd60e51b81526004016107a790614b2f565b61155b6126da565b600e818154811061156d57600080fd5b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614611bfc5760405162461bcd60e51b81526004016107a790614bc6565b6001600160a01b038116611c525760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f0000000060448201526064016107a7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cb557600080fd5b505afa158015611cc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ced9190614712565b6001600160a01b031614611d3c5760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b60448201526064016107a7565b611d4581612c7e565b6002546040516370a0823160e01b8152611dde9183916001600160a01b03909116906370a0823190611d7b903090600401614a70565b60206040518083038186803b158015611d9357600080fd5b505afa158015611da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcb9190614950565b6002546001600160a01b03169190612c86565b6109f3817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611e2e9190614a70565b60206040518083038186803b158015611e4657600080fd5b505afa158015611e5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7e9190614950565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612c86565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611f0857600080fd5b505afa158015611f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f409190614712565b6001600160a01b0316336001600160a01b031614611f705760405162461bcd60e51b81526004016107a790614b8f565b6001600160a01b038116611fc65760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f00000060448201526064016107a7565b6003546001600160a01b038281169116141561201c5760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b60448201526064016107a7565b6003546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b60006120826109f6565b61209b6106856120936102f4610f18565b601254612ce9565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906120e7903090600401614a70565b60206040518083038186803b1580156120ff57600080fd5b505afa158015612113573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121379190614950565b610fbf9190614c59565b61214a3361158c565b6121665760405162461bcd60e51b81526004016107a790614b2f565b6003546001600160a01b03166121b65760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b60448201526064016107a7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156122385760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c0060448201526064016107a7565b6001600160a01b0381166000908152600b602052604090205460ff16156122985760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b60448201526064016107a7565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156122d8576003546122d3906001600160a01b031647612d0c565b6109f3565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190612307903090600401614a70565b60206040518083038186803b15801561231f57600080fd5b505afa158015612333573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123579190614950565b60035490915061081b906001600160a01b03848116911683612c86565b6000610fc9612078565b6000601354826108dc9190614c71565b6000611147836001600160a01b038416612e25565b6000611147836001600160a01b038416612e74565b61240c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612f91565b6124606001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612f91565b60005b600480546040805163c2fba66760e01b815290516001600160a01b039092169263c2fba667928282019260209290829003018186803b1580156124a557600080fd5b505afa1580156124b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124dd9190614950565b8110156126855760005b6010548110156125c15760048054604051636e74a6f760e01b81529182018490526125af916001600160a01b0390911690636e74a6f79060240160206040518083038186803b15801561253957600080fd5b505afa15801561254d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125719190614712565b846010848154811061259357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169190612f91565b806125b981614e69565b9150506124e7565b5060048054604051636e74a6f760e01b8152918201839052612673916001600160a01b0390911690636e74a6f79060240160206040518083038186803b15801561260a57600080fd5b505afa15801561261e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126429190614712565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169084612f91565b8061267d81614e69565b915050612463565b506109f36001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612f91565b6000546001546126f6916001600160a01b0390811691166130b5565b60005b7f000000000000000000000000000000000000000000000000000000000000000081101561277857612766600e828154811061274557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001546001600160a01b0391821691166130b5565b8061277081614e69565b9150506126f9565b5060005b6010548110156109f3576127aa6010828154811061274557634e487b7160e01b600052603260045260246000fd5b806127b481614e69565b91505061277c565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061280b903090600401614a70565b60206040518083038186803b15801561282357600080fd5b505afa158015612837573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285b9190614950565b905080821115612879576128776128728284614dc4565b613227565b505b61081b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084612c86565b600060016001607f1b031982121580156128ea57506001607f1b82125b6129465760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b60648201526084016107a7565b5090565b604051634b82009360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634b82009390612996903090600401614a70565b602060405180830381600087803b1580156129b057600080fd5b505af11580156129c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f3919061491e565b6001600160a01b03811660009081526001830160205260408120541515611147565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b8152600401612a5c9190614a70565b60206040518083038186803b158015612a7457600080fd5b505afa158015612a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aac9190614950565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b8152600401612afc9190614a70565b60206040518083038186803b158015612b1457600080fd5b505afa158015612b28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4c9190614950565b90506000612b5982613366565b91975095509050612b6a838261357c565b9350505050909192565b6011805460ff191690556040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612bcd903090600401614a70565b60206040518083038186803b158015612be557600080fd5b505afa158015612bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c1d9190614950565b9050612c288161359c565b6011805460ff191691159190911790556109f36138bb565b600080612c546106856120936102f4610f18565b905082811015612c6b57612c688184614dc4565b91505b50919050565b60606000612c68836139e0565b6109f3613a3c565b6040516001600160a01b03831660248201526044810182905261178490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613ae1565b6000612710612cf88382614dc4565b612d029085614da5565b6111479190614c71565b80471015612d5c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016107a7565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612da9576040519150601f19603f3d011682016040523d82523d6000602084013e612dae565b606091505b50509050806117845760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016107a7565b6000818152600183016020526040812054612e6c5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561114a565b50600061114a565b60008181526001830160205260408120548015612f87576000612e98600183614dc4565b8554909150600090612eac90600190614dc4565b9050818114612f2d576000866000018281548110612eda57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110612f0b57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612f4c57634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061114a565b600091505061114a565b80158061301a5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612fe057600080fd5b505afa158015612ff4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130189190614950565b155b6130855760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016107a7565b6040516001600160a01b03831660248201526044810182905261178490849063095ea7b360e01b90606401612cb2565b60005b600480546040805163c2fba66760e01b815290516001600160a01b039092169263c2fba667928282019260209290829003018186803b1580156130fa57600080fd5b505afa15801561310e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131329190614950565b8110156117845760048054600554604051630f30f2d360e21b81526001600160a01b03878116948201949094528584166024820152604481019190915260648101849052911690633cc3cb4c90608401602060405180830381600087803b15801561319c57600080fd5b505af19250505080156131cc575060408051601f3d908101601f191682019092526131c991810190614712565b60015b61320f576131d8614eb0565b806308c379a014156131fe57506131ed614ec7565b806131f85750613200565b5061320a565b505b3d6000803e3d6000fd5b613215565b50611784565b8061321f81614e69565b9150506130b8565b600081613236575060006108df565b7f0000000000000000000000000000000000000000000000000000000000000000600080613264858461101f565b9150915061327181613bb3565b60006132a6670de0b6b3a764000061329261209361328d613c06565b613d94565b61329c9086614da5565b6106859190614c71565b90506132b3838286613df9565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906132ff903090600401614a70565b60206040518083038186803b15801561331757600080fd5b505afa15801561332b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061334f9190614950565b94508585111561335d578594505b50505050919050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016133b89190614a70565b60206040518083038186803b1580156133d057600080fd5b505afa1580156133e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134089190614950565b90506134337f0000000000000000000000000000000000000000000000000000000000000000613e9e565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613482903090600401614a70565b60206040518083038186803b15801561349a57600080fd5b505afa1580156134ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134d29190614950565b90506134de8282614dc4565b945060006134f36106856120936102f4610f18565b6134fd9084614c59565b905086811115613522576135118782614dc4565b61351b9087614c59565b955061352f565b61352c8188614dc4565b94505b84861115613561576135418587614dc4565b9550600094508186111561355c576135598287614dc4565b93505b613572565b61356b8686614dc4565b9450600095505b5050509193909250565b600061358b6128728385614c59565b90508281111561114a575090919050565b600081156138b3576135ac6146b3565b82817f0000000000000000000000000000000000000000000000000000000000000000600381106135ed57634e487b7160e01b600052603260045260246000fd5b6020020152604051633883e11960e01b8152600090613698906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633883e11990613648908690600190600401614abb565b60206040518083038186803b15801561366057600080fd5b505afa158015613674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120939190614950565b90506000600f7f0000000000000000000000000000000000000000000000000000000000000000815481106136dd57634e487b7160e01b600052603260045260246000fd5b906000526020600020015460126136f49190614dc4565b6136ff90600a614cd7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561375857600080fd5b505afa15801561376c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137909190614950565b613798613c06565b6137a29088614da5565b6137ac9190614c71565b6137b69190614da5565b9050808211156137c35750805b6040516315b74c9d60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632b6e993a906138149086908590600190600401614ad8565b600060405180830381600087803b15801561382e57600080fd5b505af192505050801561383f575060015b6138af5761384b614eb0565b806308c379a014156131fe5750613860614ec7565b8061386b5750613200565b7f63299ad14374170063e6f2e5559417926f3a23da67eefa83fc2e9bf9f21e915c8160405161389a9190614afc565b60405180910390a160009450505050506108df565b5050505b506001919050565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061390a903090600401614a70565b60206040518083038186803b15801561392257600080fd5b505afa158015613936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061395a9190614950565b905080156109f35760405163b6b55f2560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f25906024015b600060405180830381600087803b1580156139c557600080fd5b505af11580156139d9573d6000803e3d6000fd5b5050505050565b606081600001805480602002602001604051908101604052809291908181526020018280548015613a3057602002820191906000526020600020905b815481526020019060010190808311613a1c575b50505050509050919050565b6040516370a0823160e01b815261155b906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613a8c903090600401614a70565b60206040518083038186803b158015613aa457600080fd5b505afa158015613ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613adc9190614950565b613bb3565b6000613b36826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166140d69092919063ffffffff16565b8051909150156117845780806020019051810190613b54919061491e565b6117845760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107a7565b80156109f357604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d906024016139ab565b600060055442613c169190614dc4565b600d54118015613c275750600c5415155b15613c355750600c54611883565b60008060005b7f0000000000000000000000000000000000000000000000000000000000000000811015613d2757600080613ce7600e8481548110613c8a57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600154600f80546001600160a01b03938416939092169187908110613ccb57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154600a613ce29190614cd7565b6140ef565b915091508015613d1257841580613cfd57508482105b15613d06578194505b81841015613d12578193505b50508080613d1f90614e69565b915050613c3b565b5081613d675760405162461bcd60e51b815260206004820152600f60248201526e6e6f2d6f7261636c652d726174657360881b60448201526064016107a7565b42600d5580613d7e83670de0b6b3a7640000614da5565b613d889190614c71565b600c8190559250505090565b6000670de0b6b3a7640000827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561089057600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663517a55a384613e32846128cd565b6040516001600160e01b031960e085901b1681526004810192909252600f0b60248201526044810185905260016064820152608401600060405180830381600087803b158015613e8157600080fd5b505af1158015613e95573d6000803e3d6000fd5b50505050505050565b613ea66142c6565b60005b60105481101561081b57600060108281548110613ed657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516370a0823160e01b81526001600160a01b03909116906370a0823190613f0f903090600401614a70565b60206040518083038186803b158015613f2757600080fd5b505afa158015613f3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f5f9190614950565b905080156140c3576000612710600754101561408057600080613fbe60108681548110613f9c57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001546001600160a01b039182169116866140ef565b60015491935091506000908190613fdf906001600160a01b031689866140ef565b91509150826140265760405162461bcd60e51b81526020600482015260136024820152727374616c652d7265776172642d6f7261636c6560681b60448201526064016107a7565b8061406d5760405162461bcd60e51b81526020600482015260176024820152767374616c652d636f6c6c61746572616c2d6f7261636c6560481b60448201526064016107a7565b61407982600754612ce9565b9450505050505b6140c1601084815481106140a457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316858484614346565b505b50806140ce81614e69565b915050613ea9565b60606140e584846000856144f1565b90505b9392505050565b60008060005b600480546040805163c2fba66760e01b815290516001600160a01b039092169263c2fba667928282019260209290829003018186803b15801561413757600080fd5b505afa15801561414b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061416f9190614950565b8110156142b557600454600554604080516001600160a01b038a811660208301528981168284015260608201899052608082019390935260a08082018690528251808303909101815260c08201909252600093849316916141dc9163b67bb24d60e01b919060e001614a23565b60408051601f19818403018152908290526141f691614a54565b6000604051808303816000865af19150503d8060008114614233576040519150601f19603f3d011682016040523d82523d6000602084013e614238565b606091505b509150915081156142a0576000808280602001905181019061425a9190614989565b50915091506005544261426d9190614dc4565b8111801561427a57508115155b1561428f57509450600193506142be92505050565b6000809650965050505050506142be565b505080806142ad90614e69565b9150506140f5565b50600080915091505b935093915050565b604051634274debf60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906384e9bd7e90614312903090600401614a70565b600060405180830381600087803b15801561432c57600080fd5b505af1158015614340573d6000803e3d6000fd5b50505050565b60048054604051631d1f307960e31b8152600092839283926001600160a01b039091169163e8f983c891614380918b918b918b9101614a84565b60006040518083038186803b15801561439857600080fd5b505afa1580156143ac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526143d491908101906147d4565b92509250925083600014156143e857600193505b8115613e955760048054604051636e74a6f760e01b81529182018390526001600160a01b031690636e74a6f79060240160206040518083038186803b15801561443057600080fd5b505afa158015614444573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144689190614712565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b815260040161449b959493929190614bf9565b600060405180830381600087803b1580156144b557600080fd5b505af11580156144c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261177e919081019061488d565b6060824710156145525760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107a7565b843b6145a05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107a7565b600080866001600160a01b031685876040516145bc9190614a54565b60006040518083038185875af1925050503d80600081146145f9576040519150601f19603f3d011682016040523d82523d6000602084013e6145fe565b606091505b509150915061460e828286614619565b979650505050505050565b606083156146285750816140e8565b8251156146385782518084602001fd5b8160405162461bcd60e51b81526004016107a79190614afc565b8280548282559060005260206000209081019282156146a7579160200282015b828111156146a757825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614672565b506129469291506146d1565b60405180606001604052806003906020820280368337509192915050565b5b8082111561294657600081556001016146d2565b805180151581146108df57600080fd5b600060208284031215614707578081fd5b81356140e881614f59565b600060208284031215614723578081fd5b81516140e881614f59565b60006020808385031215614740578182fd5b823567ffffffffffffffff811115614756578283fd5b8301601f81018513614766578283fd5b803561477181614c35565b60405161477e8282614e3c565b8281528481019150838501600584901b8501860189101561479d578687fd5b8694505b838510156147c85780356147b481614f59565b8352600194909401939185019185016147a1565b50979650505050505050565b6000806000606084860312156147e8578182fd5b835167ffffffffffffffff8111156147fe578283fd5b8401601f8101861361480e578283fd5b8051602061481b82614c35565b6040516148288282614e3c565b8381528281019150848301600585901b860184018b1015614847578788fd5b8795505b8486101561487257805161485e81614f59565b83526001959095019491830191830161484b565b50918801516040909801519199979850909695505050505050565b6000602080838503121561489f578182fd5b825167ffffffffffffffff8111156148b5578283fd5b8301601f810185136148c5578283fd5b80516148d081614c35565b6040516148dd8282614e3c565b8281528481019150838501600584901b850186018910156148fc578687fd5b8694505b838510156147c8578051835260019490940193918501918501614900565b60006020828403121561492f578081fd5b611147826146e6565b600060208284031215614949578081fd5b5035919050565b600060208284031215614961578081fd5b5051919050565b6000806040838503121561497a578182fd5b50508035926020909101359150565b60008060006060848603121561499d578283fd5b83519250602084015191506149b4604085016146e6565b90509250925092565b6000815180845260208085019450808401835b838110156149f55781516001600160a01b0316875295820195908201906001016149d0565b509495945050505050565b8060005b6003811015614340578151845260209384019390910190600101614a04565b6001600160e01b0319831681528151600090614a46816004850160208701614ddb565b919091016004019392505050565b60008251614a66818460208701614ddb565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020825261114760208301846149bd565b60808101614ac98285614a00565b82151560608301529392505050565b60a08101614ae68286614a00565b8360608301528215156080830152949350505050565b6000602082528251806020840152614b1b816040850160208701614ddb565b601f01601f19169190910160400192915050565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b602080825260169082015275696e76616c69642d736c6970706167652d76616c756560501b604082015260600190565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b600086825285602083015260a06040830152614c1860a08301866149bd565b6001600160a01b0394909416606083015250608001529392505050565b600067ffffffffffffffff821115614c4f57614c4f614e9a565b5060051b60200190565b60008219821115614c6c57614c6c614e84565b500190565b600082614c8c57634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611614ca35750614cce565b818704821115614cb557614cb5614e84565b80861615614cc257918102915b9490941c938002614c94565b94509492505050565b60006111476000198484600082614cf0575060016140e8565b81614cfd575060006140e8565b8160018114614d135760028114614d1d57614d4a565b60019150506140e8565b60ff841115614d2e57614d2e614e84565b6001841b915084821115614d4457614d44614e84565b506140e8565b5060208310610133831016604e8410600b8410161715614d7d575081810a83811115614d7857614d78614e84565b6140e8565b614d8a8484846001614c91565b808604821115614d9c57614d9c614e84565b02949350505050565b6000816000190483118215151615614dbf57614dbf614e84565b500290565b600082821015614dd657614dd6614e84565b500390565b60005b83811015614df6578181015183820152602001614dde565b838111156143405750506000910152565b600181811c90821680614e1b57607f821691505b60208210811415612c6b57634e487b7160e01b600052602260045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715614e6257614e62614e9a565b6040525050565b6000600019821415614e7d57614e7d614e84565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561188357600481823e5160e01c90565b600060443d1015614ed757611883565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715614f09575050505050611883565b8285019150815181811115614f2357505050505050611883565b843d8701016020828501011115614f3f57505050505050611883565b614f4e60208286010187614e3c565b509094505050505090565b6001600160a01b03811681146109f357600080fdfea264697066735822122022646870795c5c1f643316c2b98f3818b4c65eb0909fe51f070b651dc2fd099864736f6c634300080300331b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102cc5760003560e01c8063817b1cd21161017d578063c6610657116100d9578063e00af4a711610092578063e00af4a714610649578063e645c2021461065c578063ec78e83214610664578063fb589de214610677578063fc0c546a1461068a578063fd57a4df1461069b578063ffa1ad74146106c2576102cc565b8063c6610657146105f6578063cd2d7ebe14610609578063ce5494bb14610612578063d2c35ce814610625578063d4c3eea014610638578063d572fd7f14610640576102cc565b806399b71d5c1161013657806399b71d5c1461055d578063a3f4df7e14610565578063a923b2a61461057a578063aa1018861461058d578063b2016bd414610595578063b20fdc0d146105bc578063c415b95c146105e3576102cc565b8063817b1cd21461051357806385cf1c551461051b5780638fe91ffb14610523578063945c91421461052c578063951dc22c1461053f57806396dd5a7814610554576102cc565b806342189c8f1161022c57806372db30f3116101e557806372db30f31461049257806374db9ad4146104a557806379b37a86146104c057806379d5279f146104c95780637bb7bed1146104d15780637d7c2a1c146104e45780637f44579b146104ec576102cc565b806342189c8f14610407578063440d7248146104105780634c36fad71461044c57806367f5e4b81461045f5780636fe702c014610472578063709d039d1461047f576102cc565b8063201e81a811610289578063201e81a814610364578063242c135d146103775780632e1a7d4d1461037f578063319a444d14610392578063379173bb146103ba57806337d265db146103cd5780634032b72b146103f4576102cc565b806304f4efc5146102d1578063058062b3146102e657806314ae9f2e1461030c57806316f0115b1461031f5780631aedeabe146103535780631eb69b771461035c575b600080fd5b6102e46102df366004614938565b6106e6565b005b6102f96102f4366004614938565b61081f565b6040519081526020015b60405180910390f35b6102e461031a3660046146f6565b6108e4565b6103467f000000000000000000000000000000000000000000000000000000000000000081565b6040516103039190614a70565b6102f960075481565b6102f96109f6565b6102e461037236600461472e565b610bf9565b6102f9610f18565b6102e461038d366004614938565b610fce565b6103a56103a0366004614968565b61101f565b60408051928352602083019190915201610303565b6102f96103c8366004614968565b611089565b6102f97f000000000000000000000000000000000000000000000000000000000000000081565b6102e46104023660046146f6565b611150565b6102f960055481565b61043c61041e3660046146f6565b6001600160a01b03166000908152600b602052604090205460ff1690565b6040519015158152602001610303565b6102e461045a3660046146f6565b61125c565b6102e461046d366004614938565b61140f565b60115461043c9060ff1681565b600454610346906001600160a01b031681565b6102f96104a0366004614938565b611532565b61034673d061d61a4d941c39e5453435b6345dc261c2fce081565b6102f9600c5481565b6102e4611553565b6103466104df366004614938565b61155d565b6102e4611587565b6103467f000000000000000000000000000000000000000000000000000000000000000081565b6102f9611789565b6102f9611828565b6102f960135481565b600054610346906001600160a01b031681565b610547611877565b6040516103039190614aa8565b6102f9600d5481565b6102e4611886565b61056d6118c0565b6040516103039190614afc565b6102e4610588366004614968565b61194e565b6102e4611b77565b6103467f000000000000000000000000000000000000000000000000000000000000000081565b6103467f000000000000000000000000000000000000000000000000000000000000000081565b600354610346906001600160a01b031681565b610346610604366004614938565b611ba4565b6102f960065481565b6102e46106203660046146f6565b611bb4565b6102e46106333660046146f6565b611eaf565b6102f9612078565b6102f960125481565b6102e46106573660046146f6565b612141565b6102f9612374565b600254610346906001600160a01b031681565b6102f9610685366004614938565b61237e565b6002546001600160a01b0316610346565b6103467f000000000000000000000000000000000000000000000000000000000000000081565b61056d604051806040016040528060058152602001640342e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561073f57600080fd5b505afa158015610753573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107779190614712565b6001600160a01b0316336001600160a01b0316146107b05760405162461bcd60e51b81526004016107a790614b8f565b60405180910390fd5b61271081106107d15760405162461bcd60e51b81526004016107a790614b5f565b60125460408051918252602082018390527f92a63de30132f370b1c9f477f770f1e326f1423d1b569641a4728fa610569f86910160405180910390a18060125461081b9190614dc4565b5050565b60008161082d5760006108dc565b670de0b6b3a7640000827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561089057600080fd5b505afa1580156108a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c89190614950565b6108d29190614da5565b6108dc9190614c71565b90505b919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561093d57600080fd5b505afa158015610951573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109759190614712565b6001600160a01b0316336001600160a01b0316146109a55760405162461bcd60e51b81526004016107a790614b8f565b6109b06008826123a3565b6109f35760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b60448201526064016107a7565b50565b60008060005b601054811015610bf4577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166333fd6f743060108481548110610a5757634e487b7160e01b600052603260045260246000fd5b60009182526020909120015460405160e084901b6001600160e01b03191681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b158015610aa957600080fd5b505afa158015610abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae19190614950565b91508115610be257600454601080546000926001600160a01b03169163e8f983c89185908110610b2157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516001600160e01b031960e084901b168152610b7b916001600160a01b0316907f0000000000000000000000000000000000000000000000000000000000000000908890600401614a84565b60006040518083038186803b158015610b9357600080fd5b505afa158015610ba7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bcf91908101906147d4565b509150610bde90508185614c59565b9350505b80610bec81614e69565b9150506109fc565b505090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5257600080fd5b505afa158015610c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8a9190614712565b6001600160a01b0316336001600160a01b031614610cba5760405162461bcd60e51b81526004016107a790614b8f565b8051610ccd906010906020840190614652565b5060005b8151811015610efa5760025482516001600160a01b0390911690839083908110610d0b57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614158015610d8357507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316828281518110610d6f57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614155b8015610de857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316828281518110610dd457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614155b8015610e4d57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316828281518110610e3957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614155b610e905760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b2103932bbb0b932103a37b5b2b760611b60448201526064016107a7565b6001600b6000848481518110610eb657634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610ef281614e69565b915050610cd1565b50610f0560006123b8565b610f106000196123b8565b6109f36126da565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610f67903090600401614a70565b60206040518083038186803b158015610f7f57600080fd5b505afa158015610f93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb79190614950565b610fbf611828565b610fc99190614c59565b905090565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146110165760405162461bcd60e51b81526004016107a790614bc6565b6109f3816127bc565b600080600061102c611828565b90506000611038610f18565b90506110448186611089565b61104e8288614da5565b6110589190614c71565b93508084116110675783611069565b805b9350818411156110805761107d8285614dc4565b92505b50509250929050565b600082611097576000611147565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cc2b27d7846110d0856128cd565b6040516001600160e01b031960e085901b1681526004810192909252600f0b602482015260440160206040518083038186803b15801561110f57600080fd5b505afa158015611123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111479190614950565b90505b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156111a957600080fd5b505afa1580156111bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e19190614712565b6001600160a01b0316336001600160a01b0316146112115760405162461bcd60e51b81526004016107a790614b8f565b61121c60088261238e565b6109f35760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b60448201526064016107a7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156112b557600080fd5b505afa1580156112c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ed9190614712565b6001600160a01b0316336001600160a01b03161461131d5760405162461bcd60e51b81526004016107a790614b8f565b6001600160a01b0381166113685760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b60448201526064016107a7565b6004546001600160a01b03828116911614156113b35760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b60448201526064016107a7565b6004546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600480546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561146857600080fd5b505afa15801561147c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a09190614712565b6001600160a01b0316336001600160a01b0316146114d05760405162461bcd60e51b81526004016107a790614b8f565b6127108111156114f25760405162461bcd60e51b81526004016107a790614b5f565b60075460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600755565b600f818154811061154257600080fd5b600091825260209091200154905081565b61155b61294a565b565b6010818154811061156d57600080fd5b6000918252602090912001546001600160a01b0316905081565b611594335b6008906129e8565b6115b05760405162461bcd60e51b81526004016107a790614b2f565b60008060006115bd612a0a565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b15801561163557600080fd5b505af1158015611649573d6000803e3d6000fd5b50505050611655612b74565b60115460ff166117845760006117057f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b81526004016116b09190614a70565b60206040518083038186803b1580156116c857600080fd5b505afa1580156116dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117009190614950565b612c40565b6040516306eeb69360e51b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ddd6d26090602401600060405180830381600087803b15801561176a57600080fd5b505af115801561177e573d6000803e3d6000fd5b50505050505b505050565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906117d8903090600401614a70565b60206040518083038186803b1580156117f057600080fd5b505afa158015611804573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc99190614950565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906117d8903090600401614a70565b6060610fc96008612c71565b90565b61188f3361158c565b6118ab5760405162461bcd60e51b81526004016107a790614b2f565b6118b560006123b8565b61155b6000196123b8565b600a80546118cd90614e07565b80601f01602080910402602001604051908101604052809291908181526020018280546118f990614e07565b80156119465780601f1061191b57610100808354040283529160200191611946565b820191906000526020600020905b81548152906001019060200180831161192957829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156119a757600080fd5b505afa1580156119bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119df9190614712565b6001600160a01b0316336001600160a01b031614611a0f5760405162461bcd60e51b81526004016107a790614b8f565b600480546040805163c2fba66760e01b815290516001600160a01b039092169263c2fba667928282019260209290829003018186803b158015611a5157600080fd5b505afa158015611a65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a899190614950565b8110611ace5760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b60448201526064016107a7565b81611ad95760055491505b603b8211611b215760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b60448201526064016107a7565b6005546006546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600591909155600655565b611b803361158c565b611b9c5760405162461bcd60e51b81526004016107a790614b2f565b61155b6126da565b600e818154811061156d57600080fd5b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614611bfc5760405162461bcd60e51b81526004016107a790614bc6565b6001600160a01b038116611c525760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f0000000060448201526064016107a7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cb557600080fd5b505afa158015611cc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ced9190614712565b6001600160a01b031614611d3c5760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b60448201526064016107a7565b611d4581612c7e565b6002546040516370a0823160e01b8152611dde9183916001600160a01b03909116906370a0823190611d7b903090600401614a70565b60206040518083038186803b158015611d9357600080fd5b505afa158015611da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcb9190614950565b6002546001600160a01b03169190612c86565b6109f3817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611e2e9190614a70565b60206040518083038186803b158015611e4657600080fd5b505afa158015611e5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7e9190614950565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612c86565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611f0857600080fd5b505afa158015611f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f409190614712565b6001600160a01b0316336001600160a01b031614611f705760405162461bcd60e51b81526004016107a790614b8f565b6001600160a01b038116611fc65760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f00000060448201526064016107a7565b6003546001600160a01b038281169116141561201c5760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b60448201526064016107a7565b6003546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b60006120826109f6565b61209b6106856120936102f4610f18565b601254612ce9565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906120e7903090600401614a70565b60206040518083038186803b1580156120ff57600080fd5b505afa158015612113573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121379190614950565b610fbf9190614c59565b61214a3361158c565b6121665760405162461bcd60e51b81526004016107a790614b2f565b6003546001600160a01b03166121b65760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b60448201526064016107a7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156122385760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c0060448201526064016107a7565b6001600160a01b0381166000908152600b602052604090205460ff16156122985760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b60448201526064016107a7565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156122d8576003546122d3906001600160a01b031647612d0c565b6109f3565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190612307903090600401614a70565b60206040518083038186803b15801561231f57600080fd5b505afa158015612333573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123579190614950565b60035490915061081b906001600160a01b03848116911683612c86565b6000610fc9612078565b6000601354826108dc9190614c71565b6000611147836001600160a01b038416612e25565b6000611147836001600160a01b038416612e74565b61240c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612f91565b6124606001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612f91565b60005b600480546040805163c2fba66760e01b815290516001600160a01b039092169263c2fba667928282019260209290829003018186803b1580156124a557600080fd5b505afa1580156124b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124dd9190614950565b8110156126855760005b6010548110156125c15760048054604051636e74a6f760e01b81529182018490526125af916001600160a01b0390911690636e74a6f79060240160206040518083038186803b15801561253957600080fd5b505afa15801561254d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125719190614712565b846010848154811061259357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169190612f91565b806125b981614e69565b9150506124e7565b5060048054604051636e74a6f760e01b8152918201839052612673916001600160a01b0390911690636e74a6f79060240160206040518083038186803b15801561260a57600080fd5b505afa15801561261e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126429190614712565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169084612f91565b8061267d81614e69565b915050612463565b506109f36001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612f91565b6000546001546126f6916001600160a01b0390811691166130b5565b60005b7f000000000000000000000000000000000000000000000000000000000000000081101561277857612766600e828154811061274557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001546001600160a01b0391821691166130b5565b8061277081614e69565b9150506126f9565b5060005b6010548110156109f3576127aa6010828154811061274557634e487b7160e01b600052603260045260246000fd5b806127b481614e69565b91505061277c565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061280b903090600401614a70565b60206040518083038186803b15801561282357600080fd5b505afa158015612837573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285b9190614950565b905080821115612879576128776128728284614dc4565b613227565b505b61081b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084612c86565b600060016001607f1b031982121580156128ea57506001607f1b82125b6129465760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b60648201526084016107a7565b5090565b604051634b82009360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634b82009390612996903090600401614a70565b602060405180830381600087803b1580156129b057600080fd5b505af11580156129c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f3919061491e565b6001600160a01b03811660009081526001830160205260408120541515611147565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b8152600401612a5c9190614a70565b60206040518083038186803b158015612a7457600080fd5b505afa158015612a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aac9190614950565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b8152600401612afc9190614a70565b60206040518083038186803b158015612b1457600080fd5b505afa158015612b28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4c9190614950565b90506000612b5982613366565b91975095509050612b6a838261357c565b9350505050909192565b6011805460ff191690556040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612bcd903090600401614a70565b60206040518083038186803b158015612be557600080fd5b505afa158015612bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c1d9190614950565b9050612c288161359c565b6011805460ff191691159190911790556109f36138bb565b600080612c546106856120936102f4610f18565b905082811015612c6b57612c688184614dc4565b91505b50919050565b60606000612c68836139e0565b6109f3613a3c565b6040516001600160a01b03831660248201526044810182905261178490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613ae1565b6000612710612cf88382614dc4565b612d029085614da5565b6111479190614c71565b80471015612d5c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016107a7565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612da9576040519150601f19603f3d011682016040523d82523d6000602084013e612dae565b606091505b50509050806117845760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016107a7565b6000818152600183016020526040812054612e6c5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561114a565b50600061114a565b60008181526001830160205260408120548015612f87576000612e98600183614dc4565b8554909150600090612eac90600190614dc4565b9050818114612f2d576000866000018281548110612eda57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110612f0b57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612f4c57634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061114a565b600091505061114a565b80158061301a5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612fe057600080fd5b505afa158015612ff4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130189190614950565b155b6130855760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016107a7565b6040516001600160a01b03831660248201526044810182905261178490849063095ea7b360e01b90606401612cb2565b60005b600480546040805163c2fba66760e01b815290516001600160a01b039092169263c2fba667928282019260209290829003018186803b1580156130fa57600080fd5b505afa15801561310e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131329190614950565b8110156117845760048054600554604051630f30f2d360e21b81526001600160a01b03878116948201949094528584166024820152604481019190915260648101849052911690633cc3cb4c90608401602060405180830381600087803b15801561319c57600080fd5b505af19250505080156131cc575060408051601f3d908101601f191682019092526131c991810190614712565b60015b61320f576131d8614eb0565b806308c379a014156131fe57506131ed614ec7565b806131f85750613200565b5061320a565b505b3d6000803e3d6000fd5b613215565b50611784565b8061321f81614e69565b9150506130b8565b600081613236575060006108df565b7f0000000000000000000000000000000000000000000000000000000000000000600080613264858461101f565b9150915061327181613bb3565b60006132a6670de0b6b3a764000061329261209361328d613c06565b613d94565b61329c9086614da5565b6106859190614c71565b90506132b3838286613df9565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906132ff903090600401614a70565b60206040518083038186803b15801561331757600080fd5b505afa15801561332b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061334f9190614950565b94508585111561335d578594505b50505050919050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016133b89190614a70565b60206040518083038186803b1580156133d057600080fd5b505afa1580156133e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134089190614950565b90506134337f0000000000000000000000000000000000000000000000000000000000000000613e9e565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613482903090600401614a70565b60206040518083038186803b15801561349a57600080fd5b505afa1580156134ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134d29190614950565b90506134de8282614dc4565b945060006134f36106856120936102f4610f18565b6134fd9084614c59565b905086811115613522576135118782614dc4565b61351b9087614c59565b955061352f565b61352c8188614dc4565b94505b84861115613561576135418587614dc4565b9550600094508186111561355c576135598287614dc4565b93505b613572565b61356b8686614dc4565b9450600095505b5050509193909250565b600061358b6128728385614c59565b90508281111561114a575090919050565b600081156138b3576135ac6146b3565b82817f0000000000000000000000000000000000000000000000000000000000000000600381106135ed57634e487b7160e01b600052603260045260246000fd5b6020020152604051633883e11960e01b8152600090613698906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633883e11990613648908690600190600401614abb565b60206040518083038186803b15801561366057600080fd5b505afa158015613674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120939190614950565b90506000600f7f0000000000000000000000000000000000000000000000000000000000000000815481106136dd57634e487b7160e01b600052603260045260246000fd5b906000526020600020015460126136f49190614dc4565b6136ff90600a614cd7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561375857600080fd5b505afa15801561376c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137909190614950565b613798613c06565b6137a29088614da5565b6137ac9190614c71565b6137b69190614da5565b9050808211156137c35750805b6040516315b74c9d60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632b6e993a906138149086908590600190600401614ad8565b600060405180830381600087803b15801561382e57600080fd5b505af192505050801561383f575060015b6138af5761384b614eb0565b806308c379a014156131fe5750613860614ec7565b8061386b5750613200565b7f63299ad14374170063e6f2e5559417926f3a23da67eefa83fc2e9bf9f21e915c8160405161389a9190614afc565b60405180910390a160009450505050506108df565b5050505b506001919050565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061390a903090600401614a70565b60206040518083038186803b15801561392257600080fd5b505afa158015613936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061395a9190614950565b905080156109f35760405163b6b55f2560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f25906024015b600060405180830381600087803b1580156139c557600080fd5b505af11580156139d9573d6000803e3d6000fd5b5050505050565b606081600001805480602002602001604051908101604052809291908181526020018280548015613a3057602002820191906000526020600020905b815481526020019060010190808311613a1c575b50505050509050919050565b6040516370a0823160e01b815261155b906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613a8c903090600401614a70565b60206040518083038186803b158015613aa457600080fd5b505afa158015613ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613adc9190614950565b613bb3565b6000613b36826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166140d69092919063ffffffff16565b8051909150156117845780806020019051810190613b54919061491e565b6117845760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107a7565b80156109f357604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d906024016139ab565b600060055442613c169190614dc4565b600d54118015613c275750600c5415155b15613c355750600c54611883565b60008060005b7f0000000000000000000000000000000000000000000000000000000000000000811015613d2757600080613ce7600e8481548110613c8a57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600154600f80546001600160a01b03938416939092169187908110613ccb57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154600a613ce29190614cd7565b6140ef565b915091508015613d1257841580613cfd57508482105b15613d06578194505b81841015613d12578193505b50508080613d1f90614e69565b915050613c3b565b5081613d675760405162461bcd60e51b815260206004820152600f60248201526e6e6f2d6f7261636c652d726174657360881b60448201526064016107a7565b42600d5580613d7e83670de0b6b3a7640000614da5565b613d889190614c71565b600c8190559250505090565b6000670de0b6b3a7640000827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561089057600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663517a55a384613e32846128cd565b6040516001600160e01b031960e085901b1681526004810192909252600f0b60248201526044810185905260016064820152608401600060405180830381600087803b158015613e8157600080fd5b505af1158015613e95573d6000803e3d6000fd5b50505050505050565b613ea66142c6565b60005b60105481101561081b57600060108281548110613ed657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516370a0823160e01b81526001600160a01b03909116906370a0823190613f0f903090600401614a70565b60206040518083038186803b158015613f2757600080fd5b505afa158015613f3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f5f9190614950565b905080156140c3576000612710600754101561408057600080613fbe60108681548110613f9c57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001546001600160a01b039182169116866140ef565b60015491935091506000908190613fdf906001600160a01b031689866140ef565b91509150826140265760405162461bcd60e51b81526020600482015260136024820152727374616c652d7265776172642d6f7261636c6560681b60448201526064016107a7565b8061406d5760405162461bcd60e51b81526020600482015260176024820152767374616c652d636f6c6c61746572616c2d6f7261636c6560481b60448201526064016107a7565b61407982600754612ce9565b9450505050505b6140c1601084815481106140a457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316858484614346565b505b50806140ce81614e69565b915050613ea9565b60606140e584846000856144f1565b90505b9392505050565b60008060005b600480546040805163c2fba66760e01b815290516001600160a01b039092169263c2fba667928282019260209290829003018186803b15801561413757600080fd5b505afa15801561414b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061416f9190614950565b8110156142b557600454600554604080516001600160a01b038a811660208301528981168284015260608201899052608082019390935260a08082018690528251808303909101815260c08201909252600093849316916141dc9163b67bb24d60e01b919060e001614a23565b60408051601f19818403018152908290526141f691614a54565b6000604051808303816000865af19150503d8060008114614233576040519150601f19603f3d011682016040523d82523d6000602084013e614238565b606091505b509150915081156142a0576000808280602001905181019061425a9190614989565b50915091506005544261426d9190614dc4565b8111801561427a57508115155b1561428f57509450600193506142be92505050565b6000809650965050505050506142be565b505080806142ad90614e69565b9150506140f5565b50600080915091505b935093915050565b604051634274debf60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906384e9bd7e90614312903090600401614a70565b600060405180830381600087803b15801561432c57600080fd5b505af1158015614340573d6000803e3d6000fd5b50505050565b60048054604051631d1f307960e31b8152600092839283926001600160a01b039091169163e8f983c891614380918b918b918b9101614a84565b60006040518083038186803b15801561439857600080fd5b505afa1580156143ac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526143d491908101906147d4565b92509250925083600014156143e857600193505b8115613e955760048054604051636e74a6f760e01b81529182018390526001600160a01b031690636e74a6f79060240160206040518083038186803b15801561443057600080fd5b505afa158015614444573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144689190614712565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b815260040161449b959493929190614bf9565b600060405180830381600087803b1580156144b557600080fd5b505af11580156144c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261177e919081019061488d565b6060824710156145525760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107a7565b843b6145a05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107a7565b600080866001600160a01b031685876040516145bc9190614a54565b60006040518083038185875af1925050503d80600081146145f9576040519150601f19603f3d011682016040523d82523d6000602084013e6145fe565b606091505b509150915061460e828286614619565b979650505050505050565b606083156146285750816140e8565b8251156146385782518084602001fd5b8160405162461bcd60e51b81526004016107a79190614afc565b8280548282559060005260206000209081019282156146a7579160200282015b828111156146a757825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614672565b506129469291506146d1565b60405180606001604052806003906020820280368337509192915050565b5b8082111561294657600081556001016146d2565b805180151581146108df57600080fd5b600060208284031215614707578081fd5b81356140e881614f59565b600060208284031215614723578081fd5b81516140e881614f59565b60006020808385031215614740578182fd5b823567ffffffffffffffff811115614756578283fd5b8301601f81018513614766578283fd5b803561477181614c35565b60405161477e8282614e3c565b8281528481019150838501600584901b8501860189101561479d578687fd5b8694505b838510156147c85780356147b481614f59565b8352600194909401939185019185016147a1565b50979650505050505050565b6000806000606084860312156147e8578182fd5b835167ffffffffffffffff8111156147fe578283fd5b8401601f8101861361480e578283fd5b8051602061481b82614c35565b6040516148288282614e3c565b8381528281019150848301600585901b860184018b1015614847578788fd5b8795505b8486101561487257805161485e81614f59565b83526001959095019491830191830161484b565b50918801516040909801519199979850909695505050505050565b6000602080838503121561489f578182fd5b825167ffffffffffffffff8111156148b5578283fd5b8301601f810185136148c5578283fd5b80516148d081614c35565b6040516148dd8282614e3c565b8281528481019150838501600584901b850186018910156148fc578687fd5b8694505b838510156147c8578051835260019490940193918501918501614900565b60006020828403121561492f578081fd5b611147826146e6565b600060208284031215614949578081fd5b5035919050565b600060208284031215614961578081fd5b5051919050565b6000806040838503121561497a578182fd5b50508035926020909101359150565b60008060006060848603121561499d578283fd5b83519250602084015191506149b4604085016146e6565b90509250925092565b6000815180845260208085019450808401835b838110156149f55781516001600160a01b0316875295820195908201906001016149d0565b509495945050505050565b8060005b6003811015614340578151845260209384019390910190600101614a04565b6001600160e01b0319831681528151600090614a46816004850160208701614ddb565b919091016004019392505050565b60008251614a66818460208701614ddb565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020825261114760208301846149bd565b60808101614ac98285614a00565b82151560608301529392505050565b60a08101614ae68286614a00565b8360608301528215156080830152949350505050565b6000602082528251806020840152614b1b816040850160208701614ddb565b601f01601f19169190910160400192915050565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b602080825260169082015275696e76616c69642d736c6970706167652d76616c756560501b604082015260600190565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b600086825285602083015260a06040830152614c1860a08301866149bd565b6001600160a01b0394909416606083015250608001529392505050565b600067ffffffffffffffff821115614c4f57614c4f614e9a565b5060051b60200190565b60008219821115614c6c57614c6c614e84565b500190565b600082614c8c57634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611614ca35750614cce565b818704821115614cb557614cb5614e84565b80861615614cc257918102915b9490941c938002614c94565b94509492505050565b60006111476000198484600082614cf0575060016140e8565b81614cfd575060006140e8565b8160018114614d135760028114614d1d57614d4a565b60019150506140e8565b60ff841115614d2e57614d2e614e84565b6001841b915084821115614d4457614d44614e84565b506140e8565b5060208310610133831016604e8410600b8410161715614d7d575081810a83811115614d7857614d78614e84565b6140e8565b614d8a8484846001614c91565b808604821115614d9c57614d9c614e84565b02949350505050565b6000816000190483118215151615614dbf57614dbf614e84565b500290565b600082821015614dd657614dd6614e84565b500390565b60005b83811015614df6578181015183820152602001614dde565b838111156143405750506000910152565b600181811c90821680614e1b57607f821691505b60208210811415612c6b57634e487b7160e01b600052602260045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715614e6257614e62614e9a565b6040525050565b6000600019821415614e7d57614e7d614e84565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561188357600481823e5160e01c90565b600060443d1015614ed757611883565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715614f09575050505050611883565b8285019150815181811115614f2357505050505050611883565b843d8701016020828501011115614f3f57505050505050611883565b614f4e60208286010187614e3c565b509094505050505090565b6001600160a01b03811681146109f357600080fdfea264697066735822122022646870795c5c1f643316c2b98f3818b4c65eb0909fe51f070b651dc2fd099864736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken()": {
        "details": "Approve all required tokens"
      },
      "claimableRewardsInCollateral()": {
        "details": "Claimable rewards estimated into pool's collateral value"
      },
      "convertFrom18(uint256)": {
        "details": "Convert from 18 decimals to token defined decimals."
      },
      "isReservedToken(address)": {
        "details": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "details": "Rebalance profit, loss and investment of this strategy"
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "setRewardTokens(address[])": {
        "details": "Rewards token in gauge can be updated any time. Governor can set reward tokens Different version of gauge has different method to read reward tokens better governor set it"
      },
      "sweepERC20(address)": {
        "details": "sweep given token to feeCollector of strategy",
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "totalValue()": {
        "details": "Report total value in collateral token"
      },
      "totalValueCurrent()": {
        "details": "Report total value in collateral token"
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapManager(address)": {
        "params": {
          "_swapManager": "swap manager address"
        }
      },
      "withdraw(uint256)": {
        "details": "Withdraw collateral token from lending pool.",
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "title": "This strategy will deposit collateral token in Curve Aave 3Pool and earn interest.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "token()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "totalValue()": {
        "notice": "Calculate total value of asset under management"
      },
      "totalValueCurrent()": {
        "notice": "Calculate total value of asset under management (in real-time)"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapManager(address)": {
        "notice": "Update swap manager address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 31833,
        "contract": "contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol:CrvA3PoolAvaxStrategy",
        "label": "CRV",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15117,
        "contract": "contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol:CrvA3PoolAvaxStrategy",
        "label": "WETH",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 15122,
        "contract": "contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol:CrvA3PoolAvaxStrategy",
        "label": "receiptToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 15128,
        "contract": "contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol:CrvA3PoolAvaxStrategy",
        "label": "feeCollector",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 15131,
        "contract": "contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol:CrvA3PoolAvaxStrategy",
        "label": "swapManager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ISwapManager)5430"
      },
      {
        "astId": 15134,
        "contract": "contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol:CrvA3PoolAvaxStrategy",
        "label": "oraclePeriod",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 15137,
        "contract": "contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol:CrvA3PoolAvaxStrategy",
        "label": "oracleRouterIdx",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 15140,
        "contract": "contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol:CrvA3PoolAvaxStrategy",
        "label": "swapSlippage",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 15143,
        "contract": "contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol:CrvA3PoolAvaxStrategy",
        "label": "_keepers",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(AddressSet)4399_storage"
      },
      {
        "astId": 32250,
        "contract": "contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol:CrvA3PoolAvaxStrategy",
        "label": "NAME",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 32257,
        "contract": "contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol:CrvA3PoolAvaxStrategy",
        "label": "reservedToken",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 32261,
        "contract": "contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol:CrvA3PoolAvaxStrategy",
        "label": "usdRate",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 32263,
        "contract": "contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol:CrvA3PoolAvaxStrategy",
        "label": "usdRateTimestamp",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 32266,
        "contract": "contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol:CrvA3PoolAvaxStrategy",
        "label": "coins",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 32269,
        "contract": "contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol:CrvA3PoolAvaxStrategy",
        "label": "coinDecimals",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 32272,
        "contract": "contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol:CrvA3PoolAvaxStrategy",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 32274,
        "contract": "contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol:CrvA3PoolAvaxStrategy",
        "label": "depositError",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 32277,
        "contract": "contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol:CrvA3PoolAvaxStrategy",
        "label": "crvSlippage",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 32279,
        "contract": "contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol:CrvA3PoolAvaxStrategy",
        "label": "decimalConversionFactor",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISwapManager)5430": {
        "encoding": "inplace",
        "label": "contract ISwapManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)4399_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4398,
            "contract": "contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol:CrvA3PoolAvaxStrategy",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4098_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4098_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4093,
            "contract": "contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol:CrvA3PoolAvaxStrategy",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4097,
            "contract": "contracts/strategies/curve/a3Pool/CrvA3PoolAvaxStrategy.sol:CrvA3PoolAvaxStrategy",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}