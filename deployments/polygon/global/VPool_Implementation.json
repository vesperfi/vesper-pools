{
  "address": "0x1f3Ab4B286C393694F013260eBa1048e09EE7b77",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Open",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Shutdown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strategyDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "UniversalFeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedGovernor",
          "type": "address"
        }
      ],
      "name": "UpdatedGovernor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxProfitAsFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxProfitAsFee",
          "type": "uint256"
        }
      ],
      "name": "UpdatedMaximumProfitAsFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDepositLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDepositLimit",
          "type": "uint256"
        }
      ],
      "name": "UpdatedMinimumDepositLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousPoolRewards",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPoolRewards",
          "type": "address"
        }
      ],
      "name": "UpdatedPoolRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldUniversalFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newUniversalFee",
          "type": "uint256"
        }
      ],
      "name": "UpdatedUniversalFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousWithdrawFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newWithdrawFee",
          "type": "uint256"
        }
      ],
      "name": "UpdatedWithdrawFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_maintainerAddress",
          "type": "address"
        }
      ],
      "name": "addMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "availableCreditLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateMintage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        }
      ],
      "name": "calculateUniversalFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositAndClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "excessDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStrategies",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWithdrawQueue",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_poolAccountant",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isKeeper",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isMaintainer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maintainers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxProfitAsFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_old",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_new",
          "type": "address"
        }
      ],
      "name": "migrateStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDepositLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "multiTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "open",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolAccountant",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_maintainerAddress",
          "type": "address"
        }
      ],
      "name": "removeMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payback",
          "type": "uint256"
        }
      ],
      "name": "reportEarning",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        }
      ],
      "name": "reportLoss",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shutdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopEverything",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "strategy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_interestFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debtRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastRebalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalLoss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalProfit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debtRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_externalDepositFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensHere",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "totalDebtOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proposedGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "universalFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMaxProfitAsFee",
          "type": "uint256"
        }
      ],
      "name": "updateMaximumProfitAsFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newLimit",
          "type": "uint256"
        }
      ],
      "name": "updateMinimumDepositLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newPoolRewards",
          "type": "address"
        }
      ],
      "name": "updatePoolRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newUniversalFee",
          "type": "uint256"
        }
      ],
      "name": "updateUniversalFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "withdrawAndClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc2597a93a77388318ce6a94bad5b9c40bdf31d301adc5c253d59dc4cec8b77b2",
  "receipt": {
    "to": null,
    "from": "0xdf826ff6518e609E4cEE86299d40611C148099d5",
    "contractAddress": "0x1f3Ab4B286C393694F013260eBa1048e09EE7b77",
    "transactionIndex": 17,
    "gasUsed": "4107426",
    "logsBloom": "0x10000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000008000400000000000800000000000000080000000000400000000000000800000000000000000000100000000000000000000020000000000000000000800000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000080000200000000002000000000000008000000004000000000000000000000000004000100000000000000001000000000000000000000000000000100000000020000000000000000000000000008000000000000000000000000000000000100000",
    "blockHash": "0x6cb4cf528585d9743139cf1373afceeb522e6542d483cbd7c89fd2a862333c48",
    "transactionHash": "0xc2597a93a77388318ce6a94bad5b9c40bdf31d301adc5c253d59dc4cec8b77b2",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 28273412,
        "transactionHash": "0xc2597a93a77388318ce6a94bad5b9c40bdf31d301adc5c253d59dc4cec8b77b2",
        "address": "0x1f3Ab4B286C393694F013260eBa1048e09EE7b77",
        "topics": [
          "0xd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000df826ff6518e609e4cee86299d40611c148099d5"
        ],
        "data": "0x",
        "logIndex": 51,
        "blockHash": "0x6cb4cf528585d9743139cf1373afceeb522e6542d483cbd7c89fd2a862333c48"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 28273412,
        "transactionHash": "0xc2597a93a77388318ce6a94bad5b9c40bdf31d301adc5c253d59dc4cec8b77b2",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000df826ff6518e609e4cee86299d40611c148099d5",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x000000000000000000000000000000000000000000000000031c6bd5ac0f87500000000000000000000000000000000000000000000000016b24ed00a504389e0000000000000000000000000000000000000000000001d537434a3ff956d41f0000000000000000000000000000000000000000000000016808812af8f4b14e0000000000000000000000000000000000000000000001d53a5fb615a5665b6f",
        "logIndex": 52,
        "blockHash": "0x6cb4cf528585d9743139cf1373afceeb522e6542d483cbd7c89fd2a862333c48"
      }
    ],
    "blockNumber": 28273412,
    "cumulativeGasUsed": "5748938",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "vUSDC Pool",
    "vUSDC",
    "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
  ],
  "numDeployments": 1,
  "solcInputHash": "3da0a4056105c269fb16927bb06ce62e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategyDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"UniversalFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\"}],\"name\":\"UpdatedGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxProfitAsFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxProfitAsFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaximumProfitAsFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDepositLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDepositLimit\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinimumDepositLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousPoolRewards\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPoolRewards\",\"type\":\"address\"}],\"name\":\"UpdatedPoolRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldUniversalFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newUniversalFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedUniversalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousWithdrawFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedWithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maintainerAddress\",\"type\":\"address\"}],\"name\":\"addMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"availableCreditLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateMintage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"}],\"name\":\"calculateUniversalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"excessDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawQueue\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolAccountant\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isMaintainer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintainers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxProfitAsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"migrateStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDepositLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAccountant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maintainerAddress\",\"type\":\"address\"}],\"name\":\"removeMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payback\",\"type\":\"uint256\"}],\"name\":\"reportEarning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"}],\"name\":\"reportLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopEverything\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_interestFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debtRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastRebalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalLoss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debtRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_externalDepositFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensHere\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"totalDebtOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"universalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxProfitAsFee\",\"type\":\"uint256\"}],\"name\":\"updateMaximumProfitAsFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"updateMinimumDepositLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPoolRewards\",\"type\":\"address\"}],\"name\":\"updatePoolRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newUniversalFee\",\"type\":\"uint256\"}],\"name\":\"updateUniversalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdrawAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"acceptGovernorship()\":{\"details\":\"Allows new governor to accept governorship of the contract.\"},\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"addMaintainer(address)\":{\"params\":{\"_maintainerAddress\":\"maintainer address to add.\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"availableCreditLimit(address)\":{\"details\":\"Available credit limit is calculated based on current debt of pool and strategy, current debt limit of pool and strategy. credit available = min(pool's debt limit, strategy's debt limit, max debt per rebalance) when some strategy do not pay back outstanding debt, this impact credit line of other strategy if totalDebt of pool >= debtLimit of pool\",\"params\":{\"_strategy\":\"Strategy address\"}},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"calculateMintage(uint256)\":{\"details\":\"Amount should be >= minimum deposit limit which default to 1\",\"params\":{\"_amount\":\"Collateral amount\"},\"returns\":{\"_shares\":\"Amount of share that user will get\"}},\"calculateUniversalFee(uint256)\":{\"details\":\"Earn strategies will call this during rebalance.\"},\"decimals()\":{\"details\":\"Returns the decimals of the token. default to 18\"},\"deposit(uint256)\":{\"params\":{\"_amount\":\"ERC20 token amount.\"}},\"depositAndClaim(uint256)\":{\"params\":{\"_amount\":\"ERC20 token amount.\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"_amount\":\"ERC20 token amount.\",\"_deadline\":\"The time at which signature will expire\",\"_r\":\"Half of the ECDSA signature pair\",\"_s\":\"Half of the ECDSA signature pair\",\"_v\":\"The recovery byte of the signature\"}},\"excessDebt(address)\":{\"params\":{\"_strategy\":\"Address of strategy\"}},\"initialize(string,string,address,address)\":{\"details\":\"Equivalent to constructor for proxy. It can be called only once per proxy.\"},\"migrateStrategy(address,address)\":{\"details\":\"Migrating strategy aka old and new strategy should be of same type.\",\"params\":{\"_new\":\"Address of new strategy\",\"_old\":\"Address of strategy being migrated\"}},\"multiTransfer(address[],uint256[])\":{\"details\":\"Address array and amount array are 1:1 and are in order.\",\"params\":{\"_amounts\":\"array of token amounts\",\"_recipients\":\"array of recipient addresses\"},\"returns\":{\"_0\":\"true/false\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"pricePerShare()\":{\"details\":\"Return value will be in token defined decimals.\"},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"removeMaintainer(address)\":{\"params\":{\"_maintainerAddress\":\"maintainer address to remove.\"}},\"reportEarning(uint256,uint256,uint256)\":{\"params\":{\"_loss\":\"Reduce debt ,also reduce debtRatio, increase loss in record.\",\"_payback\":\"strategy willing to payback outstanding above debtLimit. no performance fee on this amount.  when governance has reduced debtRatio of strategy, strategy will report profit and payback amount separately.\",\"_profit\":\"yield generated by strategy. Strategy get performance fee on this amount\"}},\"reportLoss(uint256)\":{\"details\":\"Some strategies pay deposit fee thus realizing loss at deposit. For example: Curve's 3pool has some slippage due to deposit of one asset in 3pool. Strategy may want report this loss instead of waiting for next rebalance.\",\"params\":{\"_loss\":\"Loss that strategy want to report\"}},\"sweepERC20(address)\":{\"details\":\"Transfer given ERC20 token to governor\",\"params\":{\"_fromToken\":\"Token address to sweep\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"tokensHere()\":{\"details\":\"Returns the token stored in the pool. It will be in token defined decimals.\"},\"totalDebtOf(address)\":{\"params\":{\"_strategy\":\"Strategy address\"}},\"totalSupply()\":{\"details\":\"Returns total supply of the token.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferGovernorship(address)\":{\"details\":\"Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner.\"},\"updateMaximumProfitAsFee(uint256)\":{\"params\":{\"_newMaxProfitAsFee\":\"New max profit as fee\"}},\"updateMinimumDepositLimit(uint256)\":{\"params\":{\"_newLimit\":\"New minimum deposit limit\"}},\"updatePoolRewards(address)\":{\"params\":{\"_newPoolRewards\":\"new pool rewards address\"}},\"updateUniversalFee(uint256)\":{\"details\":\"Format: 1500 = 15% fee, 100 = 1%\",\"params\":{\"_newUniversalFee\":\"new universal fee\"}},\"withdraw(uint256)\":{\"params\":{\"_shares\":\"Pool shares. It will be in 18 decimals.\"}},\"withdrawAndClaim(uint256)\":{\"params\":{\"_shares\":\"Pool shares. It will be in 18 decimals.\"}}},\"title\":\"Holding pool share token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"addMaintainer(address)\":{\"notice\":\"Add given address in maintainers list.\"},\"availableCreditLimit(address)\":{\"notice\":\"Get available credit limit of strategy. This is the amount strategy can borrow from pool\"},\"calculateMintage(uint256)\":{\"notice\":\"Calculate how much shares user will get for given amount. Also return externalDepositFee if any.\"},\"calculateUniversalFee(uint256)\":{\"notice\":\"Calculate universal fee for calling strategy. This is only strategy function.\"},\"deposit(uint256)\":{\"notice\":\"Deposit ERC20 tokens and receive pool shares depending on the current share price.\"},\"depositAndClaim(uint256)\":{\"notice\":\"Deposit ERC20 tokens and claim rewards if any\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit ERC20 tokens with permit aka gasless approval.\"},\"excessDebt(address)\":{\"notice\":\"Debt above current debt limit\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"maintainers()\":{\"notice\":\"Return list of maintainers\"},\"maxProfitAsFee()\":{\"notice\":\"Maximum percentage of profit that can be counted as universal fee. Default to 50%\"},\"migrateStrategy(address,address)\":{\"notice\":\"Migrate existing strategy to new strategy.\"},\"minDepositLimit()\":{\"notice\":\"Minimum deposit limit.\"},\"multiTransfer(address[],uint256[])\":{\"notice\":\"Transfer tokens to multiple recipient\"},\"poolAccountant()\":{\"notice\":\"PoolAccountant address\"},\"poolRewards()\":{\"notice\":\"PoolRewards contract address\"},\"pricePerShare()\":{\"notice\":\"Get price per share\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"removeMaintainer(address)\":{\"notice\":\"Remove given address from maintainers list.\"},\"reportEarning(uint256,uint256,uint256)\":{\"notice\":\"Strategy call this in regular interval. Only strategy function.\"},\"reportLoss(uint256)\":{\"notice\":\"Report loss outside of rebalance activity.\"},\"setup()\":{\"notice\":\"OnlyGovernor:: Helper function for V5 upgrade\"},\"token()\":{\"notice\":\"Collateral token address\"},\"totalDebt()\":{\"notice\":\"Get total debt of pool\"},\"totalDebtOf(address)\":{\"notice\":\"Get total debt of given strategy\"},\"totalDebtRatio()\":{\"notice\":\"Get total debt ratio. Total debt ratio helps us keep buffer in pool\"},\"totalValue()\":{\"notice\":\"Returns sum of token locked in other contracts and token stored in the pool. It will be in token defined decimals.\"},\"universalFee()\":{\"notice\":\"Universal fee of this pool. Default to 2%\"},\"updateMaximumProfitAsFee(uint256)\":{\"notice\":\"Only Governor:: Update maximum profit that can be used as universal fee\"},\"updateMinimumDepositLimit(uint256)\":{\"notice\":\"Only Governor:: Update minimum deposit limit\"},\"updatePoolRewards(address)\":{\"notice\":\"Update pool rewards address for this pool\"},\"updateUniversalFee(uint256)\":{\"notice\":\"Update universal fee for this pool\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw collateral based on given shares and the current share price. Burn remaining shares and return collateral.\"},\"withdrawAndClaim(uint256)\":{\"notice\":\"Withdraw collateral and claim rewards if any\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pool/VPool.sol\":\"VPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/// @title Errors library\\nlibrary Errors {\\n    string public constant INVALID_COLLATERAL_AMOUNT = \\\"1\\\"; // Collateral must be greater than 0 or > defined limit\\n    string public constant INVALID_SHARE_AMOUNT = \\\"2\\\"; // Share must be greater than 0\\n    string public constant INVALID_INPUT_LENGTH = \\\"3\\\"; // Input array length must be greater than 0\\n    string public constant INPUT_LENGTH_MISMATCH = \\\"4\\\"; // Input array length mismatch with another array length\\n    string public constant NOT_WHITELISTED_ADDRESS = \\\"5\\\"; // Caller is not whitelisted to withdraw without fee\\n    string public constant MULTI_TRANSFER_FAILED = \\\"6\\\"; // Multi transfer of tokens has failed\\n    string public constant FEE_COLLECTOR_NOT_SET = \\\"7\\\"; // Fee Collector is not set\\n    string public constant NOT_ALLOWED_TO_SWEEP = \\\"8\\\"; // Token is not allowed to sweep\\n    string public constant INSUFFICIENT_BALANCE = \\\"9\\\"; // Insufficient balance to performs operations to follow\\n    string public constant INPUT_ADDRESS_IS_ZERO = \\\"10\\\"; // Input address is zero\\n    string public constant FEE_LIMIT_REACHED = \\\"11\\\"; // Fee must be less than MAX_BPS\\n    string public constant ALREADY_INITIALIZED = \\\"12\\\"; // Data structure, contract, or logic already initialized and can not be called again\\n    string public constant ADD_IN_LIST_FAILED = \\\"13\\\"; // Cannot add address in address list\\n    string public constant REMOVE_FROM_LIST_FAILED = \\\"14\\\"; // Cannot remove address from address list\\n    string public constant STRATEGY_IS_ACTIVE = \\\"15\\\"; // Strategy is already active, an inactive strategy is required\\n    string public constant STRATEGY_IS_NOT_ACTIVE = \\\"16\\\"; // Strategy is not active, an active strategy is required\\n    string public constant INVALID_STRATEGY = \\\"17\\\"; // Given strategy is not a strategy of this pool\\n    string public constant DEBT_RATIO_LIMIT_REACHED = \\\"18\\\"; // Debt ratio limit reached. It must be less than MAX_BPS\\n    string public constant TOTAL_DEBT_IS_NOT_ZERO = \\\"19\\\"; // Strategy total debt must be 0\\n    string public constant LOSS_TOO_HIGH = \\\"20\\\"; // Strategy reported loss must be less than current debt\\n    string public constant INVALID_MAX_BORROW_LIMIT = \\\"21\\\"; // Max borrow limit is beyond range.\\n    string public constant MAX_LIMIT_LESS_THAN_MIN = \\\"22\\\"; // Max limit should be greater than min limit.\\n    string public constant INVALID_SLIPPAGE = \\\"23\\\"; // Slippage should be less than MAX_BPS\\n    string public constant WRONG_RECEIPT_TOKEN = \\\"24\\\"; // Wrong receipt token address\\n    string public constant AAVE_FLASH_LOAN_NOT_ACTIVE = \\\"25\\\"; // aave flash loan is not active\\n    string public constant DYDX_FLASH_LOAN_NOT_ACTIVE = \\\"26\\\"; // DYDX flash loan is not active\\n    string public constant INVALID_FLASH_LOAN = \\\"27\\\"; // invalid-flash-loan\\n    string public constant INVALID_INITIATOR = \\\"28\\\"; // \\\"invalid-initiator\\\"\\n    string public constant INCORRECT_WITHDRAW_AMOUNT = \\\"29\\\"; // withdrawn amount is not correct\\n    string public constant NO_MARKET_ID_FOUND = \\\"30\\\"; // dydx flash loan no marketId found for token\\n    string public constant SAME_AS_PREVIOUS = \\\"31\\\"; // Input should not be same as previous value.\\n    string public constant INVALID_INPUT = \\\"32\\\"; // Generic invalid input error code\\n}\\n\",\"keccak256\":\"0x96be83cb172a1efef0ff9771392f0b1d192a680fb2b36b061efbd49177afb947\",\"license\":\"MIT\"},\"contracts/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"./dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./interfaces/vesper/IGovernable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (governor) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the governor account will be the one that deploys the contract. This\\n * can later be changed with {transferGovernorship}.\\n *\\n */\\nabstract contract Governable is IGovernable, Context, Initializable {\\n    address public governor;\\n    address private proposedGovernor;\\n\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial governor.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev If inheriting child is using proxy then child contract can use\\n     * __Governable_init() function to initialization this contract\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Governable_init() internal initializer {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(governor == _msgSender(), \\\"not-governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\\n        require(_proposedGovernor != address(0), \\\"proposed-governor-is-zero\\\");\\n        proposedGovernor = _proposedGovernor;\\n    }\\n\\n    /**\\n     * @dev Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        require(proposedGovernor == _msgSender(), \\\"not-the-proposed-governor\\\");\\n        emit UpdatedGovernor(governor, proposedGovernor);\\n        governor = proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0xea102a8276ba35ab2bb62e8a343589de47cee0478fbf10d40e6be3012901660b\",\"license\":\"MIT\"},\"contracts/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./interfaces/vesper/IPausable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n */\\nabstract contract Pausable is IPausable, Context {\\n    event Paused(address account);\\n    event Shutdown(address account);\\n    event Unpaused(address account);\\n    event Open(address account);\\n\\n    bool public paused;\\n    bool public stopEverything;\\n\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"paused\\\");\\n        _;\\n    }\\n    modifier whenPaused() {\\n        require(paused, \\\"not-paused\\\");\\n        _;\\n    }\\n\\n    modifier whenNotShutdown() {\\n        require(!stopEverything, \\\"shutdown\\\");\\n        _;\\n    }\\n\\n    modifier whenShutdown() {\\n        require(stopEverything, \\\"not-shutdown\\\");\\n        _;\\n    }\\n\\n    /// @dev Pause contract operations, if contract is not paused.\\n    function _pause() internal virtual whenNotPaused {\\n        paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /// @dev Unpause contract operations, allow only if contract is paused and not shutdown.\\n    function _unpause() internal virtual whenPaused whenNotShutdown {\\n        paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /// @dev Shutdown contract operations, if not already shutdown.\\n    function _shutdown() internal virtual whenNotShutdown {\\n        stopEverything = true;\\n        paused = true;\\n        emit Shutdown(_msgSender());\\n    }\\n\\n    /// @dev Open contract operations, if contract is in shutdown state\\n    function _open() internal virtual whenShutdown {\\n        stopEverything = false;\\n        emit Open(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb36aece831dffc122d1a4f217e26f473e95fda688dca9f7ba23eb35b5f565d13\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd9ed084a02c5daa5bef324379ef57ebb3c930acec091a521083152e8291c95ac\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n        } else if (signature.length == 64) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let vs := mload(add(signature, 0x40))\\n                r := mload(add(signature, 0x20))\\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n                v := add(shr(255, vs), 27)\\n            }\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x2b7a01bbc90040fd4a48bc143ac5a192da3b9bfc559ac08a78eaca40bf49e436\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Pausable interface\\n */\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function shutdown() external;\\n\\n    function open() external;\\n}\\n\",\"keccak256\":\"0x22ea4d5c268f55d0839ec0140fef79a8849508c33106c63e57e967e301bf4f68\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IPoolAccountant.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPoolAccountant {\\n    function decreaseDebt(address _strategy, uint256 _decreaseBy) external;\\n\\n    function migrateStrategy(address _old, address _new) external;\\n\\n    function reportEarning(\\n        address _strategy,\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external returns (uint256 _actualPayback, uint256 _creditLine);\\n\\n    function reportLoss(address _strategy, uint256 _loss) external;\\n\\n    function availableCreditLimit(address _strategy) external view returns (uint256);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function getStrategies() external view returns (address[] memory);\\n\\n    function getWithdrawQueue() external view returns (address[] memory);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function externalDepositFee() external view returns (uint256);\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalDebtRatio() external view returns (uint256);\\n\\n    // V5 upgrade function\\n    function setup() external;\\n}\\n\",\"keccak256\":\"0x2875b6098ad1ae1ac0e75f27a1cc3970efdd4d31e41266699f30c88fab163263\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IPoolRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPoolRewards {\\n    /// Emitted after reward added\\n    event RewardAdded(address indexed rewardToken, uint256 reward, uint256 rewardDuration);\\n    /// Emitted whenever any user claim rewards\\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\\n    /// Emitted after adding new rewards token into rewardTokens array\\n    event RewardTokenAdded(address indexed rewardToken, address[] existingRewardTokens);\\n\\n    function claimReward(address) external;\\n\\n    function notifyRewardAmount(\\n        address _rewardToken,\\n        uint256 _rewardAmount,\\n        uint256 _rewardDuration\\n    ) external;\\n\\n    function notifyRewardAmount(\\n        address[] memory _rewardTokens,\\n        uint256[] memory _rewardAmounts,\\n        uint256[] memory _rewardDurations\\n    ) external;\\n\\n    function updateReward(address) external;\\n\\n    function claimable(address _account)\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts);\\n\\n    function lastTimeRewardApplicable(address _rewardToken) external view returns (uint256);\\n\\n    function rewardForDuration()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration);\\n\\n    function rewardPerToken()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate);\\n}\\n\",\"keccak256\":\"0x44ded14cb0ced3f4f72286454c8f950480731f2b46d275b49172fc17ad9ad3c4\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStrategy {\\n    function rebalance() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalValueCurrent() external returns (uint256);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x45b007a39e3361fcc148692762735cb11489305b8016c1b9e05d79fbb5c9bc60\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\n\\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\\n    function calculateUniversalFee(uint256 _profit) external view returns (uint256 _fee);\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function poolRewards() external view returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address _address) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address _address) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa0912bb18aaa205e2ea7e59247f3b4cd863ccd33c25ed9459bdcc1635d15b833\",\"license\":\"MIT\"},\"contracts/pool/PoolERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\n\\n// solhint-disable reason-string, no-empty-blocks\\n///@title Pool ERC20 to use with proxy. Inspired by OpenZeppelin ERC20\\nabstract contract PoolERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol} for proxy\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __ERC20_init(string memory name_, string memory symbol_) internal {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the decimals of the token. default to 18\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev Returns total supply of the token.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev  Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x103c35f22cf9bccdb6d472ffbf03b07e66ac242b80a5d0ef2fd38621d728ed4a\",\"license\":\"MIT\"},\"contracts/pool/PoolERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./PoolERC20.sol\\\";\\n\\n///@title Pool ERC20 Permit to use with proxy. Inspired by OpenZeppelin ERC20Permit\\n// solhint-disable var-name-mixedcase\\nabstract contract PoolERC20Permit is PoolERC20, IERC20Permit {\\n    bytes32 private constant _EIP712_VERSION = keccak256(bytes(\\\"1\\\"));\\n    bytes32 private constant _EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    bytes32 private _CACHED_DOMAIN_SEPARATOR;\\n    bytes32 private _HASHED_NAME;\\n    uint256 private _CACHED_CHAIN_ID;\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    mapping(address => uint256) public override nonces;\\n\\n    /**\\n     * @dev Initializes the domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __ERC20Permit_init(string memory name_) internal {\\n        _HASHED_NAME = keccak256(bytes(name_));\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(_EIP712_DOMAIN_TYPEHASH, _HASHED_NAME, _EIP712_VERSION);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n        uint256 _currentNonce = nonces[owner];\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _currentNonce, deadline));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n        nonces[owner] = _currentNonce + 1;\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() private view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_EIP712_DOMAIN_TYPEHASH, _HASHED_NAME, _EIP712_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 name,\\n        bytes32 version\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, name, version, block.chainid, address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0x2e7ca45dbaca700c7c715a25c0b26b2f79018bbefd9391b7e58a9b41e9d63c21\",\"license\":\"MIT\"},\"contracts/pool/PoolStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\n\\nabstract contract PoolStorageV1 is IVesperPool {\\n    ///@notice Collateral token address\\n    IERC20 public token;\\n    /// @notice PoolAccountant address\\n    address public poolAccountant;\\n    /// @notice PoolRewards contract address\\n    address public poolRewards;\\n    address private feeWhitelistObsolete; // Obsolete in favor of AddressSet of feeWhitelist\\n    address private keepersObsolete; // Obsolete in favor of AddressSet of keepers\\n    address private maintainersObsolete; // Obsolete in favor of AddressSet of maintainers\\n    address private feeCollectorObsolete; // Fee collector address. Obsolete as there is no fee to collect\\n    uint256 private withdrawFeeObsolete; // Withdraw fee for this pool. Obsolete in favor of universal fee\\n    uint256 private decimalConversionFactorObsolete; // It can be used in converting value to/from 18 decimals\\n    bool internal withdrawInETH; // This flag will be used by VETH pool as switch to withdraw ETH or WETH\\n}\\n\\nabstract contract PoolStorageV2 is PoolStorageV1 {\\n    EnumerableSet.AddressSet private _feeWhitelistObsolete; // Obsolete in favor of universal fee\\n    EnumerableSet.AddressSet internal _keepers; // List of keeper addresses\\n    EnumerableSet.AddressSet internal _maintainers; // List of maintainer addresses\\n}\\n\\nabstract contract PoolStorageV3 is PoolStorageV2 {\\n    /// @notice Universal fee of this pool. Default to 2%\\n    uint256 public universalFee = 200;\\n    /// @notice Maximum percentage of profit that can be counted as universal fee. Default to 50%\\n    uint256 public maxProfitAsFee = 5_000;\\n    /// @notice Minimum deposit limit.\\n    /// @dev Do not set it to 0 as deposit() is checking if amount >= limit\\n    uint256 public minDepositLimit = 1;\\n}\\n\",\"keccak256\":\"0xf9512d298fcf68915a1da8d1c1bed635d6b2ac855fc92e1fbf71ac45e942573b\",\"license\":\"MIT\"},\"contracts/pool/VPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./PoolERC20Permit.sol\\\";\\nimport \\\"./PoolStorage.sol\\\";\\nimport \\\"../Errors.sol\\\";\\nimport \\\"../Governable.sol\\\";\\nimport \\\"../Pausable.sol\\\";\\nimport \\\"../interfaces/vesper/IPoolAccountant.sol\\\";\\nimport \\\"../interfaces/vesper/IPoolRewards.sol\\\";\\nimport \\\"../interfaces/vesper/IStrategy.sol\\\";\\n\\n/// @title Holding pool share token\\n// solhint-disable no-empty-blocks\\ncontract VPool is Initializable, PoolERC20Permit, Governable, Pausable, ReentrancyGuard, PoolStorageV3 {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    string public constant VERSION = \\\"5.0.0\\\";\\n\\n    uint256 public constant MAX_BPS = 10_000;\\n    // For simplicity we are assuming 365 days as 1 year\\n    uint256 public constant ONE_YEAR = 365 days;\\n\\n    event UpdatedMaximumProfitAsFee(uint256 oldMaxProfitAsFee, uint256 newMaxProfitAsFee);\\n    event UpdatedMinimumDepositLimit(uint256 oldDepositLimit, uint256 newDepositLimit);\\n    event Deposit(address indexed owner, uint256 shares, uint256 amount);\\n    event Withdraw(address indexed owner, uint256 shares, uint256 amount);\\n    event UpdatedUniversalFee(uint256 oldUniversalFee, uint256 newUniversalFee);\\n    event UpdatedPoolRewards(address indexed previousPoolRewards, address indexed newPoolRewards);\\n    event UpdatedWithdrawFee(uint256 previousWithdrawFee, uint256 newWithdrawFee);\\n    event UniversalFeePaid(uint256 strategyDebt, uint256 profit, uint256 fee);\\n\\n    // We are using constructor to initialize implementation with basic details\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _token\\n    ) PoolERC20(_name, _symbol) {\\n        // 0x0 is acceptable as has no effect on functionality\\n        token = IERC20(_token);\\n    }\\n\\n    /// @dev Equivalent to constructor for proxy. It can be called only once per proxy.\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        address _token,\\n        address _poolAccountant\\n    ) public initializer {\\n        require(_token != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\\n        require(_poolAccountant != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\\n        __ERC20_init(_name, _symbol);\\n        __ERC20Permit_init(_name);\\n        __Governable_init();\\n        token = IERC20(_token);\\n\\n        require(_keepers.add(_msgSender()), Errors.ADD_IN_LIST_FAILED);\\n        require(_maintainers.add(_msgSender()), Errors.ADD_IN_LIST_FAILED);\\n        poolAccountant = _poolAccountant;\\n        universalFee = 200; // 2%\\n        maxProfitAsFee = 5_000; // 50%\\n        minDepositLimit = 1;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(governor == _msgSender() || _keepers.contains(_msgSender()), \\\"not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyMaintainer() {\\n        require(governor == _msgSender() || _maintainers.contains(_msgSender()), \\\"not-a-maintainer\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Deposit ERC20 tokens and receive pool shares depending on the current share price.\\n     * @param _amount ERC20 token amount.\\n     */\\n    function deposit(uint256 _amount) external nonReentrant whenNotPaused {\\n        _updateRewards(_msgSender());\\n        _deposit(_amount);\\n    }\\n\\n    /**\\n     * @notice Deposit ERC20 tokens and claim rewards if any\\n     * @param _amount ERC20 token amount.\\n     */\\n    function depositAndClaim(uint256 _amount) external nonReentrant whenNotPaused {\\n        _depositAndClaim(_amount);\\n    }\\n\\n    /**\\n     * @notice Deposit ERC20 tokens with permit aka gasless approval.\\n     * @param _amount ERC20 token amount.\\n     * @param _deadline The time at which signature will expire\\n     * @param _v The recovery byte of the signature\\n     * @param _r Half of the ECDSA signature pair\\n     * @param _s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(\\n        uint256 _amount,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external nonReentrant whenNotPaused {\\n        IERC20Permit(address(token)).permit(_msgSender(), address(this), _amount, _deadline, _v, _r, _s);\\n        _updateRewards(_msgSender());\\n        _deposit(_amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral based on given shares and the current share price.\\n     * Burn remaining shares and return collateral.\\n     * @param _shares Pool shares. It will be in 18 decimals.\\n     */\\n    function withdraw(uint256 _shares) external nonReentrant whenNotShutdown {\\n        _updateRewards(_msgSender());\\n        _withdraw(_shares);\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral and claim rewards if any\\n     * @param _shares Pool shares. It will be in 18 decimals.\\n     */\\n    function withdrawAndClaim(uint256 _shares) external nonReentrant whenNotShutdown {\\n        _withdrawAndClaim(_shares);\\n    }\\n\\n    /**\\n     * @notice Transfer tokens to multiple recipient\\n     * @dev Address array and amount array are 1:1 and are in order.\\n     * @param _recipients array of recipient addresses\\n     * @param _amounts array of token amounts\\n     * @return true/false\\n     */\\n    function multiTransfer(address[] calldata _recipients, uint256[] calldata _amounts) external returns (bool) {\\n        require(_recipients.length == _amounts.length, Errors.INPUT_LENGTH_MISMATCH);\\n        for (uint256 i = 0; i < _recipients.length; i++) {\\n            require(transfer(_recipients[i], _amounts[i]), Errors.MULTI_TRANSFER_FAILED);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Strategy call this in regular interval. Only strategy function.\\n     * @param _profit yield generated by strategy. Strategy get performance fee on this amount\\n     * @param _loss  Reduce debt ,also reduce debtRatio, increase loss in record.\\n     * @param _payback strategy willing to payback outstanding above debtLimit. no performance fee on this amount.\\n     *  when governance has reduced debtRatio of strategy, strategy will report profit and payback amount separately.\\n     */\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external {\\n        address _strategy = _msgSender();\\n        // Calculate universal fee\\n        if (_profit > 0) {\\n            (, , , uint256 _lastRebalanceAt, uint256 _totalDebt, , , , ) =\\n                IPoolAccountant(poolAccountant).strategy(_strategy);\\n            uint256 _fee = _calculateUniversalFee(_lastRebalanceAt, _totalDebt, _profit);\\n            // Mint shares equal to universal fee\\n            if (_fee > 0) {\\n                _mint(IStrategy(_strategy).feeCollector(), _calculateShares(_fee));\\n                emit UniversalFeePaid(_totalDebt, _profit, _fee);\\n            }\\n        }\\n\\n        // Report earning in pool accountant\\n        (uint256 _actualPayback, uint256 _creditLine) =\\n            IPoolAccountant(poolAccountant).reportEarning(_strategy, _profit, _loss, _payback);\\n        uint256 _totalPayback = _profit + _actualPayback;\\n        // After payback, if strategy has credit line available then send more fund to strategy\\n        // If payback is more than available credit line then get fund from strategy\\n        if (_totalPayback < _creditLine) {\\n            token.safeTransfer(_strategy, _creditLine - _totalPayback);\\n        } else if (_totalPayback > _creditLine) {\\n            token.safeTransferFrom(_strategy, address(this), _totalPayback - _creditLine);\\n        }\\n    }\\n\\n    /**\\n     * @notice Report loss outside of rebalance activity.\\n     * @dev Some strategies pay deposit fee thus realizing loss at deposit.\\n     * For example: Curve's 3pool has some slippage due to deposit of one asset in 3pool.\\n     * Strategy may want report this loss instead of waiting for next rebalance.\\n     * @param _loss Loss that strategy want to report\\n     */\\n    function reportLoss(uint256 _loss) external {\\n        if (_loss > 0) {\\n            IPoolAccountant(poolAccountant).reportLoss(_msgSender(), _loss);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfer given ERC20 token to governor\\n     * @param _fromToken Token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external onlyKeeper {\\n        require(_fromToken != address(token), Errors.NOT_ALLOWED_TO_SWEEP);\\n        IERC20(_fromToken).safeTransfer(governor, IERC20(_fromToken).balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Get available credit limit of strategy. This is the amount strategy can borrow from pool\\n     * @dev Available credit limit is calculated based on current debt of pool and strategy, current debt limit of pool and strategy.\\n     * credit available = min(pool's debt limit, strategy's debt limit, max debt per rebalance)\\n     * when some strategy do not pay back outstanding debt, this impact credit line of other strategy if totalDebt of pool >= debtLimit of pool\\n     * @param _strategy Strategy address\\n     */\\n    function availableCreditLimit(address _strategy) external view returns (uint256) {\\n        return IPoolAccountant(poolAccountant).availableCreditLimit(_strategy);\\n    }\\n\\n    /**\\n     * @notice Calculate universal fee for calling strategy. This is only strategy function.\\n     * @dev Earn strategies will call this during rebalance.\\n     */\\n    function calculateUniversalFee(uint256 _profit) external view returns (uint256 _fee) {\\n        return _calculateUniversalFee(_msgSender(), _profit);\\n    }\\n\\n    /**\\n     * @notice Debt above current debt limit\\n     * @param _strategy Address of strategy\\n     */\\n    function excessDebt(address _strategy) external view returns (uint256) {\\n        return IPoolAccountant(poolAccountant).excessDebt(_strategy);\\n    }\\n\\n    function getStrategies() external view returns (address[] memory) {\\n        return IPoolAccountant(poolAccountant).getStrategies();\\n    }\\n\\n    /// @notice Get total debt of pool\\n    function totalDebt() external view returns (uint256) {\\n        return IPoolAccountant(poolAccountant).totalDebt();\\n    }\\n\\n    /**\\n     * @notice Get total debt of given strategy\\n     * @param _strategy Strategy address\\n     */\\n    function totalDebtOf(address _strategy) external view returns (uint256) {\\n        return IPoolAccountant(poolAccountant).totalDebtOf(_strategy);\\n    }\\n\\n    /// @notice Get total debt ratio. Total debt ratio helps us keep buffer in pool\\n    function totalDebtRatio() external view returns (uint256) {\\n        return IPoolAccountant(poolAccountant).totalDebtRatio();\\n    }\\n\\n    /**\\n     * @notice Calculate how much shares user will get for given amount. Also return externalDepositFee if any.\\n     * @param _amount Collateral amount\\n     * @return _shares Amount of share that user will get\\n     * @dev Amount should be >= minimum deposit limit which default to 1\\n     */\\n    function calculateMintage(uint256 _amount) public view returns (uint256 _shares) {\\n        require(_amount >= minDepositLimit, Errors.INVALID_COLLATERAL_AMOUNT);\\n        uint256 _externalDepositFee = (_amount * IPoolAccountant(poolAccountant).externalDepositFee()) / MAX_BPS;\\n        _shares = _calculateShares(_amount - _externalDepositFee);\\n    }\\n\\n    function getWithdrawQueue() public view returns (address[] memory) {\\n        return IPoolAccountant(poolAccountant).getWithdrawQueue();\\n    }\\n\\n    /**\\n     * @notice Get price per share\\n     * @dev Return value will be in token defined decimals.\\n     */\\n    function pricePerShare() public view returns (uint256) {\\n        if (totalSupply() == 0 || totalValue() == 0) {\\n            return 10**IERC20Metadata(address(token)).decimals();\\n        }\\n        return (totalValue() * 1e18) / totalSupply();\\n    }\\n\\n    function strategy(address _strategy)\\n        public\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        )\\n    {\\n        return IPoolAccountant(poolAccountant).strategy(_strategy);\\n    }\\n\\n    /// @dev Returns the token stored in the pool. It will be in token defined decimals.\\n    function tokensHere() public view returns (uint256) {\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Returns sum of token locked in other contracts and token stored in the pool.\\n     * It will be in token defined decimals.\\n     */\\n    function totalValue() public view returns (uint256) {\\n        return IPoolAccountant(poolAccountant).totalDebt() + tokensHere();\\n    }\\n\\n    /**\\n     * @dev Hook that is called just after burning tokens.\\n     * @param _amount Collateral amount in collateral token defined decimals.\\n     */\\n    function _afterBurning(uint256 _amount) internal virtual returns (uint256) {\\n        token.safeTransfer(_msgSender(), _amount);\\n        return _amount;\\n    }\\n\\n    /// @notice claim rewards of account\\n    function _claimRewards(address _account) internal {\\n        if (poolRewards != address(0)) {\\n            IPoolRewards(poolRewards).claimReward(_account);\\n        }\\n    }\\n\\n    /// @dev Deposit incoming token and mint pool token i.e. shares.\\n    function _deposit(uint256 _amount) internal {\\n        uint256 _shares = calculateMintage(_amount);\\n        token.safeTransferFrom(_msgSender(), address(this), _amount);\\n        _mint(_msgSender(), _shares);\\n        emit Deposit(_msgSender(), _shares, _amount);\\n    }\\n\\n    /// @dev Deposit token and claim rewards if any\\n    function _depositAndClaim(uint256 _amount) internal {\\n        _claimRewards(_msgSender());\\n        _deposit(_amount);\\n    }\\n\\n    /// @dev Update pool rewards of sender and receiver during transfer.\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal override {\\n        if (poolRewards != address(0)) {\\n            IPoolRewards(poolRewards).updateReward(sender);\\n            IPoolRewards(poolRewards).updateReward(recipient);\\n        }\\n        super._transfer(sender, recipient, amount);\\n    }\\n\\n    function _updateRewards(address _account) internal {\\n        if (poolRewards != address(0)) {\\n            IPoolRewards(poolRewards).updateReward(_account);\\n        }\\n    }\\n\\n    /// @dev Burns shares and returns the collateral value, after fee, of those.\\n    function _withdraw(uint256 _shares) internal {\\n        require(_shares > 0, Errors.INVALID_SHARE_AMOUNT);\\n\\n        (uint256 _amountWithdrawn, bool _isPartial) = _beforeBurning(_shares);\\n        // There may be scenarios when pool is not able to withdraw all of requested amount\\n        if (_isPartial) {\\n            // Recalculate proportional share on actual amount withdrawn\\n            uint256 _proportionalShares = _calculateShares(_amountWithdrawn);\\n            if (_proportionalShares < _shares) {\\n                _shares = _proportionalShares;\\n            }\\n        }\\n        _burn(_msgSender(), _shares);\\n        _afterBurning(_amountWithdrawn);\\n        emit Withdraw(_msgSender(), _shares, _amountWithdrawn);\\n    }\\n\\n    /// @dev Withdraw collateral and claim rewards if any\\n    function _withdrawAndClaim(uint256 _shares) internal {\\n        _claimRewards(_msgSender());\\n        _withdraw(_shares);\\n    }\\n\\n    function _withdrawCollateral(uint256 _amount) internal {\\n        // Withdraw amount from queue\\n        uint256 _debt;\\n        uint256 _balanceAfter;\\n        uint256 _balanceBefore;\\n        uint256 _amountWithdrawn;\\n        uint256 _totalAmountWithdrawn;\\n        address[] memory _withdrawQueue = getWithdrawQueue();\\n        uint256 _len = _withdrawQueue.length;\\n        for (uint256 i; i < _len; i++) {\\n            uint256 _amountNeeded = _amount - _totalAmountWithdrawn;\\n            address _strategy = _withdrawQueue[i];\\n            _debt = IPoolAccountant(poolAccountant).totalDebtOf(_strategy);\\n            if (_debt == 0) {\\n                continue;\\n            }\\n            if (_amountNeeded > _debt) {\\n                // Should not withdraw more than current debt of strategy.\\n                _amountNeeded = _debt;\\n            }\\n            _balanceBefore = tokensHere();\\n            //solhint-disable no-empty-blocks\\n            try IStrategy(_strategy).withdraw(_amountNeeded) {} catch {\\n                continue;\\n            }\\n            _balanceAfter = tokensHere();\\n            _amountWithdrawn = _balanceAfter - _balanceBefore;\\n            // Adjusting totalDebt. Assuming that during next reportEarning(), strategy will report loss if amountWithdrawn < _amountNeeded\\n            IPoolAccountant(poolAccountant).decreaseDebt(_strategy, _amountWithdrawn);\\n            _totalAmountWithdrawn += _amountWithdrawn;\\n            if (_totalAmountWithdrawn >= _amount) {\\n                // withdraw done\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Before burning hook.\\n     * withdraw amount from strategies\\n     */\\n    function _beforeBurning(uint256 _share) private returns (uint256 _actualWithdrawn, bool _isPartial) {\\n        uint256 _amount = (_share * pricePerShare()) / 1e18;\\n        uint256 _tokensHere = tokensHere();\\n        _actualWithdrawn = _amount;\\n        // Check for partial withdraw scenario\\n        // If we do not have enough tokens then withdraw whats needed from strategy\\n        if (_amount > _tokensHere) {\\n            // Strategy may withdraw partial\\n            _withdrawCollateral(_amount - _tokensHere);\\n            _tokensHere = tokensHere();\\n            if (_amount > _tokensHere) {\\n                _actualWithdrawn = _tokensHere;\\n                _isPartial = true;\\n            }\\n        }\\n        require(_actualWithdrawn > 0, Errors.INVALID_COLLATERAL_AMOUNT);\\n    }\\n\\n    /**\\n     * @dev Calculate shares to mint/burn based on the current share price and given amount.\\n     * @param _amount Collateral amount in collateral token defined decimals.\\n     * @return share amount in 18 decimal\\n     */\\n    function _calculateShares(uint256 _amount) private view returns (uint256) {\\n        uint256 _share = ((_amount * 1e18) / pricePerShare());\\n        return _amount > ((_share * pricePerShare()) / 1e18) ? _share + 1 : _share;\\n    }\\n\\n    /**\\n     * @dev Calculate universal fee based on strategy's TVL, profit earned and duration between rebalance and now.\\n     */\\n    function _calculateUniversalFee(address _strategy, uint256 _profit) private view returns (uint256 _fee) {\\n        // Calculate universal fee\\n        (, , , uint256 _lastRebalance, uint256 _totalDebt, , , , ) =\\n            IPoolAccountant(poolAccountant).strategy(_strategy);\\n        return _calculateUniversalFee(_lastRebalance, _totalDebt, _profit);\\n    }\\n\\n    function _calculateUniversalFee(\\n        uint256 _lastRebalance,\\n        uint256 _totalDebt,\\n        uint256 _profit\\n    ) private view returns (uint256 _fee) {\\n        _fee = (universalFee * (block.timestamp - _lastRebalance) * _totalDebt) / (MAX_BPS * ONE_YEAR);\\n        uint256 _maxFee = (_profit * maxProfitAsFee) / MAX_BPS;\\n        if (_fee > _maxFee) {\\n            _fee = _maxFee;\\n        }\\n    }\\n\\n    ////////////////////////////// Only Governor //////////////////////////////\\n\\n    /**\\n     * @notice Migrate existing strategy to new strategy.\\n     * @dev Migrating strategy aka old and new strategy should be of same type.\\n     * @param _old Address of strategy being migrated\\n     * @param _new Address of new strategy\\n     */\\n    function migrateStrategy(address _old, address _new) external onlyGovernor {\\n        require(\\n            IStrategy(_new).pool() == address(this) && IStrategy(_old).pool() == address(this),\\n            Errors.INVALID_STRATEGY\\n        );\\n        IPoolAccountant(poolAccountant).migrateStrategy(_old, _new);\\n        IStrategy(_old).migrate(_new);\\n    }\\n\\n    /**\\n     * @notice OnlyGovernor:: Helper function for V5 upgrade\\n     */\\n    function setup() external onlyGovernor {\\n        universalFee = 200; // 2%\\n        maxProfitAsFee = 5_000; // 50%\\n        minDepositLimit = 1;\\n        IPoolAccountant(poolAccountant).setup();\\n    }\\n\\n    /**\\n     * Only Governor:: Update maximum profit that can be used as universal fee\\n     * @param _newMaxProfitAsFee New max profit as fee\\n     */\\n    function updateMaximumProfitAsFee(uint256 _newMaxProfitAsFee) external onlyGovernor {\\n        require(_newMaxProfitAsFee != maxProfitAsFee, Errors.SAME_AS_PREVIOUS);\\n        emit UpdatedMaximumProfitAsFee(maxProfitAsFee, _newMaxProfitAsFee);\\n        maxProfitAsFee = _newMaxProfitAsFee;\\n    }\\n\\n    /**\\n     * Only Governor:: Update minimum deposit limit\\n     * @param _newLimit New minimum deposit limit\\n     */\\n    function updateMinimumDepositLimit(uint256 _newLimit) external onlyGovernor {\\n        require(_newLimit > 0, Errors.INVALID_INPUT);\\n        require(_newLimit != minDepositLimit, Errors.SAME_AS_PREVIOUS);\\n        emit UpdatedMinimumDepositLimit(minDepositLimit, _newLimit);\\n        minDepositLimit = _newLimit;\\n    }\\n\\n    /**\\n     * @notice Update universal fee for this pool\\n     * @dev Format: 1500 = 15% fee, 100 = 1%\\n     * @param _newUniversalFee new universal fee\\n     */\\n    function updateUniversalFee(uint256 _newUniversalFee) external onlyGovernor {\\n        require(_newUniversalFee <= MAX_BPS, Errors.FEE_LIMIT_REACHED);\\n        emit UpdatedUniversalFee(universalFee, _newUniversalFee);\\n        universalFee = _newUniversalFee;\\n    }\\n\\n    /**\\n     * @notice Update pool rewards address for this pool\\n     * @param _newPoolRewards new pool rewards address\\n     */\\n    function updatePoolRewards(address _newPoolRewards) external onlyGovernor {\\n        require(_newPoolRewards != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\\n        emit UpdatedPoolRewards(poolRewards, _newPoolRewards);\\n        poolRewards = _newPoolRewards;\\n    }\\n\\n    ///////////////////////////// Only Keeper ///////////////////////////////\\n    function pause() external onlyKeeper {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyKeeper {\\n        _unpause();\\n    }\\n\\n    function shutdown() external onlyKeeper {\\n        _shutdown();\\n    }\\n\\n    function open() external onlyKeeper {\\n        _open();\\n    }\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    function isKeeper(address _address) external view returns (bool) {\\n        return _keepers.contains(_address);\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyKeeper {\\n        require(_keepers.add(_keeperAddress), Errors.ADD_IN_LIST_FAILED);\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyKeeper {\\n        require(_keepers.remove(_keeperAddress), Errors.REMOVE_FROM_LIST_FAILED);\\n    }\\n\\n    /// @notice Return list of maintainers\\n    function maintainers() external view returns (address[] memory) {\\n        return _maintainers.values();\\n    }\\n\\n    function isMaintainer(address _address) external view returns (bool) {\\n        return _maintainers.contains(_address);\\n    }\\n\\n    /**\\n     * @notice Add given address in maintainers list.\\n     * @param _maintainerAddress maintainer address to add.\\n     */\\n    function addMaintainer(address _maintainerAddress) external onlyKeeper {\\n        require(_maintainers.add(_maintainerAddress), Errors.ADD_IN_LIST_FAILED);\\n    }\\n\\n    /**\\n     * @notice Remove given address from maintainers list.\\n     * @param _maintainerAddress maintainer address to remove.\\n     */\\n    function removeMaintainer(address _maintainerAddress) external onlyKeeper {\\n        require(_maintainers.remove(_maintainerAddress), Errors.REMOVE_FROM_LIST_FAILED);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n}\\n\",\"keccak256\":\"0x4a7496d4ecce4f1286b2aea8136c56799df677da6646187767ba24f08a5796f8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260c8601d55611388601e556001601f553480156200002157600080fd5b50604051620049233803806200492383398101604081905262000044916200027b565b8251839083906200005d90600390602085019062000108565b5080516200007390600490602084019062000108565b5050506000620000886200010460201b60201c565b600a80546001600160a01b0319166001600160a01b038316908117909155604051919250906000907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a3506001600c55600d80546001600160a01b0319166001600160a01b039290921691909117905550620003459050565b3390565b828054620001169062000308565b90600052602060002090601f0160209004810192826200013a576000855562000185565b82601f106200015557805160ff191683800117855562000185565b8280016001018555821562000185579182015b828111156200018557825182559160200191906001019062000168565b506200019392915062000197565b5090565b5b8082111562000193576000815560010162000198565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001d657600080fd5b81516001600160401b0380821115620001f357620001f3620001ae565b604051601f8301601f19908116603f011681019082821181831017156200021e576200021e620001ae565b816040528381526020925086838588010111156200023b57600080fd5b600091505b838210156200025f578582018301518183018401529082019062000240565b83821115620002715760008385830101525b9695505050505050565b6000806000606084860312156200029157600080fd5b83516001600160401b0380821115620002a957600080fd5b620002b787838801620001c4565b94506020860151915080821115620002ce57600080fd5b50620002dd86828701620001c4565b604086015190935090506001600160a01b0381168114620002fd57600080fd5b809150509250925092565b600181811c908216806200031d57607f821691505b602082108114156200033f57634e487b7160e01b600052602260045260246000fd5b50919050565b6145ce80620003556000396000f3fe608060405234801561001057600080fd5b50600436106103715760003560e01c80638d3d0a26116101d5578063c01e0d4011610105578063ddd6d260116100a8578063ddd6d260146107d6578063e00af4a7146107e9578063f3b27bc3146107fc578063fc0c546a14610804578063fc0e74d114610817578063fc7b9c181461081f578063fcfff16f14610827578063fd967f471461082f578063ffa1ad741461083857600080fd5b8063c01e0d4014610723578063c12d636b14610736578063d4c3eea014610749578063d505accf14610751578063d53ddc2614610764578063d8baf7cf14610777578063dd57366a1461078a578063dd62ed3e1461079d57600080fd5b80639fd5be18116101785780639fd5be18146106a3578063a9059cbb146106ac578063a941a90e146106bf578063b49a60bb146106d2578063b64321ec146106da578063b6aa515b146106ed578063b6b55f2514610700578063b8cb343d14610713578063ba0bba401461071b57600080fd5b80638d3d0a261461062c5780638f15b4141461063f578063940c408214610652578063951dc22c1461066557806395d89b411461066d57806399530b06146106755780639b6da8df1461067d5780639f2b28331461069057600080fd5b80633644e515116102b05780635c975abb116102535780635c975abb146105725780635f895e54146105865780636b453c1f1461058f5780636ba42aaa146105a25780636cb56d19146105b557806370a08231146105c85780637ecebe00146105f15780638456cb59146106115780638bc6beb21461061957600080fd5b80633644e515146105045780633e7729251461050c5780633f4ba83a146105155780634032b72b1461051d578063448a1047146105305780634938649a1461054357806349eeb860146105575780634a970be71461055f57600080fd5b806318160ddd1161031857806318160ddd146104405780631e89d54514610448578063228bfd9f1461045b57806323b872dd146104b45780632df9eab9146104c75780632e1a7d4d146104cf578063313ce567146104e257806332dd0f49146104f157600080fd5b806305bed0461461037657806306fdde031461038b578063095ea7b3146103a95780630c340a24146103cc5780630da3fe20146103ec57806311183052146103ff57806314ae9f2e1461041457806316d3bfbb14610427575b600080fd5b610389610384366004613bce565b61085c565b005b610393610add565b6040516103a09190613c26565b60405180910390f35b6103bc6103b7366004613c6e565b610b6f565b60405190151581526020016103a0565b600a546103df906001600160a01b031681565b6040516103a09190613c9a565b6103896103fa366004613cae565b610b86565b610407610c72565b6040516103a09190613cc7565b610389610422366004613d14565b610cf8565b6104326301e1338081565b6040519081526020016103a0565b600254610432565b6103bc610456366004613d7d565b610d7d565b61046e610469366004613d14565b610e63565b604080519915158a5260208a0198909852968801959095526060870193909352608086019190915260a085015260c084015260e0830152610100820152610120016103a0565b6103bc6104c2366004613de9565b610f14565b610432610fc7565b6103896104dd366004613cae565b611044565b604051601281526020016103a0565b6104326104ff366004613cae565b6110b5565b6104326110c1565b610432601e5481565b6103896110cb565b61038961052b366004613d14565b61110e565b61038961053e366004613cae565b61118b565b600b546103bc90600160a81b900460ff1681565b6104076111e6565b61038961056d366004613e39565b6111f2565b600b546103bc90600160a01b900460ff1681565b610432601d5481565b61038961059d366004613d14565b6112f9565b6103bc6105b0366004613d14565b61133d565b6103896105c3366004613e82565b61134a565b6104326105d6366004613d14565b6001600160a01b031660009081526020819052604090205490565b6104326105ff366004613d14565b60096020526000908152604090205481565b610389611589565b600f546103df906001600160a01b031681565b61038961063a366004613cae565b6115ca565b61038961064d366004613f72565b611672565b610389610660366004613d14565b611850565b610407611917565b610393611923565b610432611932565b61038961068b366004613cae565b611a0b565b61043261069e366004613d14565b611ab6565b610432601f5481565b6103bc6106ba366004613c6e565b611b37565b6103896106cd366004613cae565b611b44565b610407611b9f565b6104326106e8366004613d14565b611be4565b6103896106fb366004613d14565b611c15565b61038961070e366004613cae565b611cb3565b610432611d17565b610389611d60565b610432610731366004613cae565b611dfa565b600e546103df906001600160a01b031681565b610432611eee565b61038961075f366004613ffb565b611f88565b610432610772366004613d14565b612148565b610389610785366004613d14565b612179565b6103bc610798366004613d14565b6121bd565b6104326107ab366004613e82565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6103896107e4366004613cae565b6121ca565b6103896107f7366004613d14565b612231565b61038961234c565b600d546103df906001600160a01b031681565b610389612408565b610432612449565b61038961248e565b61043261271081565b610393604051806040016040528060058152602001640352e302e360dc1b81525081565b3383156109d157600e5460405163228bfd9f60e01b815260009182916001600160a01b039091169063228bfd9f90610898908690600401613c9a565b6101206040518083038186803b1580156108b157600080fd5b505afa1580156108c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e99190614081565b505050509450945050505060006109018383896124cf565b905080156109cd5761098b846001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561094557600080fd5b505afa158015610959573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097d91906140f1565b61098683612542565b6125a7565b60408051838152602081018990529081018290527f692ef79cc704efab4328e6c217b5fb3b1045d0a0314e3e8137029bcb2d59ce4a9060600160405180910390a15b5050505b600e5460405163a066654b60e01b81526001600160a01b038381166004830152602482018790526044820186905260648201859052600092839291169063a066654b906084016040805180830381600087803b158015610a3057600080fd5b505af1158015610a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a68919061410e565b90925090506000610a798388614148565b905081811015610aa957610aa484610a918385614160565b600d546001600160a01b03169190612674565b610ad4565b81811115610ad457610ad48430610ac08585614160565b600d546001600160a01b03169291906126cf565b50505050505050565b606060038054610aec90614177565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1890614177565b8015610b655780601f10610b3a57610100808354040283529160200191610b65565b820191906000526020600020905b815481529060010190602001808311610b4857829003601f168201915b5050505050905090565b6000610b7c338484612707565b5060015b92915050565b600a546001600160a01b03163314610bb95760405162461bcd60e51b8152600401610bb0906141b2565b60405180910390fd5b604080518082019091526002815261199960f11b602082015281610bf05760405162461bcd60e51b8152600401610bb09190613c26565b50601f5481141560405180604001604052806002815260200161333160f01b81525090610c305760405162461bcd60e51b8152600401610bb09190613c26565b50601f5460408051918252602082018390527f25c9f41f0fb7a055d44b070262516fbd0111daea3b55d40fae1983827dc99292910160405180910390a1601f55565b600e546040805163088c182960e11b815290516060926001600160a01b0316916311183052916004808301926000929190829003018186803b158015610cb757600080fd5b505afa158015610ccb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cf391908101906141d8565b905090565b600a546001600160a01b0316331480610d195750610d19335b60199061282c565b610d355760405162461bcd60e51b8152600401610bb09061428a565b610d4060198261284e565b604051806040016040528060028152602001610c4d60f21b81525090610d795760405162461bcd60e51b8152600401610bb09190613c26565b5050565b6040805180820190915260018152600d60fa1b6020820152600090848314610db85760405162461bcd60e51b8152600401610bb09190613c26565b5060005b84811015610e5757610e0c868683818110610dd957610dd96142b0565b9050602002016020810190610dee9190613d14565b858584818110610e0057610e006142b0565b90506020020135611b37565b604051806040016040528060018152602001601b60f91b81525090610e445760405162461bcd60e51b8152600401610bb09190613c26565b5080610e4f816142c6565b915050610dbc565b50600195945050505050565b600e5460405163228bfd9f60e01b8152600091829182918291829182918291829182916001600160a01b03169063228bfd9f90610ea4908d90600401613c9a565b6101206040518083038186803b158015610ebd57600080fd5b505afa158015610ed1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef59190614081565b9850985098509850985098509850985098509193959799909294969850565b6000610f21848484612863565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610fa65760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610bb0565b610fba8533610fb58685614160565b612707565b60019150505b9392505050565b600e5460408051632df9eab960e01b815290516000926001600160a01b031691632df9eab9916004808301926020929190829003018186803b15801561100c57600080fd5b505afa158015611020573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf391906142e1565b6002600c5414156110675760405162461bcd60e51b8152600401610bb0906142fa565b6002600c55600b54600160a81b900460ff16156110965760405162461bcd60e51b8152600401610bb090614331565b6110a433612944565b612944565b6110ad81612985565b506001600c55565b6000610b803383612a41565b6000610cf3612ae6565b600a546001600160a01b03163314806110e857506110e833610d11565b6111045760405162461bcd60e51b8152600401610bb09061428a565b61110c612b61565b565b600a546001600160a01b031633148061112b575061112b33610d11565b6111475760405162461bcd60e51b8152600401610bb09061428a565b611152601982612c18565b60405180604001604052806002815260200161313360f01b81525090610d795760405162461bcd60e51b8152600401610bb09190613c26565b6002600c5414156111ae5760405162461bcd60e51b8152600401610bb0906142fa565b6002600c55600b54600160a81b900460ff16156111dd5760405162461bcd60e51b8152600401610bb090614331565b6110ad81612c2d565b6060610cf3601b612c3f565b6002600c5414156112155760405162461bcd60e51b8152600401610bb0906142fa565b6002600c55600b54600160a01b900460ff16156112445760405162461bcd60e51b8152600401610bb090614353565b600d546001600160a01b031663d505accf336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018890526064810187905260ff8616608482015260a4810185905260c4810184905260e401600060405180830381600087803b1580156112c257600080fd5b505af11580156112d6573d6000803e3d6000fd5b505050506112e461109f3390565b6112ed85612c4c565b50506001600c55505050565b600a546001600160a01b0316331480611316575061131633610d11565b6113325760405162461bcd60e51b8152600401610bb09061428a565b611152601b82612c18565b6000610b8060198361282c565b600a546001600160a01b031633146113745760405162461bcd60e51b8152600401610bb0906141b2565b306001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113b757600080fd5b505afa1580156113cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ef91906140f1565b6001600160a01b03161480156114865750306001600160a01b0316826001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561144357600080fd5b505afa158015611457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147b91906140f1565b6001600160a01b0316145b60405180604001604052806002815260200161313760f01b815250906114bf5760405162461bcd60e51b8152600401610bb09190613c26565b50600e54604051636cb56d1960e01b81526001600160a01b038481166004830152838116602483015290911690636cb56d1990604401600060405180830381600087803b15801561150f57600080fd5b505af1158015611523573d6000803e3d6000fd5b505060405163ce5494bb60e01b81526001600160a01b038516925063ce5494bb9150611553908490600401613c9a565b600060405180830381600087803b15801561156d57600080fd5b505af1158015611581573d6000803e3d6000fd5b505050505050565b600a546001600160a01b03163314806115a657506115a633610d11565b6115c25760405162461bcd60e51b8152600401610bb09061428a565b61110c612cba565b600a546001600160a01b031633146115f45760405162461bcd60e51b8152600401610bb0906141b2565b604080518082019091526002815261313160f01b60208201526127108211156116305760405162461bcd60e51b8152600401610bb09190613c26565b50601d5460408051918252602082018390527f905d672396c48f9d1e13c57aec0819f00d39364ab4bf40a46a687aa607b67d81910160405180910390a1601d55565b600554610100900460ff168061168b575060055460ff16155b6116a75760405162461bcd60e51b8152600401610bb090614373565b600554610100900460ff161580156116c9576005805461ffff19166101011790555b604080518082019091526002815261031360f41b60208201526001600160a01b0384166117095760405162461bcd60e51b8152600401610bb09190613c26565b50604080518082019091526002815261031360f41b60208201526001600160a01b03831661174a5760405162461bcd60e51b8152600401610bb09190613c26565b506117558585612d1f565b61175e85612d46565b611766612dc5565b600d80546001600160a01b0319166001600160a01b03851617905561178d33601990612c18565b60405180604001604052806002815260200161313360f01b815250906117c65760405162461bcd60e51b8152600401610bb09190613c26565b506117d2601b33612c18565b60405180604001604052806002815260200161313360f01b8152509061180b5760405162461bcd60e51b8152600401610bb09190613c26565b50600e80546001600160a01b0319166001600160a01b03841617905560c8601d55611388601e556001601f558015611849576005805461ff00191690555b5050505050565b600a546001600160a01b0316331461187a5760405162461bcd60e51b8152600401610bb0906141b2565b604080518082019091526002815261031360f41b60208201526001600160a01b0382166118ba5760405162461bcd60e51b8152600401610bb09190613c26565b50600f546040516001600160a01b038084169216907fe239974dad08ac696e723caf1886bd0b5afc0870088f9a1266082757f824927690600090a3600f80546001600160a01b0319166001600160a01b0392909216919091179055565b6060610cf36019612c3f565b606060048054610aec90614177565b600061193d60025490565b158061194e575061194c611eee565b155b156119e457600d60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156119a157600080fd5b505afa1580156119b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d991906143c1565b610cf390600a6144c2565b6002546119ef611eee565b611a0190670de0b6b3a76400006144d1565b610cf391906144f0565b600a546001600160a01b03163314611a355760405162461bcd60e51b8152600401610bb0906141b2565b601e5481141560405180604001604052806002815260200161333160f01b81525090611a745760405162461bcd60e51b8152600401610bb09190613c26565b50601e5460408051918252602082018390527fafe4d3ceb3295a8d4ef49288a92d32d94e39396e823d414b81caff61b9fc3990910160405180910390a1601e55565b600e54604051639f2b283360e01b81526000916001600160a01b031690639f2b283390611ae7908590600401613c9a565b60206040518083038186803b158015611aff57600080fd5b505afa158015611b13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8091906142e1565b6000610b7c338484612863565b6002600c541415611b675760405162461bcd60e51b8152600401610bb0906142fa565b6002600c55600b54600160a01b900460ff1615611b965760405162461bcd60e51b8152600401610bb090614353565b6110ad81612e73565b600e546040805163b49a60bb60e01b815290516060926001600160a01b03169163b49a60bb916004808301926000929190829003018186803b158015610cb757600080fd5b600e54604051632d90c87b60e21b81526000916001600160a01b03169063b64321ec90611ae7908590600401613c9a565b600a546001600160a01b03163314611c3f5760405162461bcd60e51b8152600401610bb0906141b2565b6001600160a01b038116611c915760405162461bcd60e51b815260206004820152601960248201527870726f706f7365642d676f7665726e6f722d69732d7a65726f60381b6044820152606401610bb0565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6002600c541415611cd65760405162461bcd60e51b8152600401610bb0906142fa565b6002600c55600b54600160a01b900460ff1615611d055760405162461bcd60e51b8152600401610bb090614353565b611d0e33612944565b6110ad81612c4c565b600d546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611d48903090600401613c9a565b60206040518083038186803b15801561100c57600080fd5b600a546001600160a01b03163314611d8a5760405162461bcd60e51b8152600401610bb0906141b2565b60c8601d55611388601e556001601f55600e54604080516302e82ee960e61b815290516001600160a01b039092169163ba0bba409160048082019260009290919082900301818387803b158015611de057600080fd5b505af1158015611df4573d6000803e3d6000fd5b50505050565b6000601f54821015604051806040016040528060018152602001603160f81b81525090611e3a5760405162461bcd60e51b8152600401610bb09190613c26565b506000612710600e60009054906101000a90046001600160a01b03166001600160a01b031663346162d56040518163ffffffff1660e01b815260040160206040518083038186803b158015611e8e57600080fd5b505afa158015611ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec691906142e1565b611ed090856144d1565b611eda91906144f0565b9050610fc0611ee98285614160565b612542565b6000611ef8611d17565b600e60009054906101000a90046001600160a01b03166001600160a01b031663fc7b9c186040518163ffffffff1660e01b815260040160206040518083038186803b158015611f4657600080fd5b505afa158015611f5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7e91906142e1565b610cf39190614148565b83421115611fd85760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610bb0565b6001600160a01b0387811660008181526009602090815260408083205481517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98185015280830195909552948b166060850152608084018a905260a0840185905260c08085018a90528151808603909101815260e09094019052825192019190912090612063612ae6565b60405161190160f01b602082015260228101919091526042810183905260620160405160208183030381529060405280519060200120905060006120a982888888612e85565b90508a6001600160a01b0316816001600160a01b03161461210c5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610bb0565b612117846001614148565b6001600160a01b038c1660009081526009602052604090205561213b8b8b8b612707565b5050505050505050505050565b600e54604051636a9eee1360e11b81526000916001600160a01b03169063d53ddc2690611ae7908590600401613c9a565b600a546001600160a01b0316331480612196575061219633610d11565b6121b25760405162461bcd60e51b8152600401610bb09061428a565b610d40601b8261284e565b6000610b80601b8361282c565b801561222e57600e546001600160a01b0316637f13086e33836040518363ffffffff1660e01b8152600401612200929190614512565b600060405180830381600087803b15801561221a57600080fd5b505af1158015611849573d6000803e3d6000fd5b50565b600a546001600160a01b031633148061224e575061224e33610d11565b61226a5760405162461bcd60e51b8152600401610bb09061428a565b600d546040805180820190915260018152600760fb1b6020820152906001600160a01b03838116911614156122b25760405162461bcd60e51b8152600401610bb09190613c26565b50600a546040516370a0823160e01b815261222e916001600160a01b0390811691908416906370a08231906122eb903090600401613c9a565b60206040518083038186803b15801561230357600080fd5b505afa158015612317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233b91906142e1565b6001600160a01b0384169190612674565b600b546001600160a01b031633146123a25760405162461bcd60e51b81526020600482015260196024820152783737ba16ba343296b83937b837b9b2b216b3b7bb32b93737b960391b6044820152606401610bb0565b600b54600a546040516001600160a01b0392831692909116907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d090600090a3600b8054600a80546001600160a01b03199081166001600160a01b03841617909155169055565b600a546001600160a01b0316331480612425575061242533610d11565b6124415760405162461bcd60e51b8152600401610bb09061428a565b61110c613016565b600e5460408051631f8f738360e31b815290516000926001600160a01b03169163fc7b9c18916004808301926020929190829003018186803b15801561100c57600080fd5b600a546001600160a01b03163314806124ab57506124ab33610d11565b6124c75760405162461bcd60e51b8152600401610bb09061428a565b61110c61307c565b60006124e16301e133806127106144d1565b836124ec8642614160565b601d546124f991906144d1565b61250391906144d1565b61250d91906144f0565b90506000612710601e548461252291906144d1565b61252c91906144f0565b90508082111561253a578091505b509392505050565b60008061254d611932565b61255f84670de0b6b3a76400006144d1565b61256991906144f0565b9050670de0b6b3a764000061257c611932565b61258690836144d1565b61259091906144f0565b831161259c5780610fc0565b610fc0816001614148565b6001600160a01b0382166125fd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610bb0565b806002600082825461260f9190614148565b90915550506001600160a01b0382166000908152602081905260408120805483929061263c908490614148565b90915550506040518181526001600160a01b038316906000906000805160206145798339815191529060200160405180910390a35050565b6126ca8363a9059cbb60e01b8484604051602401612693929190614512565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526130f8565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611df49085906323b872dd60e01b90608401612693565b6001600160a01b0383166127695760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610bb0565b6001600160a01b0382166127ca5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610bb0565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03811660009081526001830160205260408120541515610fc0565b6000610fc0836001600160a01b0384166131ca565b600f546001600160a01b03161561293957600f5460405163632447c960e01b81526001600160a01b039091169063632447c9906128a4908690600401613c9a565b600060405180830381600087803b1580156128be57600080fd5b505af11580156128d2573d6000803e3d6000fd5b5050600f5460405163632447c960e01b81526001600160a01b03909116925063632447c99150612906908590600401613c9a565b600060405180830381600087803b15801561292057600080fd5b505af1158015612934573d6000803e3d6000fd5b505050505b6126ca8383836132bd565b600f546001600160a01b03161561222e57600f5460405163632447c960e01b81526001600160a01b039091169063632447c990612200908490600401613c9a565b6040805180820190915260018152601960f91b6020820152816129bb5760405162461bcd60e51b8152600401610bb09190613c26565b506000806129c883613483565b9150915080156129ed5760006129dd83612542565b9050838110156129eb578093505b505b6129f73384613530565b612a008261366d565b50604080518481526020810184905233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a2505050565b600e5460405163228bfd9f60e01b8152600091829182916001600160a01b03169063228bfd9f90612a76908890600401613c9a565b6101206040518083038186803b158015612a8f57600080fd5b505afa158015612aa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac79190614081565b5050505094509450505050612add8282866124cf565b95945050505050565b6000600854461415612af9575060065490565b6007546040805180820190915260018152603160f81b602090910152610cf3907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f907fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc661368a565b600b54600160a01b900460ff16612ba75760405162461bcd60e51b815260206004820152600a6024820152691b9bdd0b5c185d5cd95960b21b6044820152606401610bb0565b600b54600160a81b900460ff1615612bd15760405162461bcd60e51b8152600401610bb090614331565b600b805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051612c0e9190613c9a565b60405180910390a1565b6000610fc0836001600160a01b0384166136d3565b612c3633613722565b61222e81612985565b60606000610fc083613763565b6000612c5782611dfa565b9050612c7133600d546001600160a01b03169030856126cf565b612c7b33826125a7565b604080518281526020810184905233917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a25050565b600b54600160a01b900460ff1615612ce45760405162461bcd60e51b8152600401610bb090614353565b600b805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612c013390565b8151612d32906003906020850190613b3e565b5080516126ca906004906020840190613b3e565b80516020808301919091206007819055466008556040805180820190915260018152603160f81b920191909152612dbf907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f907fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc661368a565b60065550565b600554610100900460ff1680612dde575060055460ff16155b612dfa5760405162461bcd60e51b8152600401610bb090614373565b600554610100900460ff16158015612e1c576005805461ffff19166101011790555b600a80546001600160a01b0319163390811790915560405181906000907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a350801561222e576005805461ff001916905550565b612e7c33613722565b61222e81612c4c565b60006fa2a8918ca85bafe22016d0b997e4df60600160ff1b03821115612ef85760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610bb0565b8360ff16601b1480612f0d57508360ff16601c145b612f645760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610bb0565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015612fb8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612add5760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b6044820152606401610bb0565b600b54600160a81b900460ff16156130405760405162461bcd60e51b8152600401610bb090614331565b600b805461ffff60a01b191661010160a01b1790557f28b4c24cb1012c094cd2f59f98e89d791973295f8fda6eaa118022d6d318960a33612c01565b600b54600160a81b900460ff166130c45760405162461bcd60e51b815260206004820152600c60248201526b3737ba16b9b43aba3237bbb760a11b6044820152606401610bb0565b600b805460ff60a81b191690557fece7583a70a505ef0e36d4dec768f5ae597713e09c26011022599ee01abdabfc33612c01565b600061314d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137bf9092919063ffffffff16565b8051909150156126ca578080602001905181019061316b919061452b565b6126ca5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610bb0565b600081815260018301602052604081205480156132b35760006131ee600183614160565b855490915060009061320290600190614160565b9050818114613267576000866000018281548110613222576132226142b0565b9060005260206000200154905080876000018481548110613245576132456142b0565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061327857613278614546565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610b80565b6000915050610b80565b6001600160a01b0383166133215760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610bb0565b6001600160a01b0382166133835760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610bb0565b6001600160a01b038316600090815260208190526040902054818110156133fb5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610bb0565b6134058282614160565b6001600160a01b03808616600090815260208190526040808220939093559085168152908120805484929061343b908490614148565b92505081905550826001600160a01b0316846001600160a01b03166000805160206145798339815191528460405161347591815260200190565b60405180910390a350505050565b6000806000670de0b6b3a7640000613499611932565b6134a390866144d1565b6134ad91906144f0565b905060006134b9611d17565b9050819350808211156134f2576134d86134d38284614160565b6137d6565b6134e0611d17565b9050808211156134f257809350600192505b6040805180820190915260018152603160f81b6020820152846135285760405162461bcd60e51b8152600401610bb09190613c26565b505050915091565b6001600160a01b0382166135905760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610bb0565b6001600160a01b038216600090815260208190526040902054818110156136045760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610bb0565b61360e8282614160565b6001600160a01b0384166000908152602081905260408120919091556002805484929061363c908490614160565b90915550506040518281526000906001600160a01b038516906000805160206145798339815191529060200161281f565b600061368633600d546001600160a01b03169084612674565b5090565b6040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b600081815260018301602052604081205461371a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b80565b506000610b80565b600f546001600160a01b03161561222e57600f5460405163d279c19160e01b81526001600160a01b039091169063d279c19190612200908490600401613c9a565b6060816000018054806020026020016040519081016040528092919081815260200182805480156137b357602002820191906000526020600020905b81548152602001906001019080831161379f575b50505050509050919050565b60606137ce84846000856139dd565b949350505050565b6000806000806000806137e7610c72565b805190915060005b818110156139d2576000613803858b614160565b90506000848381518110613819576138196142b0565b6020908102919091010151600e54604051639f2b283360e01b81529192506001600160a01b031690639f2b283390613855908490600401613c9a565b60206040518083038186803b15801561386d57600080fd5b505afa158015613881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138a591906142e1565b9950896138b35750506139c0565b898211156138bf578991505b6138c7611d17565b604051632e1a7d4d60e01b8152600481018490529098506001600160a01b03821690632e1a7d4d90602401600060405180830381600087803b15801561390c57600080fd5b505af192505050801561391d575060015b6139285750506139c0565b613930611d17565b985061393c888a614160565b600e54604051632fb9ba3160e01b81529198506001600160a01b031690632fb9ba319061396f9084908b90600401614512565b600060405180830381600087803b15801561398957600080fd5b505af115801561399d573d6000803e3d6000fd5b5050505086866139ad9190614148565b95508a86106139bd5750506139d2565b50505b806139ca816142c6565b9150506137ef565b505050505050505050565b606082471015613a3e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610bb0565b843b613a8c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610bb0565b600080866001600160a01b03168587604051613aa8919061455c565b60006040518083038185875af1925050503d8060008114613ae5576040519150601f19603f3d011682016040523d82523d6000602084013e613aea565b606091505b5091509150613afa828286613b05565b979650505050505050565b60608315613b14575081610fc0565b825115613b245782518084602001fd5b8160405162461bcd60e51b8152600401610bb09190613c26565b828054613b4a90614177565b90600052602060002090601f016020900481019282613b6c5760008555613bb2565b82601f10613b8557805160ff1916838001178555613bb2565b82800160010185558215613bb2579182015b82811115613bb2578251825591602001919060010190613b97565b506136869291505b808211156136865760008155600101613bba565b600080600060608486031215613be357600080fd5b505081359360208301359350604090920135919050565b60005b83811015613c15578181015183820152602001613bfd565b83811115611df45750506000910152565b6020815260008251806020840152613c45816040850160208701613bfa565b601f01601f19169190910160400192915050565b6001600160a01b038116811461222e57600080fd5b60008060408385031215613c8157600080fd5b8235613c8c81613c59565b946020939093013593505050565b6001600160a01b0391909116815260200190565b600060208284031215613cc057600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015613d085783516001600160a01b031683529284019291840191600101613ce3565b50909695505050505050565b600060208284031215613d2657600080fd5b8135610fc081613c59565b60008083601f840112613d4357600080fd5b50813567ffffffffffffffff811115613d5b57600080fd5b6020830191508360208260051b8501011115613d7657600080fd5b9250929050565b60008060008060408587031215613d9357600080fd5b843567ffffffffffffffff80821115613dab57600080fd5b613db788838901613d31565b90965094506020870135915080821115613dd057600080fd5b50613ddd87828801613d31565b95989497509550505050565b600080600060608486031215613dfe57600080fd5b8335613e0981613c59565b92506020840135613e1981613c59565b929592945050506040919091013590565b60ff8116811461222e57600080fd5b600080600080600060a08688031215613e5157600080fd5b85359450602086013593506040860135613e6a81613e2a565b94979396509394606081013594506080013592915050565b60008060408385031215613e9557600080fd5b8235613ea081613c59565b91506020830135613eb081613c59565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613efa57613efa613ebb565b604052919050565b600082601f830112613f1357600080fd5b813567ffffffffffffffff811115613f2d57613f2d613ebb565b613f40601f8201601f1916602001613ed1565b818152846020838601011115613f5557600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215613f8857600080fd5b843567ffffffffffffffff80821115613fa057600080fd5b613fac88838901613f02565b95506020870135915080821115613fc257600080fd5b50613fcf87828801613f02565b9350506040850135613fe081613c59565b91506060850135613ff081613c59565b939692955090935050565b600080600080600080600060e0888a03121561401657600080fd5b873561402181613c59565b9650602088013561403181613c59565b95506040880135945060608801359350608088013561404f81613e2a565b9699959850939692959460a0840135945060c09093013592915050565b8051801515811461407c57600080fd5b919050565b60008060008060008060008060006101208a8c0312156140a057600080fd5b6140a98a61406c565b985060208a0151975060408a0151965060608a0151955060808a0151945060a08a0151935060c08a0151925060e08a015191506101008a015190509295985092959850929598565b60006020828403121561410357600080fd5b8151610fc081613c59565b6000806040838503121561412157600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b6000821982111561415b5761415b614132565b500190565b60008282101561417257614172614132565b500390565b600181811c9082168061418b57607f821691505b602082108114156141ac57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b3737ba16b3b7bb32b93737b960a11b604082015260600190565b600060208083850312156141eb57600080fd5b825167ffffffffffffffff8082111561420357600080fd5b818501915085601f83011261421757600080fd5b81518181111561422957614229613ebb565b8060051b915061423a848301613ed1565b818152918301840191848101908884111561425457600080fd5b938501935b8385101561427e578451925061426e83613c59565b8282529385019390850190614259565b98975050505050505050565b6020808252600c908201526b3737ba16b096b5b2b2b832b960a11b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006000198214156142da576142da614132565b5060010190565b6000602082840312156142f357600080fd5b5051919050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526008908201526739b43aba3237bbb760c11b604082015260600190565b6020808252600690820152651c185d5cd95960d21b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000602082840312156143d357600080fd5b8151610fc081613e2a565b600181815b808511156144195781600019048211156143ff576143ff614132565b8085161561440c57918102915b93841c93908002906143e3565b509250929050565b60008261443057506001610b80565b8161443d57506000610b80565b8160018114614453576002811461445d57614479565b6001915050610b80565b60ff84111561446e5761446e614132565b50506001821b610b80565b5060208310610133831016604e8410600b841016171561449c575081810a610b80565b6144a683836143de565b80600019048211156144ba576144ba614132565b029392505050565b6000610fc060ff841683614421565b60008160001904831182151516156144eb576144eb614132565b500290565b60008261450d57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b03929092168252602082015260400190565b60006020828403121561453d57600080fd5b610fc08261406c565b634e487b7160e01b600052603160045260246000fd5b6000825161456e818460208701613bfa565b919091019291505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220c56bcb0fcc5ec6f05dd5efd12d7224f6c3ec88d5b136975d0e61e811d2af6d0464736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103715760003560e01c80638d3d0a26116101d5578063c01e0d4011610105578063ddd6d260116100a8578063ddd6d260146107d6578063e00af4a7146107e9578063f3b27bc3146107fc578063fc0c546a14610804578063fc0e74d114610817578063fc7b9c181461081f578063fcfff16f14610827578063fd967f471461082f578063ffa1ad741461083857600080fd5b8063c01e0d4014610723578063c12d636b14610736578063d4c3eea014610749578063d505accf14610751578063d53ddc2614610764578063d8baf7cf14610777578063dd57366a1461078a578063dd62ed3e1461079d57600080fd5b80639fd5be18116101785780639fd5be18146106a3578063a9059cbb146106ac578063a941a90e146106bf578063b49a60bb146106d2578063b64321ec146106da578063b6aa515b146106ed578063b6b55f2514610700578063b8cb343d14610713578063ba0bba401461071b57600080fd5b80638d3d0a261461062c5780638f15b4141461063f578063940c408214610652578063951dc22c1461066557806395d89b411461066d57806399530b06146106755780639b6da8df1461067d5780639f2b28331461069057600080fd5b80633644e515116102b05780635c975abb116102535780635c975abb146105725780635f895e54146105865780636b453c1f1461058f5780636ba42aaa146105a25780636cb56d19146105b557806370a08231146105c85780637ecebe00146105f15780638456cb59146106115780638bc6beb21461061957600080fd5b80633644e515146105045780633e7729251461050c5780633f4ba83a146105155780634032b72b1461051d578063448a1047146105305780634938649a1461054357806349eeb860146105575780634a970be71461055f57600080fd5b806318160ddd1161031857806318160ddd146104405780631e89d54514610448578063228bfd9f1461045b57806323b872dd146104b45780632df9eab9146104c75780632e1a7d4d146104cf578063313ce567146104e257806332dd0f49146104f157600080fd5b806305bed0461461037657806306fdde031461038b578063095ea7b3146103a95780630c340a24146103cc5780630da3fe20146103ec57806311183052146103ff57806314ae9f2e1461041457806316d3bfbb14610427575b600080fd5b610389610384366004613bce565b61085c565b005b610393610add565b6040516103a09190613c26565b60405180910390f35b6103bc6103b7366004613c6e565b610b6f565b60405190151581526020016103a0565b600a546103df906001600160a01b031681565b6040516103a09190613c9a565b6103896103fa366004613cae565b610b86565b610407610c72565b6040516103a09190613cc7565b610389610422366004613d14565b610cf8565b6104326301e1338081565b6040519081526020016103a0565b600254610432565b6103bc610456366004613d7d565b610d7d565b61046e610469366004613d14565b610e63565b604080519915158a5260208a0198909852968801959095526060870193909352608086019190915260a085015260c084015260e0830152610100820152610120016103a0565b6103bc6104c2366004613de9565b610f14565b610432610fc7565b6103896104dd366004613cae565b611044565b604051601281526020016103a0565b6104326104ff366004613cae565b6110b5565b6104326110c1565b610432601e5481565b6103896110cb565b61038961052b366004613d14565b61110e565b61038961053e366004613cae565b61118b565b600b546103bc90600160a81b900460ff1681565b6104076111e6565b61038961056d366004613e39565b6111f2565b600b546103bc90600160a01b900460ff1681565b610432601d5481565b61038961059d366004613d14565b6112f9565b6103bc6105b0366004613d14565b61133d565b6103896105c3366004613e82565b61134a565b6104326105d6366004613d14565b6001600160a01b031660009081526020819052604090205490565b6104326105ff366004613d14565b60096020526000908152604090205481565b610389611589565b600f546103df906001600160a01b031681565b61038961063a366004613cae565b6115ca565b61038961064d366004613f72565b611672565b610389610660366004613d14565b611850565b610407611917565b610393611923565b610432611932565b61038961068b366004613cae565b611a0b565b61043261069e366004613d14565b611ab6565b610432601f5481565b6103bc6106ba366004613c6e565b611b37565b6103896106cd366004613cae565b611b44565b610407611b9f565b6104326106e8366004613d14565b611be4565b6103896106fb366004613d14565b611c15565b61038961070e366004613cae565b611cb3565b610432611d17565b610389611d60565b610432610731366004613cae565b611dfa565b600e546103df906001600160a01b031681565b610432611eee565b61038961075f366004613ffb565b611f88565b610432610772366004613d14565b612148565b610389610785366004613d14565b612179565b6103bc610798366004613d14565b6121bd565b6104326107ab366004613e82565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6103896107e4366004613cae565b6121ca565b6103896107f7366004613d14565b612231565b61038961234c565b600d546103df906001600160a01b031681565b610389612408565b610432612449565b61038961248e565b61043261271081565b610393604051806040016040528060058152602001640352e302e360dc1b81525081565b3383156109d157600e5460405163228bfd9f60e01b815260009182916001600160a01b039091169063228bfd9f90610898908690600401613c9a565b6101206040518083038186803b1580156108b157600080fd5b505afa1580156108c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e99190614081565b505050509450945050505060006109018383896124cf565b905080156109cd5761098b846001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561094557600080fd5b505afa158015610959573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097d91906140f1565b61098683612542565b6125a7565b60408051838152602081018990529081018290527f692ef79cc704efab4328e6c217b5fb3b1045d0a0314e3e8137029bcb2d59ce4a9060600160405180910390a15b5050505b600e5460405163a066654b60e01b81526001600160a01b038381166004830152602482018790526044820186905260648201859052600092839291169063a066654b906084016040805180830381600087803b158015610a3057600080fd5b505af1158015610a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a68919061410e565b90925090506000610a798388614148565b905081811015610aa957610aa484610a918385614160565b600d546001600160a01b03169190612674565b610ad4565b81811115610ad457610ad48430610ac08585614160565b600d546001600160a01b03169291906126cf565b50505050505050565b606060038054610aec90614177565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1890614177565b8015610b655780601f10610b3a57610100808354040283529160200191610b65565b820191906000526020600020905b815481529060010190602001808311610b4857829003601f168201915b5050505050905090565b6000610b7c338484612707565b5060015b92915050565b600a546001600160a01b03163314610bb95760405162461bcd60e51b8152600401610bb0906141b2565b60405180910390fd5b604080518082019091526002815261199960f11b602082015281610bf05760405162461bcd60e51b8152600401610bb09190613c26565b50601f5481141560405180604001604052806002815260200161333160f01b81525090610c305760405162461bcd60e51b8152600401610bb09190613c26565b50601f5460408051918252602082018390527f25c9f41f0fb7a055d44b070262516fbd0111daea3b55d40fae1983827dc99292910160405180910390a1601f55565b600e546040805163088c182960e11b815290516060926001600160a01b0316916311183052916004808301926000929190829003018186803b158015610cb757600080fd5b505afa158015610ccb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cf391908101906141d8565b905090565b600a546001600160a01b0316331480610d195750610d19335b60199061282c565b610d355760405162461bcd60e51b8152600401610bb09061428a565b610d4060198261284e565b604051806040016040528060028152602001610c4d60f21b81525090610d795760405162461bcd60e51b8152600401610bb09190613c26565b5050565b6040805180820190915260018152600d60fa1b6020820152600090848314610db85760405162461bcd60e51b8152600401610bb09190613c26565b5060005b84811015610e5757610e0c868683818110610dd957610dd96142b0565b9050602002016020810190610dee9190613d14565b858584818110610e0057610e006142b0565b90506020020135611b37565b604051806040016040528060018152602001601b60f91b81525090610e445760405162461bcd60e51b8152600401610bb09190613c26565b5080610e4f816142c6565b915050610dbc565b50600195945050505050565b600e5460405163228bfd9f60e01b8152600091829182918291829182918291829182916001600160a01b03169063228bfd9f90610ea4908d90600401613c9a565b6101206040518083038186803b158015610ebd57600080fd5b505afa158015610ed1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef59190614081565b9850985098509850985098509850985098509193959799909294969850565b6000610f21848484612863565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610fa65760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610bb0565b610fba8533610fb58685614160565b612707565b60019150505b9392505050565b600e5460408051632df9eab960e01b815290516000926001600160a01b031691632df9eab9916004808301926020929190829003018186803b15801561100c57600080fd5b505afa158015611020573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf391906142e1565b6002600c5414156110675760405162461bcd60e51b8152600401610bb0906142fa565b6002600c55600b54600160a81b900460ff16156110965760405162461bcd60e51b8152600401610bb090614331565b6110a433612944565b612944565b6110ad81612985565b506001600c55565b6000610b803383612a41565b6000610cf3612ae6565b600a546001600160a01b03163314806110e857506110e833610d11565b6111045760405162461bcd60e51b8152600401610bb09061428a565b61110c612b61565b565b600a546001600160a01b031633148061112b575061112b33610d11565b6111475760405162461bcd60e51b8152600401610bb09061428a565b611152601982612c18565b60405180604001604052806002815260200161313360f01b81525090610d795760405162461bcd60e51b8152600401610bb09190613c26565b6002600c5414156111ae5760405162461bcd60e51b8152600401610bb0906142fa565b6002600c55600b54600160a81b900460ff16156111dd5760405162461bcd60e51b8152600401610bb090614331565b6110ad81612c2d565b6060610cf3601b612c3f565b6002600c5414156112155760405162461bcd60e51b8152600401610bb0906142fa565b6002600c55600b54600160a01b900460ff16156112445760405162461bcd60e51b8152600401610bb090614353565b600d546001600160a01b031663d505accf336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018890526064810187905260ff8616608482015260a4810185905260c4810184905260e401600060405180830381600087803b1580156112c257600080fd5b505af11580156112d6573d6000803e3d6000fd5b505050506112e461109f3390565b6112ed85612c4c565b50506001600c55505050565b600a546001600160a01b0316331480611316575061131633610d11565b6113325760405162461bcd60e51b8152600401610bb09061428a565b611152601b82612c18565b6000610b8060198361282c565b600a546001600160a01b031633146113745760405162461bcd60e51b8152600401610bb0906141b2565b306001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113b757600080fd5b505afa1580156113cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ef91906140f1565b6001600160a01b03161480156114865750306001600160a01b0316826001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561144357600080fd5b505afa158015611457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147b91906140f1565b6001600160a01b0316145b60405180604001604052806002815260200161313760f01b815250906114bf5760405162461bcd60e51b8152600401610bb09190613c26565b50600e54604051636cb56d1960e01b81526001600160a01b038481166004830152838116602483015290911690636cb56d1990604401600060405180830381600087803b15801561150f57600080fd5b505af1158015611523573d6000803e3d6000fd5b505060405163ce5494bb60e01b81526001600160a01b038516925063ce5494bb9150611553908490600401613c9a565b600060405180830381600087803b15801561156d57600080fd5b505af1158015611581573d6000803e3d6000fd5b505050505050565b600a546001600160a01b03163314806115a657506115a633610d11565b6115c25760405162461bcd60e51b8152600401610bb09061428a565b61110c612cba565b600a546001600160a01b031633146115f45760405162461bcd60e51b8152600401610bb0906141b2565b604080518082019091526002815261313160f01b60208201526127108211156116305760405162461bcd60e51b8152600401610bb09190613c26565b50601d5460408051918252602082018390527f905d672396c48f9d1e13c57aec0819f00d39364ab4bf40a46a687aa607b67d81910160405180910390a1601d55565b600554610100900460ff168061168b575060055460ff16155b6116a75760405162461bcd60e51b8152600401610bb090614373565b600554610100900460ff161580156116c9576005805461ffff19166101011790555b604080518082019091526002815261031360f41b60208201526001600160a01b0384166117095760405162461bcd60e51b8152600401610bb09190613c26565b50604080518082019091526002815261031360f41b60208201526001600160a01b03831661174a5760405162461bcd60e51b8152600401610bb09190613c26565b506117558585612d1f565b61175e85612d46565b611766612dc5565b600d80546001600160a01b0319166001600160a01b03851617905561178d33601990612c18565b60405180604001604052806002815260200161313360f01b815250906117c65760405162461bcd60e51b8152600401610bb09190613c26565b506117d2601b33612c18565b60405180604001604052806002815260200161313360f01b8152509061180b5760405162461bcd60e51b8152600401610bb09190613c26565b50600e80546001600160a01b0319166001600160a01b03841617905560c8601d55611388601e556001601f558015611849576005805461ff00191690555b5050505050565b600a546001600160a01b0316331461187a5760405162461bcd60e51b8152600401610bb0906141b2565b604080518082019091526002815261031360f41b60208201526001600160a01b0382166118ba5760405162461bcd60e51b8152600401610bb09190613c26565b50600f546040516001600160a01b038084169216907fe239974dad08ac696e723caf1886bd0b5afc0870088f9a1266082757f824927690600090a3600f80546001600160a01b0319166001600160a01b0392909216919091179055565b6060610cf36019612c3f565b606060048054610aec90614177565b600061193d60025490565b158061194e575061194c611eee565b155b156119e457600d60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156119a157600080fd5b505afa1580156119b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d991906143c1565b610cf390600a6144c2565b6002546119ef611eee565b611a0190670de0b6b3a76400006144d1565b610cf391906144f0565b600a546001600160a01b03163314611a355760405162461bcd60e51b8152600401610bb0906141b2565b601e5481141560405180604001604052806002815260200161333160f01b81525090611a745760405162461bcd60e51b8152600401610bb09190613c26565b50601e5460408051918252602082018390527fafe4d3ceb3295a8d4ef49288a92d32d94e39396e823d414b81caff61b9fc3990910160405180910390a1601e55565b600e54604051639f2b283360e01b81526000916001600160a01b031690639f2b283390611ae7908590600401613c9a565b60206040518083038186803b158015611aff57600080fd5b505afa158015611b13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8091906142e1565b6000610b7c338484612863565b6002600c541415611b675760405162461bcd60e51b8152600401610bb0906142fa565b6002600c55600b54600160a01b900460ff1615611b965760405162461bcd60e51b8152600401610bb090614353565b6110ad81612e73565b600e546040805163b49a60bb60e01b815290516060926001600160a01b03169163b49a60bb916004808301926000929190829003018186803b158015610cb757600080fd5b600e54604051632d90c87b60e21b81526000916001600160a01b03169063b64321ec90611ae7908590600401613c9a565b600a546001600160a01b03163314611c3f5760405162461bcd60e51b8152600401610bb0906141b2565b6001600160a01b038116611c915760405162461bcd60e51b815260206004820152601960248201527870726f706f7365642d676f7665726e6f722d69732d7a65726f60381b6044820152606401610bb0565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6002600c541415611cd65760405162461bcd60e51b8152600401610bb0906142fa565b6002600c55600b54600160a01b900460ff1615611d055760405162461bcd60e51b8152600401610bb090614353565b611d0e33612944565b6110ad81612c4c565b600d546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611d48903090600401613c9a565b60206040518083038186803b15801561100c57600080fd5b600a546001600160a01b03163314611d8a5760405162461bcd60e51b8152600401610bb0906141b2565b60c8601d55611388601e556001601f55600e54604080516302e82ee960e61b815290516001600160a01b039092169163ba0bba409160048082019260009290919082900301818387803b158015611de057600080fd5b505af1158015611df4573d6000803e3d6000fd5b50505050565b6000601f54821015604051806040016040528060018152602001603160f81b81525090611e3a5760405162461bcd60e51b8152600401610bb09190613c26565b506000612710600e60009054906101000a90046001600160a01b03166001600160a01b031663346162d56040518163ffffffff1660e01b815260040160206040518083038186803b158015611e8e57600080fd5b505afa158015611ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec691906142e1565b611ed090856144d1565b611eda91906144f0565b9050610fc0611ee98285614160565b612542565b6000611ef8611d17565b600e60009054906101000a90046001600160a01b03166001600160a01b031663fc7b9c186040518163ffffffff1660e01b815260040160206040518083038186803b158015611f4657600080fd5b505afa158015611f5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7e91906142e1565b610cf39190614148565b83421115611fd85760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610bb0565b6001600160a01b0387811660008181526009602090815260408083205481517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98185015280830195909552948b166060850152608084018a905260a0840185905260c08085018a90528151808603909101815260e09094019052825192019190912090612063612ae6565b60405161190160f01b602082015260228101919091526042810183905260620160405160208183030381529060405280519060200120905060006120a982888888612e85565b90508a6001600160a01b0316816001600160a01b03161461210c5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610bb0565b612117846001614148565b6001600160a01b038c1660009081526009602052604090205561213b8b8b8b612707565b5050505050505050505050565b600e54604051636a9eee1360e11b81526000916001600160a01b03169063d53ddc2690611ae7908590600401613c9a565b600a546001600160a01b0316331480612196575061219633610d11565b6121b25760405162461bcd60e51b8152600401610bb09061428a565b610d40601b8261284e565b6000610b80601b8361282c565b801561222e57600e546001600160a01b0316637f13086e33836040518363ffffffff1660e01b8152600401612200929190614512565b600060405180830381600087803b15801561221a57600080fd5b505af1158015611849573d6000803e3d6000fd5b50565b600a546001600160a01b031633148061224e575061224e33610d11565b61226a5760405162461bcd60e51b8152600401610bb09061428a565b600d546040805180820190915260018152600760fb1b6020820152906001600160a01b03838116911614156122b25760405162461bcd60e51b8152600401610bb09190613c26565b50600a546040516370a0823160e01b815261222e916001600160a01b0390811691908416906370a08231906122eb903090600401613c9a565b60206040518083038186803b15801561230357600080fd5b505afa158015612317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233b91906142e1565b6001600160a01b0384169190612674565b600b546001600160a01b031633146123a25760405162461bcd60e51b81526020600482015260196024820152783737ba16ba343296b83937b837b9b2b216b3b7bb32b93737b960391b6044820152606401610bb0565b600b54600a546040516001600160a01b0392831692909116907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d090600090a3600b8054600a80546001600160a01b03199081166001600160a01b03841617909155169055565b600a546001600160a01b0316331480612425575061242533610d11565b6124415760405162461bcd60e51b8152600401610bb09061428a565b61110c613016565b600e5460408051631f8f738360e31b815290516000926001600160a01b03169163fc7b9c18916004808301926020929190829003018186803b15801561100c57600080fd5b600a546001600160a01b03163314806124ab57506124ab33610d11565b6124c75760405162461bcd60e51b8152600401610bb09061428a565b61110c61307c565b60006124e16301e133806127106144d1565b836124ec8642614160565b601d546124f991906144d1565b61250391906144d1565b61250d91906144f0565b90506000612710601e548461252291906144d1565b61252c91906144f0565b90508082111561253a578091505b509392505050565b60008061254d611932565b61255f84670de0b6b3a76400006144d1565b61256991906144f0565b9050670de0b6b3a764000061257c611932565b61258690836144d1565b61259091906144f0565b831161259c5780610fc0565b610fc0816001614148565b6001600160a01b0382166125fd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610bb0565b806002600082825461260f9190614148565b90915550506001600160a01b0382166000908152602081905260408120805483929061263c908490614148565b90915550506040518181526001600160a01b038316906000906000805160206145798339815191529060200160405180910390a35050565b6126ca8363a9059cbb60e01b8484604051602401612693929190614512565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526130f8565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611df49085906323b872dd60e01b90608401612693565b6001600160a01b0383166127695760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610bb0565b6001600160a01b0382166127ca5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610bb0565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03811660009081526001830160205260408120541515610fc0565b6000610fc0836001600160a01b0384166131ca565b600f546001600160a01b03161561293957600f5460405163632447c960e01b81526001600160a01b039091169063632447c9906128a4908690600401613c9a565b600060405180830381600087803b1580156128be57600080fd5b505af11580156128d2573d6000803e3d6000fd5b5050600f5460405163632447c960e01b81526001600160a01b03909116925063632447c99150612906908590600401613c9a565b600060405180830381600087803b15801561292057600080fd5b505af1158015612934573d6000803e3d6000fd5b505050505b6126ca8383836132bd565b600f546001600160a01b03161561222e57600f5460405163632447c960e01b81526001600160a01b039091169063632447c990612200908490600401613c9a565b6040805180820190915260018152601960f91b6020820152816129bb5760405162461bcd60e51b8152600401610bb09190613c26565b506000806129c883613483565b9150915080156129ed5760006129dd83612542565b9050838110156129eb578093505b505b6129f73384613530565b612a008261366d565b50604080518481526020810184905233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a2505050565b600e5460405163228bfd9f60e01b8152600091829182916001600160a01b03169063228bfd9f90612a76908890600401613c9a565b6101206040518083038186803b158015612a8f57600080fd5b505afa158015612aa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac79190614081565b5050505094509450505050612add8282866124cf565b95945050505050565b6000600854461415612af9575060065490565b6007546040805180820190915260018152603160f81b602090910152610cf3907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f907fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc661368a565b600b54600160a01b900460ff16612ba75760405162461bcd60e51b815260206004820152600a6024820152691b9bdd0b5c185d5cd95960b21b6044820152606401610bb0565b600b54600160a81b900460ff1615612bd15760405162461bcd60e51b8152600401610bb090614331565b600b805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051612c0e9190613c9a565b60405180910390a1565b6000610fc0836001600160a01b0384166136d3565b612c3633613722565b61222e81612985565b60606000610fc083613763565b6000612c5782611dfa565b9050612c7133600d546001600160a01b03169030856126cf565b612c7b33826125a7565b604080518281526020810184905233917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a25050565b600b54600160a01b900460ff1615612ce45760405162461bcd60e51b8152600401610bb090614353565b600b805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612c013390565b8151612d32906003906020850190613b3e565b5080516126ca906004906020840190613b3e565b80516020808301919091206007819055466008556040805180820190915260018152603160f81b920191909152612dbf907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f907fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc661368a565b60065550565b600554610100900460ff1680612dde575060055460ff16155b612dfa5760405162461bcd60e51b8152600401610bb090614373565b600554610100900460ff16158015612e1c576005805461ffff19166101011790555b600a80546001600160a01b0319163390811790915560405181906000907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a350801561222e576005805461ff001916905550565b612e7c33613722565b61222e81612c4c565b60006fa2a8918ca85bafe22016d0b997e4df60600160ff1b03821115612ef85760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610bb0565b8360ff16601b1480612f0d57508360ff16601c145b612f645760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610bb0565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015612fb8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612add5760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b6044820152606401610bb0565b600b54600160a81b900460ff16156130405760405162461bcd60e51b8152600401610bb090614331565b600b805461ffff60a01b191661010160a01b1790557f28b4c24cb1012c094cd2f59f98e89d791973295f8fda6eaa118022d6d318960a33612c01565b600b54600160a81b900460ff166130c45760405162461bcd60e51b815260206004820152600c60248201526b3737ba16b9b43aba3237bbb760a11b6044820152606401610bb0565b600b805460ff60a81b191690557fece7583a70a505ef0e36d4dec768f5ae597713e09c26011022599ee01abdabfc33612c01565b600061314d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137bf9092919063ffffffff16565b8051909150156126ca578080602001905181019061316b919061452b565b6126ca5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610bb0565b600081815260018301602052604081205480156132b35760006131ee600183614160565b855490915060009061320290600190614160565b9050818114613267576000866000018281548110613222576132226142b0565b9060005260206000200154905080876000018481548110613245576132456142b0565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061327857613278614546565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610b80565b6000915050610b80565b6001600160a01b0383166133215760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610bb0565b6001600160a01b0382166133835760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610bb0565b6001600160a01b038316600090815260208190526040902054818110156133fb5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610bb0565b6134058282614160565b6001600160a01b03808616600090815260208190526040808220939093559085168152908120805484929061343b908490614148565b92505081905550826001600160a01b0316846001600160a01b03166000805160206145798339815191528460405161347591815260200190565b60405180910390a350505050565b6000806000670de0b6b3a7640000613499611932565b6134a390866144d1565b6134ad91906144f0565b905060006134b9611d17565b9050819350808211156134f2576134d86134d38284614160565b6137d6565b6134e0611d17565b9050808211156134f257809350600192505b6040805180820190915260018152603160f81b6020820152846135285760405162461bcd60e51b8152600401610bb09190613c26565b505050915091565b6001600160a01b0382166135905760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610bb0565b6001600160a01b038216600090815260208190526040902054818110156136045760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610bb0565b61360e8282614160565b6001600160a01b0384166000908152602081905260408120919091556002805484929061363c908490614160565b90915550506040518281526000906001600160a01b038516906000805160206145798339815191529060200161281f565b600061368633600d546001600160a01b03169084612674565b5090565b6040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b600081815260018301602052604081205461371a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b80565b506000610b80565b600f546001600160a01b03161561222e57600f5460405163d279c19160e01b81526001600160a01b039091169063d279c19190612200908490600401613c9a565b6060816000018054806020026020016040519081016040528092919081815260200182805480156137b357602002820191906000526020600020905b81548152602001906001019080831161379f575b50505050509050919050565b60606137ce84846000856139dd565b949350505050565b6000806000806000806137e7610c72565b805190915060005b818110156139d2576000613803858b614160565b90506000848381518110613819576138196142b0565b6020908102919091010151600e54604051639f2b283360e01b81529192506001600160a01b031690639f2b283390613855908490600401613c9a565b60206040518083038186803b15801561386d57600080fd5b505afa158015613881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138a591906142e1565b9950896138b35750506139c0565b898211156138bf578991505b6138c7611d17565b604051632e1a7d4d60e01b8152600481018490529098506001600160a01b03821690632e1a7d4d90602401600060405180830381600087803b15801561390c57600080fd5b505af192505050801561391d575060015b6139285750506139c0565b613930611d17565b985061393c888a614160565b600e54604051632fb9ba3160e01b81529198506001600160a01b031690632fb9ba319061396f9084908b90600401614512565b600060405180830381600087803b15801561398957600080fd5b505af115801561399d573d6000803e3d6000fd5b5050505086866139ad9190614148565b95508a86106139bd5750506139d2565b50505b806139ca816142c6565b9150506137ef565b505050505050505050565b606082471015613a3e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610bb0565b843b613a8c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610bb0565b600080866001600160a01b03168587604051613aa8919061455c565b60006040518083038185875af1925050503d8060008114613ae5576040519150601f19603f3d011682016040523d82523d6000602084013e613aea565b606091505b5091509150613afa828286613b05565b979650505050505050565b60608315613b14575081610fc0565b825115613b245782518084602001fd5b8160405162461bcd60e51b8152600401610bb09190613c26565b828054613b4a90614177565b90600052602060002090601f016020900481019282613b6c5760008555613bb2565b82601f10613b8557805160ff1916838001178555613bb2565b82800160010185558215613bb2579182015b82811115613bb2578251825591602001919060010190613b97565b506136869291505b808211156136865760008155600101613bba565b600080600060608486031215613be357600080fd5b505081359360208301359350604090920135919050565b60005b83811015613c15578181015183820152602001613bfd565b83811115611df45750506000910152565b6020815260008251806020840152613c45816040850160208701613bfa565b601f01601f19169190910160400192915050565b6001600160a01b038116811461222e57600080fd5b60008060408385031215613c8157600080fd5b8235613c8c81613c59565b946020939093013593505050565b6001600160a01b0391909116815260200190565b600060208284031215613cc057600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015613d085783516001600160a01b031683529284019291840191600101613ce3565b50909695505050505050565b600060208284031215613d2657600080fd5b8135610fc081613c59565b60008083601f840112613d4357600080fd5b50813567ffffffffffffffff811115613d5b57600080fd5b6020830191508360208260051b8501011115613d7657600080fd5b9250929050565b60008060008060408587031215613d9357600080fd5b843567ffffffffffffffff80821115613dab57600080fd5b613db788838901613d31565b90965094506020870135915080821115613dd057600080fd5b50613ddd87828801613d31565b95989497509550505050565b600080600060608486031215613dfe57600080fd5b8335613e0981613c59565b92506020840135613e1981613c59565b929592945050506040919091013590565b60ff8116811461222e57600080fd5b600080600080600060a08688031215613e5157600080fd5b85359450602086013593506040860135613e6a81613e2a565b94979396509394606081013594506080013592915050565b60008060408385031215613e9557600080fd5b8235613ea081613c59565b91506020830135613eb081613c59565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613efa57613efa613ebb565b604052919050565b600082601f830112613f1357600080fd5b813567ffffffffffffffff811115613f2d57613f2d613ebb565b613f40601f8201601f1916602001613ed1565b818152846020838601011115613f5557600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215613f8857600080fd5b843567ffffffffffffffff80821115613fa057600080fd5b613fac88838901613f02565b95506020870135915080821115613fc257600080fd5b50613fcf87828801613f02565b9350506040850135613fe081613c59565b91506060850135613ff081613c59565b939692955090935050565b600080600080600080600060e0888a03121561401657600080fd5b873561402181613c59565b9650602088013561403181613c59565b95506040880135945060608801359350608088013561404f81613e2a565b9699959850939692959460a0840135945060c09093013592915050565b8051801515811461407c57600080fd5b919050565b60008060008060008060008060006101208a8c0312156140a057600080fd5b6140a98a61406c565b985060208a0151975060408a0151965060608a0151955060808a0151945060a08a0151935060c08a0151925060e08a015191506101008a015190509295985092959850929598565b60006020828403121561410357600080fd5b8151610fc081613c59565b6000806040838503121561412157600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b6000821982111561415b5761415b614132565b500190565b60008282101561417257614172614132565b500390565b600181811c9082168061418b57607f821691505b602082108114156141ac57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b3737ba16b3b7bb32b93737b960a11b604082015260600190565b600060208083850312156141eb57600080fd5b825167ffffffffffffffff8082111561420357600080fd5b818501915085601f83011261421757600080fd5b81518181111561422957614229613ebb565b8060051b915061423a848301613ed1565b818152918301840191848101908884111561425457600080fd5b938501935b8385101561427e578451925061426e83613c59565b8282529385019390850190614259565b98975050505050505050565b6020808252600c908201526b3737ba16b096b5b2b2b832b960a11b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006000198214156142da576142da614132565b5060010190565b6000602082840312156142f357600080fd5b5051919050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526008908201526739b43aba3237bbb760c11b604082015260600190565b6020808252600690820152651c185d5cd95960d21b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000602082840312156143d357600080fd5b8151610fc081613e2a565b600181815b808511156144195781600019048211156143ff576143ff614132565b8085161561440c57918102915b93841c93908002906143e3565b509250929050565b60008261443057506001610b80565b8161443d57506000610b80565b8160018114614453576002811461445d57614479565b6001915050610b80565b60ff84111561446e5761446e614132565b50506001821b610b80565b5060208310610133831016604e8410600b841016171561449c575081810a610b80565b6144a683836143de565b80600019048211156144ba576144ba614132565b029392505050565b6000610fc060ff841683614421565b60008160001904831182151516156144eb576144eb614132565b500290565b60008261450d57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b03929092168252602082015260400190565b60006020828403121561453d57600080fd5b610fc08261406c565b634e487b7160e01b600052603160045260246000fd5b6000825161456e818460208701613bfa565b919091019291505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220c56bcb0fcc5ec6f05dd5efd12d7224f6c3ec88d5b136975d0e61e811d2af6d0464736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
      },
      "acceptGovernorship()": {
        "details": "Allows new governor to accept governorship of the contract."
      },
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "addMaintainer(address)": {
        "params": {
          "_maintainerAddress": "maintainer address to add."
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "availableCreditLimit(address)": {
        "details": "Available credit limit is calculated based on current debt of pool and strategy, current debt limit of pool and strategy. credit available = min(pool's debt limit, strategy's debt limit, max debt per rebalance) when some strategy do not pay back outstanding debt, this impact credit line of other strategy if totalDebt of pool >= debtLimit of pool",
        "params": {
          "_strategy": "Strategy address"
        }
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "calculateMintage(uint256)": {
        "details": "Amount should be >= minimum deposit limit which default to 1",
        "params": {
          "_amount": "Collateral amount"
        },
        "returns": {
          "_shares": "Amount of share that user will get"
        }
      },
      "calculateUniversalFee(uint256)": {
        "details": "Earn strategies will call this during rebalance."
      },
      "decimals()": {
        "details": "Returns the decimals of the token. default to 18"
      },
      "deposit(uint256)": {
        "params": {
          "_amount": "ERC20 token amount."
        }
      },
      "depositAndClaim(uint256)": {
        "params": {
          "_amount": "ERC20 token amount."
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "_amount": "ERC20 token amount.",
          "_deadline": "The time at which signature will expire",
          "_r": "Half of the ECDSA signature pair",
          "_s": "Half of the ECDSA signature pair",
          "_v": "The recovery byte of the signature"
        }
      },
      "excessDebt(address)": {
        "params": {
          "_strategy": "Address of strategy"
        }
      },
      "initialize(string,string,address,address)": {
        "details": "Equivalent to constructor for proxy. It can be called only once per proxy."
      },
      "migrateStrategy(address,address)": {
        "details": "Migrating strategy aka old and new strategy should be of same type.",
        "params": {
          "_new": "Address of new strategy",
          "_old": "Address of strategy being migrated"
        }
      },
      "multiTransfer(address[],uint256[])": {
        "details": "Address array and amount array are 1:1 and are in order.",
        "params": {
          "_amounts": "array of token amounts",
          "_recipients": "array of recipient addresses"
        },
        "returns": {
          "_0": "true/false"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "See {IERC20Permit-permit}."
      },
      "pricePerShare()": {
        "details": "Return value will be in token defined decimals."
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "removeMaintainer(address)": {
        "params": {
          "_maintainerAddress": "maintainer address to remove."
        }
      },
      "reportEarning(uint256,uint256,uint256)": {
        "params": {
          "_loss": "Reduce debt ,also reduce debtRatio, increase loss in record.",
          "_payback": "strategy willing to payback outstanding above debtLimit. no performance fee on this amount.  when governance has reduced debtRatio of strategy, strategy will report profit and payback amount separately.",
          "_profit": "yield generated by strategy. Strategy get performance fee on this amount"
        }
      },
      "reportLoss(uint256)": {
        "details": "Some strategies pay deposit fee thus realizing loss at deposit. For example: Curve's 3pool has some slippage due to deposit of one asset in 3pool. Strategy may want report this loss instead of waiting for next rebalance.",
        "params": {
          "_loss": "Loss that strategy want to report"
        }
      },
      "sweepERC20(address)": {
        "details": "Transfer given ERC20 token to governor",
        "params": {
          "_fromToken": "Token address to sweep"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "tokensHere()": {
        "details": "Returns the token stored in the pool. It will be in token defined decimals."
      },
      "totalDebtOf(address)": {
        "params": {
          "_strategy": "Strategy address"
        }
      },
      "totalSupply()": {
        "details": "Returns total supply of the token."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferGovernorship(address)": {
        "details": "Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner."
      },
      "updateMaximumProfitAsFee(uint256)": {
        "params": {
          "_newMaxProfitAsFee": "New max profit as fee"
        }
      },
      "updateMinimumDepositLimit(uint256)": {
        "params": {
          "_newLimit": "New minimum deposit limit"
        }
      },
      "updatePoolRewards(address)": {
        "params": {
          "_newPoolRewards": "new pool rewards address"
        }
      },
      "updateUniversalFee(uint256)": {
        "details": "Format: 1500 = 15% fee, 100 = 1%",
        "params": {
          "_newUniversalFee": "new universal fee"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_shares": "Pool shares. It will be in 18 decimals."
        }
      },
      "withdrawAndClaim(uint256)": {
        "params": {
          "_shares": "Pool shares. It will be in 18 decimals."
        }
      }
    },
    "title": "Holding pool share token",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "addMaintainer(address)": {
        "notice": "Add given address in maintainers list."
      },
      "availableCreditLimit(address)": {
        "notice": "Get available credit limit of strategy. This is the amount strategy can borrow from pool"
      },
      "calculateMintage(uint256)": {
        "notice": "Calculate how much shares user will get for given amount. Also return externalDepositFee if any."
      },
      "calculateUniversalFee(uint256)": {
        "notice": "Calculate universal fee for calling strategy. This is only strategy function."
      },
      "deposit(uint256)": {
        "notice": "Deposit ERC20 tokens and receive pool shares depending on the current share price."
      },
      "depositAndClaim(uint256)": {
        "notice": "Deposit ERC20 tokens and claim rewards if any"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit ERC20 tokens with permit aka gasless approval."
      },
      "excessDebt(address)": {
        "notice": "Debt above current debt limit"
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "maintainers()": {
        "notice": "Return list of maintainers"
      },
      "maxProfitAsFee()": {
        "notice": "Maximum percentage of profit that can be counted as universal fee. Default to 50%"
      },
      "migrateStrategy(address,address)": {
        "notice": "Migrate existing strategy to new strategy."
      },
      "minDepositLimit()": {
        "notice": "Minimum deposit limit."
      },
      "multiTransfer(address[],uint256[])": {
        "notice": "Transfer tokens to multiple recipient"
      },
      "poolAccountant()": {
        "notice": "PoolAccountant address"
      },
      "poolRewards()": {
        "notice": "PoolRewards contract address"
      },
      "pricePerShare()": {
        "notice": "Get price per share"
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "removeMaintainer(address)": {
        "notice": "Remove given address from maintainers list."
      },
      "reportEarning(uint256,uint256,uint256)": {
        "notice": "Strategy call this in regular interval. Only strategy function."
      },
      "reportLoss(uint256)": {
        "notice": "Report loss outside of rebalance activity."
      },
      "setup()": {
        "notice": "OnlyGovernor:: Helper function for V5 upgrade"
      },
      "token()": {
        "notice": "Collateral token address"
      },
      "totalDebt()": {
        "notice": "Get total debt of pool"
      },
      "totalDebtOf(address)": {
        "notice": "Get total debt of given strategy"
      },
      "totalDebtRatio()": {
        "notice": "Get total debt ratio. Total debt ratio helps us keep buffer in pool"
      },
      "totalValue()": {
        "notice": "Returns sum of token locked in other contracts and token stored in the pool. It will be in token defined decimals."
      },
      "universalFee()": {
        "notice": "Universal fee of this pool. Default to 2%"
      },
      "updateMaximumProfitAsFee(uint256)": {
        "notice": "Only Governor:: Update maximum profit that can be used as universal fee"
      },
      "updateMinimumDepositLimit(uint256)": {
        "notice": "Only Governor:: Update minimum deposit limit"
      },
      "updatePoolRewards(address)": {
        "notice": "Update pool rewards address for this pool"
      },
      "updateUniversalFee(uint256)": {
        "notice": "Update universal fee for this pool"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw collateral based on given shares and the current share price. Burn remaining shares and return collateral."
      },
      "withdrawAndClaim(uint256)": {
        "notice": "Withdraw collateral and claim rewards if any"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9426,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9432,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9434,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 9436,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 9438,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2095,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 2098,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "_initializing",
        "offset": 1,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 9899,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "_CACHED_DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 9901,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "7",
        "type": "t_bytes32"
      },
      {
        "astId": 9903,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "_CACHED_CHAIN_ID",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 9909,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "nonces",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 792,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "governor",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 794,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "proposedGovernor",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 939,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "paused",
        "offset": 20,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 941,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "stopEverything",
        "offset": 21,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 2146,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "_status",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 11136,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "token",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IERC20)2760"
      },
      {
        "astId": 11139,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "poolAccountant",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 11142,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "poolRewards",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 11144,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "feeWhitelistObsolete",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 11146,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "keepersObsolete",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 11148,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "maintainersObsolete",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 11150,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "feeCollectorObsolete",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 11152,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "withdrawFeeObsolete",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 11154,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "decimalConversionFactorObsolete",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 11156,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "withdrawInETH",
        "offset": 0,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 11162,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "_feeWhitelistObsolete",
        "offset": 0,
        "slot": "23",
        "type": "t_struct(AddressSet)4634_storage"
      },
      {
        "astId": 11165,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "_keepers",
        "offset": 0,
        "slot": "25",
        "type": "t_struct(AddressSet)4634_storage"
      },
      {
        "astId": 11168,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "_maintainers",
        "offset": 0,
        "slot": "27",
        "type": "t_struct(AddressSet)4634_storage"
      },
      {
        "astId": 11175,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "universalFee",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 11179,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "maxProfitAsFee",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 11183,
        "contract": "contracts/pool/VPool.sol:VPool",
        "label": "minDepositLimit",
        "offset": 0,
        "slot": "31",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2760": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)4634_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4633,
            "contract": "contracts/pool/VPool.sol:VPool",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4333_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4333_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4328,
            "contract": "contracts/pool/VPool.sol:VPool",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4332,
            "contract": "contracts/pool/VPool.sol:VPool",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}